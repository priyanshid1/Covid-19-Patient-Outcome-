{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { arrayEach, arrayFilter, arrayReduce, arrayMap } from \"../../helpers/array.mjs\";\nimport { cancelAnimationFrame, requestAnimationFrame } from \"../../helpers/feature.mjs\";\nimport GhostTable from \"../../utils/ghostTable.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { isObject, hasOwnProperty } from \"../../helpers/object.mjs\";\nimport { valueAccordingPercent, rangeEach } from \"../../helpers/number.mjs\";\nimport SamplesGenerator from \"../../utils/samplesGenerator.mjs\";\nimport { isPercentValue } from \"../../helpers/string.mjs\";\nimport { ViewportColumnsCalculator } from \"../../3rdparty/walkontable/src/index.mjs\";\nimport { PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nHooks.getSingleton().register('modifyAutoColumnSizeSeed');\nexport var PLUGIN_KEY = 'autoColumnSize';\nexport var PLUGIN_PRIORITY = 10;\nvar privatePool = new WeakMap();\nvar COLUMN_SIZE_MAP_NAME = 'autoColumnSize';\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin AutoColumnSize\n * @class AutoColumnSize\n *\n * @description\n * This plugin allows to set column widths based on their widest cells.\n *\n * By default, the plugin is declared as `undefined`, which makes it enabled (same as if it was declared as `true`).\n * Enabling this plugin may decrease the overall table performance, as it needs to calculate the widths of all cells to\n * resize the columns accordingly.\n * If you experience problems with the performance, try turning this feature off and declaring the column widths manually.\n *\n * Column width calculations are divided into sync and async part. Each of this parts has their own advantages and\n * disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous\n * operations don't block the browser UI.\n *\n * To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value to a config object:\n *\n * ```js\n * // as a number (300 columns in sync, rest async)\n * autoColumnSize: {syncLimit: 300},.\n *\n * // as a string (percent)\n * autoColumnSize: {syncLimit: '40%'},\n * ```\n *\n * The plugin uses {@link GhostTable} and {@link SamplesGenerator} for calculations.\n * First, {@link SamplesGenerator} prepares samples of data with its coordinates.\n * Next {@link GhostTable} uses coordinates to get cells' renderers and append all to the DOM through DocumentFragment.\n *\n * Sampling accepts additional options:\n * - *samplingRatio* - Defines how many samples for the same length will be used to calculate. Default is `3`.\n *\n * ```js\n *   autoColumnSize: {\n *     samplingRatio: 10,\n *   }\n * ```\n *\n * - *allowSampleDuplicates* - Defines if duplicated values might be used in sampling. Default is `false`.\n *\n * ```js\n *   autoColumnSize: {\n *     allowSampleDuplicates: true,\n *   }\n * ```\n *\n * To configure this plugin see {@link Options#autoColumnSize}.\n *\n * @example\n *\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *   data: getData(),\n *   autoColumnSize: true\n * });\n * // Access to plugin instance:\n * const plugin = hot.getPlugin('autoColumnSize');\n *\n * plugin.getColumnWidth(4);\n *\n * if (plugin.isEnabled()) {\n *   // code...\n * }\n * ```\n */\n\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\nexport var AutoColumnSize = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(AutoColumnSize, _BasePlugin);\n  var _super = _createSuper(AutoColumnSize);\n  function AutoColumnSize(hotInstance) {\n    var _this;\n    _classCallCheck(this, AutoColumnSize);\n    _this = _super.call(this, hotInstance);\n    privatePool.set(_assertThisInitialized(_this), {\n      /**\n       * Cached column header names. It is used to diff current column headers with previous state and detect which\n       * columns width should be updated.\n       *\n       * @private\n       * @type {Array}\n       */\n      cachedColumnHeaders: []\n    });\n    /**\n     * Instance of {@link GhostTable} for rows and columns size calculations.\n     *\n     * @private\n     * @type {GhostTable}\n     */\n\n    _this.ghostTable = new GhostTable(_this.hot);\n    /**\n     * Instance of {@link SamplesGenerator} for generating samples necessary for columns width calculations.\n     *\n     * @private\n     * @type {SamplesGenerator}\n     * @fires Hooks#modifyAutoColumnSizeSeed\n     */\n\n    _this.samplesGenerator = new SamplesGenerator(function (row, column) {\n      var cellMeta = _this.hot.getCellMeta(row, column);\n      var cellValue = '';\n      if (!cellMeta.spanned) {\n        cellValue = _this.hot.getDataAtCell(row, column);\n      }\n      var bundleSeed = '';\n      if (_this.hot.hasHook('modifyAutoColumnSizeSeed')) {\n        bundleSeed = _this.hot.runHooks('modifyAutoColumnSizeSeed', bundleSeed, cellMeta, cellValue);\n      }\n      return {\n        value: cellValue,\n        bundleSeed: bundleSeed\n      };\n    });\n    /**\n     * `true` only if the first calculation was performed.\n     *\n     * @private\n     * @type {boolean}\n     */\n\n    _this.firstCalculation = true;\n    /**\n     * `true` if the size calculation is in progress.\n     *\n     * @type {boolean}\n     */\n\n    _this.inProgress = false;\n    /**\n     * Number of already measured columns (we already know their sizes).\n     *\n     * @type {number}\n     */\n\n    _this.measuredColumns = 0;\n    /**\n     * PhysicalIndexToValueMap to keep and track widths for physical column indexes.\n     *\n     * @private\n     * @type {PhysicalIndexToValueMap}\n     */\n\n    _this.columnWidthsMap = new IndexToValueMap();\n    _this.hot.columnIndexMapper.registerMap(COLUMN_SIZE_MAP_NAME, _this.columnWidthsMap); // Leave the listener active to allow auto-sizing the columns when the plugin is disabled.\n    // This is necesseary for width recalculation for resize handler doubleclick (ManualColumnResize).\n\n    _this.addHook('beforeColumnResize', function (size, column, isDblClick) {\n      return _this.onBeforeColumnResize(size, column, isDblClick);\n    });\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link #enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n\n  _createClass(AutoColumnSize, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.hot.getSettings()[PLUGIN_KEY] !== false && !this.hot.getSettings().colWidths;\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n      if (this.enabled) {\n        return;\n      }\n      var setting = this.hot.getSettings()[PLUGIN_KEY];\n      if (setting && setting.useHeaders !== null && setting.useHeaders !== void 0) {\n        this.ghostTable.setSetting('useHeaders', setting.useHeaders);\n      }\n      this.setSamplingOptions();\n      this.addHook('afterLoadData', function () {\n        return _this2.onAfterLoadData.apply(_this2, arguments);\n      });\n      this.addHook('beforeChange', function (changes) {\n        return _this2.onBeforeChange(changes);\n      });\n      this.addHook('afterFormulasValuesUpdate', function (changes) {\n        return _this2.onAfterFormulasValuesUpdate(changes);\n      });\n      this.addHook('beforeViewRender', function (force) {\n        return _this2.onBeforeViewRender(force);\n      });\n      this.addHook('modifyColWidth', function (width, col) {\n        return _this2.getColumnWidth(col, width);\n      });\n      this.addHook('afterInit', function () {\n        return _this2.onAfterInit();\n      });\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\n     */\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      var changedColumns = this.findColumnsWhereHeaderWasChanged();\n      if (changedColumns.length) {\n        this.clearCache(changedColumns);\n        this.calculateVisibleColumnsWidth();\n      }\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      var _this3 = this;\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"disablePlugin\", this).call(this); // Leave the listener active to allow auto-sizing the columns when the plugin is disabled.\n      // This is necesseary for width recalculation for resize handler doubleclick (ManualColumnResize).\n\n      this.addHook('beforeColumnResize', function (size, column, isDblClick) {\n        return _this3.onBeforeColumnResize(size, column, isDblClick);\n      });\n    }\n    /**\n     * Calculates visible columns width.\n     */\n  }, {\n    key: \"calculateVisibleColumnsWidth\",\n    value: function calculateVisibleColumnsWidth() {\n      var rowsCount = this.hot.countRows(); // Keep last column widths unchanged for situation when all rows was deleted or trimmed (pro #6)\n\n      if (!rowsCount) {\n        return;\n      }\n      var force = this.hot.renderCall;\n      var firstVisibleColumn = this.getFirstVisibleColumn();\n      var lastVisibleColumn = this.getLastVisibleColumn();\n      if (firstVisibleColumn === -1 || lastVisibleColumn === -1) {\n        return;\n      }\n      this.calculateColumnsWidth({\n        from: firstVisibleColumn,\n        to: lastVisibleColumn\n      }, void 0, force);\n    }\n    /**\n     * Calculates a columns width.\n     *\n     * @param {number|object} colRange Visual column index or an object with `from` and `to` visual indexes as a range.\n     * @param {number|object} rowRange Visual row index or an object with `from` and `to` visual indexes as a range.\n     * @param {boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.\n     */\n  }, {\n    key: \"calculateColumnsWidth\",\n    value: function calculateColumnsWidth() {\n      var _this4 = this;\n      var colRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countCols() - 1\n      };\n      var rowRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      // eslint-disable-line max-len\n      var columnsRange = typeof colRange === 'number' ? {\n        from: colRange,\n        to: colRange\n      } : colRange;\n      var rowsRange = typeof rowRange === 'number' ? {\n        from: rowRange,\n        to: rowRange\n      } : rowRange;\n      rangeEach(columnsRange.from, columnsRange.to, function (visualColumn) {\n        var physicalColumn = _this4.hot.toPhysicalColumn(visualColumn);\n        if (physicalColumn === null) {\n          physicalColumn = visualColumn;\n        }\n        if (force || _this4.columnWidthsMap.getValueAtIndex(physicalColumn) === null && !_this4.hot._getColWidthFromSettings(physicalColumn)) {\n          var samples = _this4.samplesGenerator.generateColumnSamples(visualColumn, rowsRange);\n          arrayEach(samples, function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n              column = _ref2[0],\n              sample = _ref2[1];\n            return _this4.ghostTable.addColumn(column, sample);\n          });\n        }\n      });\n      if (this.ghostTable.columns.length) {\n        this.hot.batchExecution(function () {\n          _this4.ghostTable.getWidths(function (visualColumn, width) {\n            var physicalColumn = _this4.hot.toPhysicalColumn(visualColumn);\n            _this4.columnWidthsMap.setValueAtIndex(physicalColumn, width);\n          });\n        }, true);\n        this.measuredColumns = columnsRange.to + 1;\n        this.ghostTable.clean();\n      }\n    }\n    /**\n     * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.\n     * To retrieve width for specified column use {@link AutoColumnSize#getColumnWidth} method.\n     *\n     * @param {object|number} rowRange Row index or an object with `from` and `to` properties which define row range.\n     */\n  }, {\n    key: \"calculateAllColumnsWidth\",\n    value: function calculateAllColumnsWidth() {\n      var _this5 = this;\n      var rowRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var current = 0;\n      var length = this.hot.countCols() - 1;\n      var timer = null;\n      this.inProgress = true;\n      var loop = function loop() {\n        // When hot was destroyed after calculating finished cancel frame\n        if (!_this5.hot) {\n          cancelAnimationFrame(timer);\n          _this5.inProgress = false;\n          return;\n        }\n        _this5.calculateColumnsWidth({\n          from: current,\n          to: Math.min(current + AutoColumnSize.CALCULATION_STEP, length)\n        }, rowRange);\n        current = current + AutoColumnSize.CALCULATION_STEP + 1;\n        if (current < length) {\n          timer = requestAnimationFrame(loop);\n        } else {\n          cancelAnimationFrame(timer);\n          _this5.inProgress = false; // @TODO Should call once per render cycle, currently fired separately in different plugins\n\n          _this5.hot.view.adjustElementsSize();\n        }\n      };\n      var syncLimit = this.getSyncCalculationLimit(); // sync\n\n      if (this.firstCalculation && syncLimit >= 0) {\n        this.calculateColumnsWidth({\n          from: 0,\n          to: syncLimit\n        }, rowRange);\n        this.firstCalculation = false;\n        current = syncLimit + 1;\n      } // async\n\n      if (current < length) {\n        loop();\n      } else {\n        this.inProgress = false;\n      }\n    }\n    /**\n     * Sets the sampling options.\n     *\n     * @private\n     */\n  }, {\n    key: \"setSamplingOptions\",\n    value: function setSamplingOptions() {\n      var setting = this.hot.getSettings()[PLUGIN_KEY];\n      var samplingRatio = setting && hasOwnProperty(setting, 'samplingRatio') ? setting.samplingRatio : void 0;\n      var allowSampleDuplicates = setting && hasOwnProperty(setting, 'allowSampleDuplicates') ? setting.allowSampleDuplicates : void 0;\n      if (samplingRatio && !isNaN(samplingRatio)) {\n        this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));\n      }\n      if (allowSampleDuplicates) {\n        this.samplesGenerator.setAllowDuplicates(allowSampleDuplicates);\n      }\n    }\n    /**\n     * Recalculates all columns width (overwrite cache values).\n     */\n  }, {\n    key: \"recalculateAllColumnsWidth\",\n    value: function recalculateAllColumnsWidth() {\n      if (this.hot.view && this.hot.view.wt.wtTable.isVisible()) {\n        this.clearCache();\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated\n     * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"getSyncCalculationLimit\",\n    value: function getSyncCalculationLimit() {\n      var settings = this.hot.getSettings()[PLUGIN_KEY];\n      /* eslint-disable no-bitwise */\n\n      var limit = AutoColumnSize.SYNC_CALCULATION_LIMIT;\n      var colsLimit = this.hot.countCols() - 1;\n      if (isObject(settings)) {\n        limit = settings.syncLimit;\n        if (isPercentValue(limit)) {\n          limit = valueAccordingPercent(colsLimit, limit);\n        } else {\n          // Force to Number\n          limit >>= 0;\n        }\n      }\n      return Math.min(limit, colsLimit);\n    }\n    /**\n     * Gets the calculated column width.\n     *\n     * @param {number} column Visual column index.\n     * @param {number} [defaultWidth] Default column width. It will be picked up if no calculated width found.\n     * @param {boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).\n     * @returns {number}\n     */\n  }, {\n    key: \"getColumnWidth\",\n    value: function getColumnWidth(column) {\n      var defaultWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n      var keepMinimum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var width = defaultWidth;\n      if (width === void 0) {\n        width = this.columnWidthsMap.getValueAtIndex(this.hot.toPhysicalColumn(column));\n        if (keepMinimum && typeof width === 'number') {\n          width = Math.max(width, ViewportColumnsCalculator.DEFAULT_WIDTH);\n        }\n      }\n      return width;\n    }\n    /**\n     * Gets the first visible column.\n     *\n     * @returns {number} Returns visual column index, -1 if table is not rendered or if there are no columns to base the the calculations on.\n     */\n  }, {\n    key: \"getFirstVisibleColumn\",\n    value: function getFirstVisibleColumn() {\n      var wot = this.hot.view.wt;\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        // Fist fully visible column is stored as renderable index.\n        var firstFullyVisibleColumn = wot.wtTable.getFirstVisibleColumn();\n        if (firstFullyVisibleColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(firstFullyVisibleColumn);\n        }\n      }\n      if (wot.wtViewport.columnsRenderCalculator) {\n        var firstRenderedColumn = wot.wtTable.getFirstRenderedColumn(); // There are no rendered column.\n\n        if (firstRenderedColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(firstRenderedColumn);\n        }\n      }\n      return -1;\n    }\n    /**\n     * Gets the last visible column.\n     *\n     * @returns {number} Returns visual column index or -1 if table is not rendered.\n     */\n  }, {\n    key: \"getLastVisibleColumn\",\n    value: function getLastVisibleColumn() {\n      var wot = this.hot.view.wt;\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        // Last fully visible column is stored as renderable index.\n        var lastFullyVisibleColumn = wot.wtTable.getLastVisibleColumn();\n        if (lastFullyVisibleColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(lastFullyVisibleColumn);\n        }\n      }\n      if (wot.wtViewport.columnsRenderCalculator) {\n        // Last fully visible column is stored as renderable index.\n        var lastRenderedColumn = wot.wtTable.getLastRenderedColumn(); // There are no rendered columns.\n\n        if (lastRenderedColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(lastRenderedColumn);\n        }\n      }\n      return -1;\n    }\n    /**\n     * Collects all columns which titles has been changed in comparison to the previous state.\n     *\n     * @private\n     * @returns {Array} It returns an array of physical column indexes.\n     */\n  }, {\n    key: \"findColumnsWhereHeaderWasChanged\",\n    value: function findColumnsWhereHeaderWasChanged() {\n      var columnHeaders = this.hot.getColHeader();\n      var _privatePool$get = privatePool.get(this),\n        cachedColumnHeaders = _privatePool$get.cachedColumnHeaders;\n      var changedColumns = arrayReduce(columnHeaders, function (acc, columnTitle, physicalColumn) {\n        var cachedColumnsLength = cachedColumnHeaders.length;\n        if (cachedColumnsLength - 1 < physicalColumn || cachedColumnHeaders[physicalColumn] !== columnTitle) {\n          acc.push(physicalColumn);\n        }\n        if (cachedColumnsLength - 1 < physicalColumn) {\n          cachedColumnHeaders.push(columnTitle);\n        } else {\n          cachedColumnHeaders[physicalColumn] = columnTitle;\n        }\n        return acc;\n      }, []);\n      return changedColumns;\n    }\n    /**\n     * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.\n     * Otherwise whole cache will be cleared.\n     *\n     * @param {number[]} [columns] List of physical column indexes to clear.\n     */\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      var _this6 = this;\n      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      if (columns.length) {\n        this.hot.batchExecution(function () {\n          arrayEach(columns, function (physicalIndex) {\n            _this6.columnWidthsMap.setValueAtIndex(physicalIndex, null);\n          });\n        }, true);\n      } else {\n        this.columnWidthsMap.clear();\n      }\n    }\n    /**\n     * Checks if all widths were calculated. If not then return `true` (need recalculate).\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isNeedRecalculate\",\n    value: function isNeedRecalculate() {\n      return !!arrayFilter(this.columnWidthsMap.getValues().slice(0, this.measuredColumns), function (item) {\n        return item === null;\n      }).length;\n    }\n    /**\n     * On before view render listener.\n     *\n     * @private\n     */\n  }, {\n    key: \"onBeforeViewRender\",\n    value: function onBeforeViewRender() {\n      this.calculateVisibleColumnsWidth();\n      if (this.isNeedRecalculate() && !this.inProgress) {\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * On after load data listener.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData() {\n      var _this7 = this;\n      if (this.hot.view) {\n        this.recalculateAllColumnsWidth();\n      } else {\n        // first load - initialization\n        setTimeout(function () {\n          if (_this7.hot) {\n            _this7.recalculateAllColumnsWidth();\n          }\n        }, 0);\n      }\n    }\n    /**\n     * On before change listener.\n     *\n     * @private\n     * @param {Array} changes An array of modified data.\n     */\n  }, {\n    key: \"onBeforeChange\",\n    value: function onBeforeChange(changes) {\n      var _this8 = this;\n      var changedColumns = arrayMap(changes, function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          columnProperty = _ref4[1];\n        return _this8.hot.toPhysicalColumn(_this8.hot.propToCol(columnProperty));\n      });\n      this.clearCache(Array.from(new Set(changedColumns)));\n    }\n    /**\n     * On before column resize listener.\n     *\n     * @private\n     * @param {number} size Calculated new column width.\n     * @param {number} column Visual index of the resized column.\n     * @param {boolean} isDblClick  Flag that determines whether there was a double-click.\n     * @returns {number}\n     */\n  }, {\n    key: \"onBeforeColumnResize\",\n    value: function onBeforeColumnResize(size, column, isDblClick) {\n      var newSize = size;\n      if (isDblClick) {\n        this.calculateColumnsWidth(column, void 0, true);\n        newSize = this.getColumnWidth(column, void 0, false);\n      }\n      return newSize;\n    }\n    /**\n     * On after Handsontable init fill plugin with all necessary values.\n     *\n     * @private\n     */\n  }, {\n    key: \"onAfterInit\",\n    value: function onAfterInit() {\n      privatePool.get(this).cachedColumnHeaders = this.hot.getColHeader();\n    }\n    /**\n     * After formulas values updated listener.\n     *\n     * @private\n     * @param {Array} changes An array of modified data.\n     */\n  }, {\n    key: \"onAfterFormulasValuesUpdate\",\n    value: function onAfterFormulasValuesUpdate(changes) {\n      var filteredChanges = arrayFilter(changes, function (change) {\n        var _change$address;\n        return isDefined((_change$address = change.address) === null || _change$address === void 0 ? void 0 : _change$address.col);\n      });\n      var changedColumns = arrayMap(filteredChanges, function (change) {\n        return change.address.col;\n      });\n      this.clearCache(Array.from(new Set(changedColumns)));\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.ghostTable.clean();\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"destroy\", this).call(this);\n    }\n  }], [{\n    key: \"PLUGIN_KEY\",\n    get: function get() {\n      return PLUGIN_KEY;\n    }\n  }, {\n    key: \"PLUGIN_PRIORITY\",\n    get: function get() {\n      return PLUGIN_PRIORITY;\n    }\n  }, {\n    key: \"CALCULATION_STEP\",\n    get: function get() {\n      return 50;\n    }\n  }, {\n    key: \"SYNC_CALCULATION_LIMIT\",\n    get: function get() {\n      return 50;\n    }\n  }]);\n  return AutoColumnSize;\n}(BasePlugin);","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","len","length","arr2","_i","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","_get","Reflect","get","property","receiver","base","_superPropBase","desc","getOwnPropertyDescriptor","arguments","apply","object","hasOwnProperty","_getPrototypeOf","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","construct","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","BasePlugin","arrayEach","arrayFilter","arrayReduce","arrayMap","cancelAnimationFrame","requestAnimationFrame","GhostTable","Hooks","isObject","valueAccordingPercent","rangeEach","SamplesGenerator","isPercentValue","ViewportColumnsCalculator","PhysicalIndexToValueMap","IndexToValueMap","isDefined","getSingleton","register","PLUGIN_KEY","PLUGIN_PRIORITY","privatePool","WeakMap","COLUMN_SIZE_MAP_NAME","AutoColumnSize","_BasePlugin","_super","hotInstance","_this","set","cachedColumnHeaders","ghostTable","hot","samplesGenerator","row","column","cellMeta","getCellMeta","cellValue","spanned","getDataAtCell","bundleSeed","hasHook","runHooks","firstCalculation","inProgress","measuredColumns","columnWidthsMap","columnIndexMapper","registerMap","addHook","size","isDblClick","onBeforeColumnResize","isEnabled","getSettings","colWidths","enablePlugin","_this2","enabled","setting","useHeaders","setSetting","setSamplingOptions","onAfterLoadData","changes","onBeforeChange","onAfterFormulasValuesUpdate","force","onBeforeViewRender","width","col","getColumnWidth","onAfterInit","updatePlugin","changedColumns","findColumnsWhereHeaderWasChanged","clearCache","calculateVisibleColumnsWidth","disablePlugin","_this3","rowsCount","countRows","renderCall","firstVisibleColumn","getFirstVisibleColumn","lastVisibleColumn","getLastVisibleColumn","calculateColumnsWidth","to","_this4","colRange","undefined","countCols","rowRange","columnsRange","rowsRange","visualColumn","physicalColumn","toPhysicalColumn","getValueAtIndex","_getColWidthFromSettings","samples","generateColumnSamples","_ref","_ref2","sample","addColumn","columns","batchExecution","getWidths","setValueAtIndex","clean","calculateAllColumnsWidth","_this5","current","timer","loop","Math","min","CALCULATION_STEP","view","adjustElementsSize","syncLimit","getSyncCalculationLimit","samplingRatio","allowSampleDuplicates","isNaN","setSampleCount","parseInt","setAllowDuplicates","recalculateAllColumnsWidth","wt","wtTable","isVisible","settings","limit","SYNC_CALCULATION_LIMIT","colsLimit","defaultWidth","keepMinimum","max","DEFAULT_WIDTH","wot","wtViewport","columnsVisibleCalculator","firstFullyVisibleColumn","getVisualFromRenderableIndex","columnsRenderCalculator","firstRenderedColumn","getFirstRenderedColumn","lastFullyVisibleColumn","lastRenderedColumn","getLastRenderedColumn","columnHeaders","getColHeader","_privatePool$get","acc","columnTitle","cachedColumnsLength","_this6","physicalIndex","clear","isNeedRecalculate","getValues","item","_this7","setTimeout","_this8","_ref3","_ref4","columnProperty","propToCol","Set","newSize","filteredChanges","change","_change$address","address","destroy"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/plugins/autoColumnSize/autoColumnSize.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.object.set-prototype-of.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\nimport \"core-js/modules/es.reflect.get.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { arrayEach, arrayFilter, arrayReduce, arrayMap } from \"../../helpers/array.mjs\";\nimport { cancelAnimationFrame, requestAnimationFrame } from \"../../helpers/feature.mjs\";\nimport GhostTable from \"../../utils/ghostTable.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { isObject, hasOwnProperty } from \"../../helpers/object.mjs\";\nimport { valueAccordingPercent, rangeEach } from \"../../helpers/number.mjs\";\nimport SamplesGenerator from \"../../utils/samplesGenerator.mjs\";\nimport { isPercentValue } from \"../../helpers/string.mjs\";\nimport { ViewportColumnsCalculator } from \"../../3rdparty/walkontable/src/index.mjs\";\nimport { PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nHooks.getSingleton().register('modifyAutoColumnSizeSeed');\nexport var PLUGIN_KEY = 'autoColumnSize';\nexport var PLUGIN_PRIORITY = 10;\nvar privatePool = new WeakMap();\nvar COLUMN_SIZE_MAP_NAME = 'autoColumnSize';\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin AutoColumnSize\n * @class AutoColumnSize\n *\n * @description\n * This plugin allows to set column widths based on their widest cells.\n *\n * By default, the plugin is declared as `undefined`, which makes it enabled (same as if it was declared as `true`).\n * Enabling this plugin may decrease the overall table performance, as it needs to calculate the widths of all cells to\n * resize the columns accordingly.\n * If you experience problems with the performance, try turning this feature off and declaring the column widths manually.\n *\n * Column width calculations are divided into sync and async part. Each of this parts has their own advantages and\n * disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous\n * operations don't block the browser UI.\n *\n * To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value to a config object:\n *\n * ```js\n * // as a number (300 columns in sync, rest async)\n * autoColumnSize: {syncLimit: 300},.\n *\n * // as a string (percent)\n * autoColumnSize: {syncLimit: '40%'},\n * ```\n *\n * The plugin uses {@link GhostTable} and {@link SamplesGenerator} for calculations.\n * First, {@link SamplesGenerator} prepares samples of data with its coordinates.\n * Next {@link GhostTable} uses coordinates to get cells' renderers and append all to the DOM through DocumentFragment.\n *\n * Sampling accepts additional options:\n * - *samplingRatio* - Defines how many samples for the same length will be used to calculate. Default is `3`.\n *\n * ```js\n *   autoColumnSize: {\n *     samplingRatio: 10,\n *   }\n * ```\n *\n * - *allowSampleDuplicates* - Defines if duplicated values might be used in sampling. Default is `false`.\n *\n * ```js\n *   autoColumnSize: {\n *     allowSampleDuplicates: true,\n *   }\n * ```\n *\n * To configure this plugin see {@link Options#autoColumnSize}.\n *\n * @example\n *\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *   data: getData(),\n *   autoColumnSize: true\n * });\n * // Access to plugin instance:\n * const plugin = hot.getPlugin('autoColumnSize');\n *\n * plugin.getColumnWidth(4);\n *\n * if (plugin.isEnabled()) {\n *   // code...\n * }\n * ```\n */\n\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\nexport var AutoColumnSize = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(AutoColumnSize, _BasePlugin);\n\n  var _super = _createSuper(AutoColumnSize);\n\n  function AutoColumnSize(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, AutoColumnSize);\n\n    _this = _super.call(this, hotInstance);\n    privatePool.set(_assertThisInitialized(_this), {\n      /**\n       * Cached column header names. It is used to diff current column headers with previous state and detect which\n       * columns width should be updated.\n       *\n       * @private\n       * @type {Array}\n       */\n      cachedColumnHeaders: []\n    });\n    /**\n     * Instance of {@link GhostTable} for rows and columns size calculations.\n     *\n     * @private\n     * @type {GhostTable}\n     */\n\n    _this.ghostTable = new GhostTable(_this.hot);\n    /**\n     * Instance of {@link SamplesGenerator} for generating samples necessary for columns width calculations.\n     *\n     * @private\n     * @type {SamplesGenerator}\n     * @fires Hooks#modifyAutoColumnSizeSeed\n     */\n\n    _this.samplesGenerator = new SamplesGenerator(function (row, column) {\n      var cellMeta = _this.hot.getCellMeta(row, column);\n\n      var cellValue = '';\n\n      if (!cellMeta.spanned) {\n        cellValue = _this.hot.getDataAtCell(row, column);\n      }\n\n      var bundleSeed = '';\n\n      if (_this.hot.hasHook('modifyAutoColumnSizeSeed')) {\n        bundleSeed = _this.hot.runHooks('modifyAutoColumnSizeSeed', bundleSeed, cellMeta, cellValue);\n      }\n\n      return {\n        value: cellValue,\n        bundleSeed: bundleSeed\n      };\n    });\n    /**\n     * `true` only if the first calculation was performed.\n     *\n     * @private\n     * @type {boolean}\n     */\n\n    _this.firstCalculation = true;\n    /**\n     * `true` if the size calculation is in progress.\n     *\n     * @type {boolean}\n     */\n\n    _this.inProgress = false;\n    /**\n     * Number of already measured columns (we already know their sizes).\n     *\n     * @type {number}\n     */\n\n    _this.measuredColumns = 0;\n    /**\n     * PhysicalIndexToValueMap to keep and track widths for physical column indexes.\n     *\n     * @private\n     * @type {PhysicalIndexToValueMap}\n     */\n\n    _this.columnWidthsMap = new IndexToValueMap();\n\n    _this.hot.columnIndexMapper.registerMap(COLUMN_SIZE_MAP_NAME, _this.columnWidthsMap); // Leave the listener active to allow auto-sizing the columns when the plugin is disabled.\n    // This is necesseary for width recalculation for resize handler doubleclick (ManualColumnResize).\n\n\n    _this.addHook('beforeColumnResize', function (size, column, isDblClick) {\n      return _this.onBeforeColumnResize(size, column, isDblClick);\n    });\n\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link #enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n\n\n  _createClass(AutoColumnSize, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return this.hot.getSettings()[PLUGIN_KEY] !== false && !this.hot.getSettings().colWidths;\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      var setting = this.hot.getSettings()[PLUGIN_KEY];\n\n      if (setting && setting.useHeaders !== null && setting.useHeaders !== void 0) {\n        this.ghostTable.setSetting('useHeaders', setting.useHeaders);\n      }\n\n      this.setSamplingOptions();\n      this.addHook('afterLoadData', function () {\n        return _this2.onAfterLoadData.apply(_this2, arguments);\n      });\n      this.addHook('beforeChange', function (changes) {\n        return _this2.onBeforeChange(changes);\n      });\n      this.addHook('afterFormulasValuesUpdate', function (changes) {\n        return _this2.onAfterFormulasValuesUpdate(changes);\n      });\n      this.addHook('beforeViewRender', function (force) {\n        return _this2.onBeforeViewRender(force);\n      });\n      this.addHook('modifyColWidth', function (width, col) {\n        return _this2.getColumnWidth(col, width);\n      });\n      this.addHook('afterInit', function () {\n        return _this2.onAfterInit();\n      });\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Updates the plugin state. This method is executed when {@link Core#updateSettings} is invoked.\n     */\n\n  }, {\n    key: \"updatePlugin\",\n    value: function updatePlugin() {\n      var changedColumns = this.findColumnsWhereHeaderWasChanged();\n\n      if (changedColumns.length) {\n        this.clearCache(changedColumns);\n        this.calculateVisibleColumnsWidth();\n      }\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"updatePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      var _this3 = this;\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"disablePlugin\", this).call(this); // Leave the listener active to allow auto-sizing the columns when the plugin is disabled.\n      // This is necesseary for width recalculation for resize handler doubleclick (ManualColumnResize).\n\n\n      this.addHook('beforeColumnResize', function (size, column, isDblClick) {\n        return _this3.onBeforeColumnResize(size, column, isDblClick);\n      });\n    }\n    /**\n     * Calculates visible columns width.\n     */\n\n  }, {\n    key: \"calculateVisibleColumnsWidth\",\n    value: function calculateVisibleColumnsWidth() {\n      var rowsCount = this.hot.countRows(); // Keep last column widths unchanged for situation when all rows was deleted or trimmed (pro #6)\n\n      if (!rowsCount) {\n        return;\n      }\n\n      var force = this.hot.renderCall;\n      var firstVisibleColumn = this.getFirstVisibleColumn();\n      var lastVisibleColumn = this.getLastVisibleColumn();\n\n      if (firstVisibleColumn === -1 || lastVisibleColumn === -1) {\n        return;\n      }\n\n      this.calculateColumnsWidth({\n        from: firstVisibleColumn,\n        to: lastVisibleColumn\n      }, void 0, force);\n    }\n    /**\n     * Calculates a columns width.\n     *\n     * @param {number|object} colRange Visual column index or an object with `from` and `to` visual indexes as a range.\n     * @param {number|object} rowRange Visual row index or an object with `from` and `to` visual indexes as a range.\n     * @param {boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.\n     */\n\n  }, {\n    key: \"calculateColumnsWidth\",\n    value: function calculateColumnsWidth() {\n      var _this4 = this;\n\n      var colRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countCols() - 1\n      };\n      var rowRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      // eslint-disable-line max-len\n      var columnsRange = typeof colRange === 'number' ? {\n        from: colRange,\n        to: colRange\n      } : colRange;\n      var rowsRange = typeof rowRange === 'number' ? {\n        from: rowRange,\n        to: rowRange\n      } : rowRange;\n      rangeEach(columnsRange.from, columnsRange.to, function (visualColumn) {\n        var physicalColumn = _this4.hot.toPhysicalColumn(visualColumn);\n\n        if (physicalColumn === null) {\n          physicalColumn = visualColumn;\n        }\n\n        if (force || _this4.columnWidthsMap.getValueAtIndex(physicalColumn) === null && !_this4.hot._getColWidthFromSettings(physicalColumn)) {\n          var samples = _this4.samplesGenerator.generateColumnSamples(visualColumn, rowsRange);\n\n          arrayEach(samples, function (_ref) {\n            var _ref2 = _slicedToArray(_ref, 2),\n                column = _ref2[0],\n                sample = _ref2[1];\n\n            return _this4.ghostTable.addColumn(column, sample);\n          });\n        }\n      });\n\n      if (this.ghostTable.columns.length) {\n        this.hot.batchExecution(function () {\n          _this4.ghostTable.getWidths(function (visualColumn, width) {\n            var physicalColumn = _this4.hot.toPhysicalColumn(visualColumn);\n\n            _this4.columnWidthsMap.setValueAtIndex(physicalColumn, width);\n          });\n        }, true);\n        this.measuredColumns = columnsRange.to + 1;\n        this.ghostTable.clean();\n      }\n    }\n    /**\n     * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.\n     * To retrieve width for specified column use {@link AutoColumnSize#getColumnWidth} method.\n     *\n     * @param {object|number} rowRange Row index or an object with `from` and `to` properties which define row range.\n     */\n\n  }, {\n    key: \"calculateAllColumnsWidth\",\n    value: function calculateAllColumnsWidth() {\n      var _this5 = this;\n\n      var rowRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n        from: 0,\n        to: this.hot.countRows() - 1\n      };\n      var current = 0;\n      var length = this.hot.countCols() - 1;\n      var timer = null;\n      this.inProgress = true;\n\n      var loop = function loop() {\n        // When hot was destroyed after calculating finished cancel frame\n        if (!_this5.hot) {\n          cancelAnimationFrame(timer);\n          _this5.inProgress = false;\n          return;\n        }\n\n        _this5.calculateColumnsWidth({\n          from: current,\n          to: Math.min(current + AutoColumnSize.CALCULATION_STEP, length)\n        }, rowRange);\n\n        current = current + AutoColumnSize.CALCULATION_STEP + 1;\n\n        if (current < length) {\n          timer = requestAnimationFrame(loop);\n        } else {\n          cancelAnimationFrame(timer);\n          _this5.inProgress = false; // @TODO Should call once per render cycle, currently fired separately in different plugins\n\n          _this5.hot.view.adjustElementsSize();\n        }\n      };\n\n      var syncLimit = this.getSyncCalculationLimit(); // sync\n\n      if (this.firstCalculation && syncLimit >= 0) {\n        this.calculateColumnsWidth({\n          from: 0,\n          to: syncLimit\n        }, rowRange);\n        this.firstCalculation = false;\n        current = syncLimit + 1;\n      } // async\n\n\n      if (current < length) {\n        loop();\n      } else {\n        this.inProgress = false;\n      }\n    }\n    /**\n     * Sets the sampling options.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"setSamplingOptions\",\n    value: function setSamplingOptions() {\n      var setting = this.hot.getSettings()[PLUGIN_KEY];\n      var samplingRatio = setting && hasOwnProperty(setting, 'samplingRatio') ? setting.samplingRatio : void 0;\n      var allowSampleDuplicates = setting && hasOwnProperty(setting, 'allowSampleDuplicates') ? setting.allowSampleDuplicates : void 0;\n\n      if (samplingRatio && !isNaN(samplingRatio)) {\n        this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));\n      }\n\n      if (allowSampleDuplicates) {\n        this.samplesGenerator.setAllowDuplicates(allowSampleDuplicates);\n      }\n    }\n    /**\n     * Recalculates all columns width (overwrite cache values).\n     */\n\n  }, {\n    key: \"recalculateAllColumnsWidth\",\n    value: function recalculateAllColumnsWidth() {\n      if (this.hot.view && this.hot.view.wt.wtTable.isVisible()) {\n        this.clearCache();\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated\n     * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getSyncCalculationLimit\",\n    value: function getSyncCalculationLimit() {\n      var settings = this.hot.getSettings()[PLUGIN_KEY];\n      /* eslint-disable no-bitwise */\n\n      var limit = AutoColumnSize.SYNC_CALCULATION_LIMIT;\n      var colsLimit = this.hot.countCols() - 1;\n\n      if (isObject(settings)) {\n        limit = settings.syncLimit;\n\n        if (isPercentValue(limit)) {\n          limit = valueAccordingPercent(colsLimit, limit);\n        } else {\n          // Force to Number\n          limit >>= 0;\n        }\n      }\n\n      return Math.min(limit, colsLimit);\n    }\n    /**\n     * Gets the calculated column width.\n     *\n     * @param {number} column Visual column index.\n     * @param {number} [defaultWidth] Default column width. It will be picked up if no calculated width found.\n     * @param {boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getColumnWidth\",\n    value: function getColumnWidth(column) {\n      var defaultWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n      var keepMinimum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var width = defaultWidth;\n\n      if (width === void 0) {\n        width = this.columnWidthsMap.getValueAtIndex(this.hot.toPhysicalColumn(column));\n\n        if (keepMinimum && typeof width === 'number') {\n          width = Math.max(width, ViewportColumnsCalculator.DEFAULT_WIDTH);\n        }\n      }\n\n      return width;\n    }\n    /**\n     * Gets the first visible column.\n     *\n     * @returns {number} Returns visual column index, -1 if table is not rendered or if there are no columns to base the the calculations on.\n     */\n\n  }, {\n    key: \"getFirstVisibleColumn\",\n    value: function getFirstVisibleColumn() {\n      var wot = this.hot.view.wt;\n\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        // Fist fully visible column is stored as renderable index.\n        var firstFullyVisibleColumn = wot.wtTable.getFirstVisibleColumn();\n\n        if (firstFullyVisibleColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(firstFullyVisibleColumn);\n        }\n      }\n\n      if (wot.wtViewport.columnsRenderCalculator) {\n        var firstRenderedColumn = wot.wtTable.getFirstRenderedColumn(); // There are no rendered column.\n\n        if (firstRenderedColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(firstRenderedColumn);\n        }\n      }\n\n      return -1;\n    }\n    /**\n     * Gets the last visible column.\n     *\n     * @returns {number} Returns visual column index or -1 if table is not rendered.\n     */\n\n  }, {\n    key: \"getLastVisibleColumn\",\n    value: function getLastVisibleColumn() {\n      var wot = this.hot.view.wt;\n\n      if (wot.wtViewport.columnsVisibleCalculator) {\n        // Last fully visible column is stored as renderable index.\n        var lastFullyVisibleColumn = wot.wtTable.getLastVisibleColumn();\n\n        if (lastFullyVisibleColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(lastFullyVisibleColumn);\n        }\n      }\n\n      if (wot.wtViewport.columnsRenderCalculator) {\n        // Last fully visible column is stored as renderable index.\n        var lastRenderedColumn = wot.wtTable.getLastRenderedColumn(); // There are no rendered columns.\n\n        if (lastRenderedColumn !== -1) {\n          return this.hot.columnIndexMapper.getVisualFromRenderableIndex(lastRenderedColumn);\n        }\n      }\n\n      return -1;\n    }\n    /**\n     * Collects all columns which titles has been changed in comparison to the previous state.\n     *\n     * @private\n     * @returns {Array} It returns an array of physical column indexes.\n     */\n\n  }, {\n    key: \"findColumnsWhereHeaderWasChanged\",\n    value: function findColumnsWhereHeaderWasChanged() {\n      var columnHeaders = this.hot.getColHeader();\n\n      var _privatePool$get = privatePool.get(this),\n          cachedColumnHeaders = _privatePool$get.cachedColumnHeaders;\n\n      var changedColumns = arrayReduce(columnHeaders, function (acc, columnTitle, physicalColumn) {\n        var cachedColumnsLength = cachedColumnHeaders.length;\n\n        if (cachedColumnsLength - 1 < physicalColumn || cachedColumnHeaders[physicalColumn] !== columnTitle) {\n          acc.push(physicalColumn);\n        }\n\n        if (cachedColumnsLength - 1 < physicalColumn) {\n          cachedColumnHeaders.push(columnTitle);\n        } else {\n          cachedColumnHeaders[physicalColumn] = columnTitle;\n        }\n\n        return acc;\n      }, []);\n      return changedColumns;\n    }\n    /**\n     * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.\n     * Otherwise whole cache will be cleared.\n     *\n     * @param {number[]} [columns] List of physical column indexes to clear.\n     */\n\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      var _this6 = this;\n\n      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (columns.length) {\n        this.hot.batchExecution(function () {\n          arrayEach(columns, function (physicalIndex) {\n            _this6.columnWidthsMap.setValueAtIndex(physicalIndex, null);\n          });\n        }, true);\n      } else {\n        this.columnWidthsMap.clear();\n      }\n    }\n    /**\n     * Checks if all widths were calculated. If not then return `true` (need recalculate).\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isNeedRecalculate\",\n    value: function isNeedRecalculate() {\n      return !!arrayFilter(this.columnWidthsMap.getValues().slice(0, this.measuredColumns), function (item) {\n        return item === null;\n      }).length;\n    }\n    /**\n     * On before view render listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onBeforeViewRender\",\n    value: function onBeforeViewRender() {\n      this.calculateVisibleColumnsWidth();\n\n      if (this.isNeedRecalculate() && !this.inProgress) {\n        this.calculateAllColumnsWidth();\n      }\n    }\n    /**\n     * On after load data listener.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData() {\n      var _this7 = this;\n\n      if (this.hot.view) {\n        this.recalculateAllColumnsWidth();\n      } else {\n        // first load - initialization\n        setTimeout(function () {\n          if (_this7.hot) {\n            _this7.recalculateAllColumnsWidth();\n          }\n        }, 0);\n      }\n    }\n    /**\n     * On before change listener.\n     *\n     * @private\n     * @param {Array} changes An array of modified data.\n     */\n\n  }, {\n    key: \"onBeforeChange\",\n    value: function onBeforeChange(changes) {\n      var _this8 = this;\n\n      var changedColumns = arrayMap(changes, function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            columnProperty = _ref4[1];\n\n        return _this8.hot.toPhysicalColumn(_this8.hot.propToCol(columnProperty));\n      });\n      this.clearCache(Array.from(new Set(changedColumns)));\n    }\n    /**\n     * On before column resize listener.\n     *\n     * @private\n     * @param {number} size Calculated new column width.\n     * @param {number} column Visual index of the resized column.\n     * @param {boolean} isDblClick  Flag that determines whether there was a double-click.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"onBeforeColumnResize\",\n    value: function onBeforeColumnResize(size, column, isDblClick) {\n      var newSize = size;\n\n      if (isDblClick) {\n        this.calculateColumnsWidth(column, void 0, true);\n        newSize = this.getColumnWidth(column, void 0, false);\n      }\n\n      return newSize;\n    }\n    /**\n     * On after Handsontable init fill plugin with all necessary values.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onAfterInit\",\n    value: function onAfterInit() {\n      privatePool.get(this).cachedColumnHeaders = this.hot.getColHeader();\n    }\n    /**\n     * After formulas values updated listener.\n     *\n     * @private\n     * @param {Array} changes An array of modified data.\n     */\n\n  }, {\n    key: \"onAfterFormulasValuesUpdate\",\n    value: function onAfterFormulasValuesUpdate(changes) {\n      var filteredChanges = arrayFilter(changes, function (change) {\n        var _change$address;\n\n        return isDefined((_change$address = change.address) === null || _change$address === void 0 ? void 0 : _change$address.col);\n      });\n      var changedColumns = arrayMap(filteredChanges, function (change) {\n        return change.address.col;\n      });\n      this.clearCache(Array.from(new Set(changedColumns)));\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.ghostTable.clean();\n\n      _get(_getPrototypeOf(AutoColumnSize.prototype), \"destroy\", this).call(this);\n    }\n  }], [{\n    key: \"PLUGIN_KEY\",\n    get: function get() {\n      return PLUGIN_KEY;\n    }\n  }, {\n    key: \"PLUGIN_PRIORITY\",\n    get: function get() {\n      return PLUGIN_PRIORITY;\n    }\n  }, {\n    key: \"CALCULATION_STEP\",\n    get: function get() {\n      return 50;\n    }\n  }, {\n    key: \"SYNC_CALCULATION_LIMIT\",\n    get: function get() {\n      return 50;\n    }\n  }]);\n\n  return AutoColumnSize;\n}(BasePlugin);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
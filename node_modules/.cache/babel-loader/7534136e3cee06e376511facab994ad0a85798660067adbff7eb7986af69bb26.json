{"ast":null,"code":"import { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport { empty, fastInnerText } from \"../../helpers/dom/element.mjs\";\nimport { stringify } from \"../../helpers/mixed.mjs\";\nexport var RENDERER_TYPE = 'text';\n/**\n * Default text renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\n\nexport function textRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  var escaped = value;\n  if (!escaped && cellProperties.placeholder) {\n    escaped = cellProperties.placeholder;\n  }\n  escaped = stringify(escaped);\n  if (instance.getSettings().trimWhitespace) {\n    escaped = escaped.trim();\n  }\n  if (cellProperties.rendererTemplate) {\n    empty(TD);\n    var TEMPLATE = instance.rootDocument.createElement('TEMPLATE');\n    TEMPLATE.setAttribute('bind', '{{}}');\n    TEMPLATE.innerHTML = cellProperties.rendererTemplate;\n    HTMLTemplateElement.decorate(TEMPLATE);\n    TEMPLATE.model = instance.getSourceDataAtRow(row);\n    TD.appendChild(TEMPLATE);\n  } else {\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n    fastInnerText(TD, escaped);\n  }\n}\ntextRenderer.RENDERER_TYPE = RENDERER_TYPE;","map":{"version":3,"names":["baseRenderer","empty","fastInnerText","stringify","RENDERER_TYPE","textRenderer","instance","TD","row","col","prop","value","cellProperties","apply","escaped","placeholder","getSettings","trimWhitespace","trim","rendererTemplate","TEMPLATE","rootDocument","createElement","setAttribute","innerHTML","HTMLTemplateElement","decorate","model","getSourceDataAtRow","appendChild"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/renderers/textRenderer/textRenderer.mjs"],"sourcesContent":["import \"core-js/modules/es.string.trim.js\";\nimport { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport { empty, fastInnerText } from \"../../helpers/dom/element.mjs\";\nimport { stringify } from \"../../helpers/mixed.mjs\";\nexport var RENDERER_TYPE = 'text';\n/**\n * Default text renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\n\nexport function textRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  var escaped = value;\n\n  if (!escaped && cellProperties.placeholder) {\n    escaped = cellProperties.placeholder;\n  }\n\n  escaped = stringify(escaped);\n\n  if (instance.getSettings().trimWhitespace) {\n    escaped = escaped.trim();\n  }\n\n  if (cellProperties.rendererTemplate) {\n    empty(TD);\n    var TEMPLATE = instance.rootDocument.createElement('TEMPLATE');\n    TEMPLATE.setAttribute('bind', '{{}}');\n    TEMPLATE.innerHTML = cellProperties.rendererTemplate;\n    HTMLTemplateElement.decorate(TEMPLATE);\n    TEMPLATE.model = instance.getSourceDataAtRow(row);\n    TD.appendChild(TEMPLATE);\n  } else {\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n    fastInnerText(TD, escaped);\n  }\n}\ntextRenderer.RENDERER_TYPE = RENDERER_TYPE;"],"mappings":"AACA,SAASA,YAAY,QAAQ,2BAA2B;AACxD,SAASC,KAAK,EAAEC,aAAa,QAAQ,+BAA+B;AACpE,SAASC,SAAS,QAAQ,yBAAyB;AACnD,OAAO,IAAIC,aAAa,GAAG,MAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAYA,CAACC,QAAQ,EAAEC,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,cAAc,EAAE;EAChFZ,YAAY,CAACa,KAAK,CAAC,IAAI,EAAE,CAACP,QAAQ,EAAEC,EAAE,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,KAAK,EAAEC,cAAc,CAAC,CAAC;EAC/E,IAAIE,OAAO,GAAGH,KAAK;EAEnB,IAAI,CAACG,OAAO,IAAIF,cAAc,CAACG,WAAW,EAAE;IAC1CD,OAAO,GAAGF,cAAc,CAACG,WAAW;EACtC;EAEAD,OAAO,GAAGX,SAAS,CAACW,OAAO,CAAC;EAE5B,IAAIR,QAAQ,CAACU,WAAW,CAAC,CAAC,CAACC,cAAc,EAAE;IACzCH,OAAO,GAAGA,OAAO,CAACI,IAAI,CAAC,CAAC;EAC1B;EAEA,IAAIN,cAAc,CAACO,gBAAgB,EAAE;IACnClB,KAAK,CAACM,EAAE,CAAC;IACT,IAAIa,QAAQ,GAAGd,QAAQ,CAACe,YAAY,CAACC,aAAa,CAAC,UAAU,CAAC;IAC9DF,QAAQ,CAACG,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;IACrCH,QAAQ,CAACI,SAAS,GAAGZ,cAAc,CAACO,gBAAgB;IACpDM,mBAAmB,CAACC,QAAQ,CAACN,QAAQ,CAAC;IACtCA,QAAQ,CAACO,KAAK,GAAGrB,QAAQ,CAACsB,kBAAkB,CAACpB,GAAG,CAAC;IACjDD,EAAE,CAACsB,WAAW,CAACT,QAAQ,CAAC;EAC1B,CAAC,MAAM;IACL;IACAlB,aAAa,CAACK,EAAE,EAAEO,OAAO,CAAC;EAC5B;AACF;AACAT,YAAY,CAACD,aAAa,GAAGA,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
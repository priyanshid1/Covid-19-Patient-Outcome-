{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nimport staticRegister from \"../../../utils/staticRegister.mjs\";\nimport { isUndefined } from \"../../../helpers/mixed.mjs\";\nimport { warn } from \"../../../helpers/console.mjs\";\nimport { PLUGIN_KEY } from \"../formulas.mjs\";\nimport { DEFAULT_LICENSE_KEY, getEngineSettingsWithDefaultsAndOverrides } from \"./settings.mjs\";\n/**\n * Prepares and returns the collection for the engine relationship with the HoT instances.\n *\n * @returns {Map}\n */\n\nfunction getEngineRelationshipRegistry() {\n  var registryKey = 'engine_relationship';\n  var pluginStaticRegistry = staticRegister(PLUGIN_KEY);\n  if (!pluginStaticRegistry.hasItem(registryKey)) {\n    pluginStaticRegistry.register(registryKey, new Map());\n  }\n  return pluginStaticRegistry.getItem(registryKey);\n}\n/**\n * Prepares and returns the collection for the engine shared usage.\n *\n * @returns {Map}\n */\n\nfunction getSharedEngineUsageRegistry() {\n  var registryKey = 'shared_engine_usage';\n  var pluginStaticRegistry = staticRegister(PLUGIN_KEY);\n  if (!pluginStaticRegistry.hasItem(registryKey)) {\n    pluginStaticRegistry.register(registryKey, new Map());\n  }\n  return pluginStaticRegistry.getItem(registryKey);\n}\n/**\n * Setups the engine instance. It either creates a new (possibly shared) engine instance, or attaches\n * the plugin to an already-existing instance.\n *\n * @param {Handsontable} hotInstance Handsontable instance.\n * @returns {null|object} Returns the engine instance if everything worked right and `null` otherwise.\n */\n\nexport function setupEngine(hotInstance) {\n  var hotSettings = hotInstance.getSettings();\n  var pluginSettings = hotSettings[PLUGIN_KEY];\n  var engineConfigItem = pluginSettings === null || pluginSettings === void 0 ? void 0 : pluginSettings.engine;\n  if (pluginSettings === true) {\n    return null;\n  }\n  if (isUndefined(engineConfigItem)) {\n    return null;\n  } // `engine.hyperformula` or `engine` is the engine class\n\n  if (typeof engineConfigItem.hyperformula === 'function' || typeof engineConfigItem === 'function') {\n    var _engineConfigItem$hyp;\n    return registerEngine((_engineConfigItem$hyp = engineConfigItem.hyperformula) !== null && _engineConfigItem$hyp !== void 0 ? _engineConfigItem$hyp : engineConfigItem, hotSettings, hotInstance); // `engine` is the engine instance\n  } else if (_typeof(engineConfigItem) === 'object' && isUndefined(engineConfigItem.hyperformula)) {\n    var engineRelationship = getEngineRelationshipRegistry();\n    var sharedEngineUsage = getSharedEngineUsageRegistry().get(engineConfigItem);\n    if (!engineRelationship.has(engineConfigItem)) {\n      engineRelationship.set(engineConfigItem, []);\n    }\n    engineRelationship.get(engineConfigItem).push(hotInstance);\n    if (sharedEngineUsage) {\n      sharedEngineUsage.push(hotInstance.guid);\n    }\n    if (!engineConfigItem.getConfig().licenseKey) {\n      engineConfigItem.updateConfig({\n        licenseKey: DEFAULT_LICENSE_KEY\n      });\n    }\n    return engineConfigItem;\n  }\n  return null;\n}\n/**\n * Registers the engine in the global register and attaches the needed event listeners.\n *\n * @param {Function} engineClass The engine class.\n * @param {object} hotSettings The Handsontable settings.\n * @param {Handsontable} hotInstance Handsontable instance.\n * @returns {object} Returns the engine instance.\n */\n\nexport function registerEngine(engineClass, hotSettings, hotInstance) {\n  var pluginSettings = hotSettings[PLUGIN_KEY];\n  var engineSettings = getEngineSettingsWithDefaultsAndOverrides(hotSettings);\n  var engineRegistry = getEngineRelationshipRegistry();\n  var sharedEngineRegistry = getSharedEngineUsageRegistry();\n  registerCustomFunctions(engineClass, pluginSettings.functions);\n  registerLanguage(engineClass, pluginSettings.language); // Create instance\n\n  var engineInstance = engineClass.buildEmpty(engineSettings); // Add it to global registry\n\n  engineRegistry.set(engineInstance, [hotInstance]);\n  sharedEngineRegistry.set(engineInstance, [hotInstance.guid]);\n  registerNamedExpressions(engineInstance, pluginSettings.namedExpressions); // Add hooks needed for cross-referencing sheets\n\n  engineInstance.on('sheetAdded', function () {\n    engineInstance.rebuildAndRecalculate();\n  });\n  engineInstance.on('sheetRemoved', function () {\n    engineInstance.rebuildAndRecalculate();\n  });\n  return engineInstance;\n}\n/**\n * Returns the list of the Handsontable instances linked to the specific engine instance.\n *\n * @param {object} engine The engine instance.\n * @returns {Map<number, Handsontable>} Returns Map with Handsontable instances.\n */\n\nexport function getRegisteredHotInstances(engine) {\n  var _engineRegistry$get;\n  var engineRegistry = getEngineRelationshipRegistry();\n  var hotInstances = engineRegistry.size === 0 ? [] : Array.from((_engineRegistry$get = engineRegistry.get(engine)) !== null && _engineRegistry$get !== void 0 ? _engineRegistry$get : []);\n  return new Map(hotInstances.map(function (hot) {\n    return [hot.getPlugin('formulas').sheetId, hot];\n  }));\n}\n/**\n * Removes the HOT instance from the global register's engine usage array, and if there are no HOT instances left,\n * unregisters the engine itself.\n *\n * @param {object} engine The engine instance.\n * @param {string} hotInstance The Handsontable instance.\n */\n\nexport function unregisterEngine(engine, hotInstance) {\n  if (engine) {\n    var engineRegistry = getEngineRelationshipRegistry();\n    var engineHotRelationship = engineRegistry.get(engine);\n    var sharedEngineRegistry = getSharedEngineUsageRegistry();\n    var sharedEngineUsage = sharedEngineRegistry.get(engine);\n    if (engineHotRelationship && engineHotRelationship.includes(hotInstance)) {\n      engineHotRelationship.splice(engineHotRelationship.indexOf(hotInstance), 1);\n      if (engineHotRelationship.length === 0) {\n        engineRegistry.delete(engine);\n      }\n    }\n    if (sharedEngineUsage && sharedEngineUsage.includes(hotInstance.guid)) {\n      sharedEngineUsage.splice(sharedEngineUsage.indexOf(hotInstance.guid), 1);\n      if (sharedEngineUsage.length === 0) {\n        sharedEngineRegistry.delete(engine);\n        engine.destroy();\n      }\n    }\n  }\n}\n/**\n * Registers the custom functions for the engine.\n *\n * @param {Function} engineClass The engine class.\n * @param {Array} customFunctions The custom functions array.\n */\n\nexport function registerCustomFunctions(engineClass, customFunctions) {\n  if (customFunctions) {\n    customFunctions.forEach(function (func) {\n      var name = func.name,\n        plugin = func.plugin,\n        translations = func.translations;\n      try {\n        engineClass.registerFunction(name, plugin, translations);\n      } catch (e) {\n        warn(e.message);\n      }\n    });\n  }\n}\n/**\n * Registers the provided language for the engine.\n *\n * @param {Function} engineClass The engine class.\n * @param {object} languageSetting The engine's language object.\n */\n\nexport function registerLanguage(engineClass, languageSetting) {\n  if (languageSetting) {\n    var langCode = languageSetting.langCode;\n    try {\n      engineClass.registerLanguage(langCode, languageSetting);\n    } catch (e) {\n      warn(e.message);\n    }\n  }\n}\n/**\n * Registers the provided named expressions in the engine instance.\n *\n * @param {object} engineInstance The engine instance.\n * @param {Array} namedExpressions Array of the named expressions to be registered.\n */\n\nexport function registerNamedExpressions(engineInstance, namedExpressions) {\n  if (namedExpressions) {\n    engineInstance.suspendEvaluation();\n    namedExpressions.forEach(function (namedExp) {\n      var name = namedExp.name,\n        expression = namedExp.expression,\n        scope = namedExp.scope,\n        options = namedExp.options;\n      try {\n        engineInstance.addNamedExpression(name, expression, scope, options);\n      } catch (e) {\n        warn(e.message);\n      }\n    });\n    engineInstance.resumeEvaluation();\n  }\n}\n/**\n * Sets up a new sheet.\n *\n * @param {object} engineInstance The engine instance.\n * @param {string} sheetName The new sheet name.\n * @returns {*}\n */\n\nexport function setupSheet(engineInstance, sheetName) {\n  if (isUndefined(sheetName) || !engineInstance.doesSheetExist(sheetName)) {\n    sheetName = engineInstance.addSheet(sheetName);\n  }\n  return sheetName;\n}","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","staticRegister","isUndefined","warn","PLUGIN_KEY","DEFAULT_LICENSE_KEY","getEngineSettingsWithDefaultsAndOverrides","getEngineRelationshipRegistry","registryKey","pluginStaticRegistry","hasItem","register","Map","getItem","getSharedEngineUsageRegistry","setupEngine","hotInstance","hotSettings","getSettings","pluginSettings","engineConfigItem","engine","hyperformula","_engineConfigItem$hyp","registerEngine","engineRelationship","sharedEngineUsage","get","has","set","push","guid","getConfig","licenseKey","updateConfig","engineClass","engineSettings","engineRegistry","sharedEngineRegistry","registerCustomFunctions","functions","registerLanguage","language","engineInstance","buildEmpty","registerNamedExpressions","namedExpressions","on","rebuildAndRecalculate","getRegisteredHotInstances","_engineRegistry$get","hotInstances","size","Array","from","map","hot","getPlugin","sheetId","unregisterEngine","engineHotRelationship","includes","splice","indexOf","length","delete","destroy","customFunctions","forEach","func","name","plugin","translations","registerFunction","e","message","languageSetting","langCode","suspendEvaluation","namedExp","expression","scope","options","addNamedExpression","resumeEvaluation","setupSheet","sheetName","doesSheetExist","addSheet"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/plugins/formulas/engine/register.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport staticRegister from \"../../../utils/staticRegister.mjs\";\nimport { isUndefined } from \"../../../helpers/mixed.mjs\";\nimport { warn } from \"../../../helpers/console.mjs\";\nimport { PLUGIN_KEY } from \"../formulas.mjs\";\nimport { DEFAULT_LICENSE_KEY, getEngineSettingsWithDefaultsAndOverrides } from \"./settings.mjs\";\n/**\n * Prepares and returns the collection for the engine relationship with the HoT instances.\n *\n * @returns {Map}\n */\n\nfunction getEngineRelationshipRegistry() {\n  var registryKey = 'engine_relationship';\n  var pluginStaticRegistry = staticRegister(PLUGIN_KEY);\n\n  if (!pluginStaticRegistry.hasItem(registryKey)) {\n    pluginStaticRegistry.register(registryKey, new Map());\n  }\n\n  return pluginStaticRegistry.getItem(registryKey);\n}\n/**\n * Prepares and returns the collection for the engine shared usage.\n *\n * @returns {Map}\n */\n\n\nfunction getSharedEngineUsageRegistry() {\n  var registryKey = 'shared_engine_usage';\n  var pluginStaticRegistry = staticRegister(PLUGIN_KEY);\n\n  if (!pluginStaticRegistry.hasItem(registryKey)) {\n    pluginStaticRegistry.register(registryKey, new Map());\n  }\n\n  return pluginStaticRegistry.getItem(registryKey);\n}\n/**\n * Setups the engine instance. It either creates a new (possibly shared) engine instance, or attaches\n * the plugin to an already-existing instance.\n *\n * @param {Handsontable} hotInstance Handsontable instance.\n * @returns {null|object} Returns the engine instance if everything worked right and `null` otherwise.\n */\n\n\nexport function setupEngine(hotInstance) {\n  var hotSettings = hotInstance.getSettings();\n  var pluginSettings = hotSettings[PLUGIN_KEY];\n  var engineConfigItem = pluginSettings === null || pluginSettings === void 0 ? void 0 : pluginSettings.engine;\n\n  if (pluginSettings === true) {\n    return null;\n  }\n\n  if (isUndefined(engineConfigItem)) {\n    return null;\n  } // `engine.hyperformula` or `engine` is the engine class\n\n\n  if (typeof engineConfigItem.hyperformula === 'function' || typeof engineConfigItem === 'function') {\n    var _engineConfigItem$hyp;\n\n    return registerEngine((_engineConfigItem$hyp = engineConfigItem.hyperformula) !== null && _engineConfigItem$hyp !== void 0 ? _engineConfigItem$hyp : engineConfigItem, hotSettings, hotInstance); // `engine` is the engine instance\n  } else if (_typeof(engineConfigItem) === 'object' && isUndefined(engineConfigItem.hyperformula)) {\n    var engineRelationship = getEngineRelationshipRegistry();\n    var sharedEngineUsage = getSharedEngineUsageRegistry().get(engineConfigItem);\n\n    if (!engineRelationship.has(engineConfigItem)) {\n      engineRelationship.set(engineConfigItem, []);\n    }\n\n    engineRelationship.get(engineConfigItem).push(hotInstance);\n\n    if (sharedEngineUsage) {\n      sharedEngineUsage.push(hotInstance.guid);\n    }\n\n    if (!engineConfigItem.getConfig().licenseKey) {\n      engineConfigItem.updateConfig({\n        licenseKey: DEFAULT_LICENSE_KEY\n      });\n    }\n\n    return engineConfigItem;\n  }\n\n  return null;\n}\n/**\n * Registers the engine in the global register and attaches the needed event listeners.\n *\n * @param {Function} engineClass The engine class.\n * @param {object} hotSettings The Handsontable settings.\n * @param {Handsontable} hotInstance Handsontable instance.\n * @returns {object} Returns the engine instance.\n */\n\nexport function registerEngine(engineClass, hotSettings, hotInstance) {\n  var pluginSettings = hotSettings[PLUGIN_KEY];\n  var engineSettings = getEngineSettingsWithDefaultsAndOverrides(hotSettings);\n  var engineRegistry = getEngineRelationshipRegistry();\n  var sharedEngineRegistry = getSharedEngineUsageRegistry();\n  registerCustomFunctions(engineClass, pluginSettings.functions);\n  registerLanguage(engineClass, pluginSettings.language); // Create instance\n\n  var engineInstance = engineClass.buildEmpty(engineSettings); // Add it to global registry\n\n  engineRegistry.set(engineInstance, [hotInstance]);\n  sharedEngineRegistry.set(engineInstance, [hotInstance.guid]);\n  registerNamedExpressions(engineInstance, pluginSettings.namedExpressions); // Add hooks needed for cross-referencing sheets\n\n  engineInstance.on('sheetAdded', function () {\n    engineInstance.rebuildAndRecalculate();\n  });\n  engineInstance.on('sheetRemoved', function () {\n    engineInstance.rebuildAndRecalculate();\n  });\n  return engineInstance;\n}\n/**\n * Returns the list of the Handsontable instances linked to the specific engine instance.\n *\n * @param {object} engine The engine instance.\n * @returns {Map<number, Handsontable>} Returns Map with Handsontable instances.\n */\n\nexport function getRegisteredHotInstances(engine) {\n  var _engineRegistry$get;\n\n  var engineRegistry = getEngineRelationshipRegistry();\n  var hotInstances = engineRegistry.size === 0 ? [] : Array.from((_engineRegistry$get = engineRegistry.get(engine)) !== null && _engineRegistry$get !== void 0 ? _engineRegistry$get : []);\n  return new Map(hotInstances.map(function (hot) {\n    return [hot.getPlugin('formulas').sheetId, hot];\n  }));\n}\n/**\n * Removes the HOT instance from the global register's engine usage array, and if there are no HOT instances left,\n * unregisters the engine itself.\n *\n * @param {object} engine The engine instance.\n * @param {string} hotInstance The Handsontable instance.\n */\n\nexport function unregisterEngine(engine, hotInstance) {\n  if (engine) {\n    var engineRegistry = getEngineRelationshipRegistry();\n    var engineHotRelationship = engineRegistry.get(engine);\n    var sharedEngineRegistry = getSharedEngineUsageRegistry();\n    var sharedEngineUsage = sharedEngineRegistry.get(engine);\n\n    if (engineHotRelationship && engineHotRelationship.includes(hotInstance)) {\n      engineHotRelationship.splice(engineHotRelationship.indexOf(hotInstance), 1);\n\n      if (engineHotRelationship.length === 0) {\n        engineRegistry.delete(engine);\n      }\n    }\n\n    if (sharedEngineUsage && sharedEngineUsage.includes(hotInstance.guid)) {\n      sharedEngineUsage.splice(sharedEngineUsage.indexOf(hotInstance.guid), 1);\n\n      if (sharedEngineUsage.length === 0) {\n        sharedEngineRegistry.delete(engine);\n        engine.destroy();\n      }\n    }\n  }\n}\n/**\n * Registers the custom functions for the engine.\n *\n * @param {Function} engineClass The engine class.\n * @param {Array} customFunctions The custom functions array.\n */\n\nexport function registerCustomFunctions(engineClass, customFunctions) {\n  if (customFunctions) {\n    customFunctions.forEach(function (func) {\n      var name = func.name,\n          plugin = func.plugin,\n          translations = func.translations;\n\n      try {\n        engineClass.registerFunction(name, plugin, translations);\n      } catch (e) {\n        warn(e.message);\n      }\n    });\n  }\n}\n/**\n * Registers the provided language for the engine.\n *\n * @param {Function} engineClass The engine class.\n * @param {object} languageSetting The engine's language object.\n */\n\nexport function registerLanguage(engineClass, languageSetting) {\n  if (languageSetting) {\n    var langCode = languageSetting.langCode;\n\n    try {\n      engineClass.registerLanguage(langCode, languageSetting);\n    } catch (e) {\n      warn(e.message);\n    }\n  }\n}\n/**\n * Registers the provided named expressions in the engine instance.\n *\n * @param {object} engineInstance The engine instance.\n * @param {Array} namedExpressions Array of the named expressions to be registered.\n */\n\nexport function registerNamedExpressions(engineInstance, namedExpressions) {\n  if (namedExpressions) {\n    engineInstance.suspendEvaluation();\n    namedExpressions.forEach(function (namedExp) {\n      var name = namedExp.name,\n          expression = namedExp.expression,\n          scope = namedExp.scope,\n          options = namedExp.options;\n\n      try {\n        engineInstance.addNamedExpression(name, expression, scope, options);\n      } catch (e) {\n        warn(e.message);\n      }\n    });\n    engineInstance.resumeEvaluation();\n  }\n}\n/**\n * Sets up a new sheet.\n *\n * @param {object} engineInstance The engine instance.\n * @param {string} sheetName The new sheet name.\n * @returns {*}\n */\n\nexport function setupSheet(engineInstance, sheetName) {\n  if (isUndefined(sheetName) || !engineInstance.doesSheetExist(sheetName)) {\n    sheetName = engineInstance.addSheet(sheetName);\n  }\n\n  return sheetName;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
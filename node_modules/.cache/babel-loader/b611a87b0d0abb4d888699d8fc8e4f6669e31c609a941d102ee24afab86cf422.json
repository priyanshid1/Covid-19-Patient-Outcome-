{"ast":null,"code":"import { createDefaultShortcutsList } from \"./defaultShortcutsList.mjs\";\nvar SHORTCUTS_CONTEXT = 'menu';\nvar SHORTCUTS_GROUP = SHORTCUTS_CONTEXT;\n\n/**\n * @typedef KeyboardShortcutsMenuController\n * @property {function(KeyboardShortcut[]): void} addCustomShortcuts Adds (by replacing) new keyboard shortcuts to the menu.\n * @property {function(string): number} getContext Gets the keyboard shortcuts context by name.\n * @property {function(string): void} listen Sets the active keyboard shortcuts context of the menu.\n */\n/**\n * Creates the controller object that allows extending the keyboard shortcuts of the menu.\n *\n * @param {Menu} menu The menu instance.\n * @param {Array<{ shortcuts: KeyboardShortcut, contextName: string }>} [customKeyboardShortcuts] The list of the custom keyboard shortcuts.\n * @returns {KeyboardShortcutsMenuController}\n */\nexport function createKeyboardShortcutsCtrl(menu) {\n  var customKeyboardShortcuts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var customShortcuts = [];\n  _addShortcuts(createDefaultShortcutsList(menu));\n  customKeyboardShortcuts.forEach(function (_ref) {\n    var shortcuts = _ref.shortcuts,\n      contextName = _ref.contextName;\n    addCustomShortcuts(shortcuts, contextName);\n  });\n\n  /**\n   * Adds keyboard shortcuts to the menu.\n   *\n   * @param {KeyboardShortcut[]} shortcuts Keyboard shortcuts to add.\n   * @param {string} [contextName] The context name to create or use.\n   */\n  function _addShortcuts(shortcuts, contextName) {\n    getContext(contextName).addShortcuts(shortcuts, {\n      group: SHORTCUTS_CONTEXT\n    });\n  }\n\n  /**\n   * Adds custom keyboard shortcuts to the menu.\n   *\n   * @param {KeyboardShortcut[]} shortcuts Keyboard shortcuts to add.\n   * @param {string} [contextName] The context name to create or use.\n   */\n  function addCustomShortcuts(shortcuts, contextName) {\n    var context = getContext(contextName);\n    shortcuts.forEach(function (_ref2) {\n      var keys = _ref2.keys;\n      keys.forEach(function (k) {\n        return context.removeShortcutsByKeys(k);\n      });\n    });\n    customShortcuts.push({\n      shortcuts: shortcuts,\n      contextName: contextName\n    });\n    _addShortcuts(shortcuts, contextName);\n  }\n\n  /**\n   * Gets all registered custom keyboard shortcuts.\n   *\n   * @returns {Array<{ shortcuts: KeyboardShortcut, contextName: string }>}\n   */\n  function getCustomShortcuts() {\n    return [].concat(customShortcuts);\n  }\n\n  /**\n   * Gets the context name.\n   *\n   * @param {string} contextName The context name.\n   * @returns {string}\n   */\n  function _getContextName(contextName) {\n    return contextName ? \"\".concat(SHORTCUTS_GROUP, \":\").concat(contextName) : SHORTCUTS_GROUP;\n  }\n\n  /**\n   * Gets the keyboard shortcut context by its name.\n   *\n   * @param {string} contextName The context name.\n   * @returns {object}\n   */\n  function getContext(contextName) {\n    var _manager$getContext;\n    var manager = menu.hotMenu.getShortcutManager();\n    var name = _getContextName(contextName);\n    return (_manager$getContext = manager.getContext(name)) !== null && _manager$getContext !== void 0 ? _manager$getContext : manager.addContext(name);\n  }\n\n  /**\n   * Makes the specified context active.\n   *\n   * @param {string} contextName The context name.\n   */\n  function listen(contextName) {\n    menu.hotMenu.getShortcutManager().setActiveContextName(_getContextName(contextName));\n  }\n  return {\n    addCustomShortcuts: addCustomShortcuts,\n    getCustomShortcuts: getCustomShortcuts,\n    getContext: getContext,\n    listen: listen\n  };\n}","map":{"version":3,"names":["createDefaultShortcutsList","SHORTCUTS_CONTEXT","SHORTCUTS_GROUP","createKeyboardShortcutsCtrl","menu","customKeyboardShortcuts","arguments","length","undefined","customShortcuts","_addShortcuts","forEach","_ref","shortcuts","contextName","addCustomShortcuts","getContext","addShortcuts","group","context","_ref2","keys","k","removeShortcutsByKeys","push","getCustomShortcuts","concat","_getContextName","_manager$getContext","manager","hotMenu","getShortcutManager","name","addContext","listen","setActiveContextName"],"sources":["/Users/priyadeliwala/node_modules/handsontable/plugins/contextMenu/menu/shortcuts.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\nimport { createDefaultShortcutsList } from \"./defaultShortcutsList.mjs\";\nconst SHORTCUTS_CONTEXT = 'menu';\nconst SHORTCUTS_GROUP = SHORTCUTS_CONTEXT;\n\n/**\n * @typedef KeyboardShortcutsMenuController\n * @property {function(KeyboardShortcut[]): void} addCustomShortcuts Adds (by replacing) new keyboard shortcuts to the menu.\n * @property {function(string): number} getContext Gets the keyboard shortcuts context by name.\n * @property {function(string): void} listen Sets the active keyboard shortcuts context of the menu.\n */\n/**\n * Creates the controller object that allows extending the keyboard shortcuts of the menu.\n *\n * @param {Menu} menu The menu instance.\n * @param {Array<{ shortcuts: KeyboardShortcut, contextName: string }>} [customKeyboardShortcuts] The list of the custom keyboard shortcuts.\n * @returns {KeyboardShortcutsMenuController}\n */\nexport function createKeyboardShortcutsCtrl(menu) {\n  let customKeyboardShortcuts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const customShortcuts = [];\n  _addShortcuts(createDefaultShortcutsList(menu));\n  customKeyboardShortcuts.forEach(_ref => {\n    let {\n      shortcuts,\n      contextName\n    } = _ref;\n    addCustomShortcuts(shortcuts, contextName);\n  });\n\n  /**\n   * Adds keyboard shortcuts to the menu.\n   *\n   * @param {KeyboardShortcut[]} shortcuts Keyboard shortcuts to add.\n   * @param {string} [contextName] The context name to create or use.\n   */\n  function _addShortcuts(shortcuts, contextName) {\n    getContext(contextName).addShortcuts(shortcuts, {\n      group: SHORTCUTS_CONTEXT\n    });\n  }\n\n  /**\n   * Adds custom keyboard shortcuts to the menu.\n   *\n   * @param {KeyboardShortcut[]} shortcuts Keyboard shortcuts to add.\n   * @param {string} [contextName] The context name to create or use.\n   */\n  function addCustomShortcuts(shortcuts, contextName) {\n    const context = getContext(contextName);\n    shortcuts.forEach(_ref2 => {\n      let {\n        keys\n      } = _ref2;\n      keys.forEach(k => context.removeShortcutsByKeys(k));\n    });\n    customShortcuts.push({\n      shortcuts,\n      contextName\n    });\n    _addShortcuts(shortcuts, contextName);\n  }\n\n  /**\n   * Gets all registered custom keyboard shortcuts.\n   *\n   * @returns {Array<{ shortcuts: KeyboardShortcut, contextName: string }>}\n   */\n  function getCustomShortcuts() {\n    return [...customShortcuts];\n  }\n\n  /**\n   * Gets the context name.\n   *\n   * @param {string} contextName The context name.\n   * @returns {string}\n   */\n  function _getContextName(contextName) {\n    return contextName ? `${SHORTCUTS_GROUP}:${contextName}` : SHORTCUTS_GROUP;\n  }\n\n  /**\n   * Gets the keyboard shortcut context by its name.\n   *\n   * @param {string} contextName The context name.\n   * @returns {object}\n   */\n  function getContext(contextName) {\n    var _manager$getContext;\n    const manager = menu.hotMenu.getShortcutManager();\n    const name = _getContextName(contextName);\n    return (_manager$getContext = manager.getContext(name)) !== null && _manager$getContext !== void 0 ? _manager$getContext : manager.addContext(name);\n  }\n\n  /**\n   * Makes the specified context active.\n   *\n   * @param {string} contextName The context name.\n   */\n  function listen(contextName) {\n    menu.hotMenu.getShortcutManager().setActiveContextName(_getContextName(contextName));\n  }\n  return {\n    addCustomShortcuts,\n    getCustomShortcuts,\n    getContext,\n    listen\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
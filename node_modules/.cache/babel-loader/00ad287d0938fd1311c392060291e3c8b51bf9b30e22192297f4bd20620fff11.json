{"ast":null,"code":"import { hasOwnProperty, isObject } from \"../../helpers/object.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\n/**\n * Create separated id for borders for each cell.\n *\n * @param {number} row Visual row index.\n * @param {number} col Visual column index.\n * @returns {string}\n */\n\nexport function createId(row, col) {\n  return \"border_row\".concat(row, \"col\").concat(col);\n}\n/**\n * Create default single border for each position (top/right/bottom/left).\n *\n * @returns {object} `{{width: number, color: string}}`.\n */\n\nexport function createDefaultCustomBorder() {\n  return {\n    width: 1,\n    color: '#000'\n  };\n}\n/**\n * Create default object for empty border.\n *\n * @returns {object} `{{hide: boolean}}`.\n */\n\nexport function createSingleEmptyBorder() {\n  return {\n    hide: true\n  };\n}\n/**\n * Create default Handsontable border object.\n *\n * @returns {object} `{{width: number, color: string, cornerVisible: boolean}}`.\n */\n\nexport function createDefaultHtBorder() {\n  return {\n    width: 1,\n    color: '#000',\n    cornerVisible: false\n  };\n}\n/**\n * Prepare empty border for each cell with all custom borders hidden.\n *\n * @param {number} row Visual row index.\n * @param {number} col Visual column index.\n * @returns {object} Returns border configuration containing visual indexes. Example of an object defining it:\n * `{{id: *, border: *, row: *, col: *, top: {hide: boolean}, right: {hide: boolean}, bottom: {hide: boolean}, left: {hide: boolean}}}`.\n */\n\nexport function createEmptyBorders(row, col) {\n  return {\n    id: createId(row, col),\n    border: createDefaultHtBorder(),\n    row: row,\n    col: col,\n    top: createSingleEmptyBorder(),\n    right: createSingleEmptyBorder(),\n    bottom: createSingleEmptyBorder(),\n    left: createSingleEmptyBorder()\n  };\n}\n/**\n * @param {object} defaultBorder The default border object.\n * @param {object} customBorder The border object with custom settings.\n * @returns {object}\n */\n\nexport function extendDefaultBorder(defaultBorder, customBorder) {\n  if (hasOwnProperty(customBorder, 'border')) {\n    defaultBorder.border = customBorder.border;\n  }\n  if (hasOwnProperty(customBorder, 'top')) {\n    if (customBorder.top) {\n      if (!isObject(customBorder.top)) {\n        customBorder.top = createDefaultCustomBorder();\n      }\n      defaultBorder.top = customBorder.top;\n    } else {\n      customBorder.top = createSingleEmptyBorder();\n      defaultBorder.top = customBorder.top;\n    }\n  }\n  if (hasOwnProperty(customBorder, 'right')) {\n    if (customBorder.right) {\n      if (!isObject(customBorder.right)) {\n        customBorder.right = createDefaultCustomBorder();\n      }\n      defaultBorder.right = customBorder.right;\n    } else {\n      customBorder.right = createSingleEmptyBorder();\n      defaultBorder.right = customBorder.right;\n    }\n  }\n  if (hasOwnProperty(customBorder, 'bottom')) {\n    if (customBorder.bottom) {\n      if (!isObject(customBorder.bottom)) {\n        customBorder.bottom = createDefaultCustomBorder();\n      }\n      defaultBorder.bottom = customBorder.bottom;\n    } else {\n      customBorder.bottom = createSingleEmptyBorder();\n      defaultBorder.bottom = customBorder.bottom;\n    }\n  }\n  if (hasOwnProperty(customBorder, 'left')) {\n    if (customBorder.left) {\n      if (!isObject(customBorder.left)) {\n        customBorder.left = createDefaultCustomBorder();\n      }\n      defaultBorder.left = customBorder.left;\n    } else {\n      customBorder.left = createSingleEmptyBorder();\n      defaultBorder.left = customBorder.left;\n    }\n  }\n  return defaultBorder;\n}\n/**\n * Check if selection has border.\n *\n * @param {Core} hot The Handsontable instance.\n * @param {string} [direction] If set ('left' or 'top') then only the specified border side will be checked.\n * @returns {boolean}\n */\n\nexport function checkSelectionBorders(hot, direction) {\n  var atLeastOneHasBorder = false;\n  arrayEach(hot.getSelectedRange(), function (range) {\n    range.forAll(function (r, c) {\n      if (r < 0 || c < 0) {\n        return;\n      }\n      var metaBorders = hot.getCellMeta(r, c).borders;\n      if (metaBorders) {\n        if (direction) {\n          if (!hasOwnProperty(metaBorders[direction], 'hide') || metaBorders[direction].hide === false) {\n            atLeastOneHasBorder = true;\n            return false; // breaks forAll\n          }\n        } else {\n          atLeastOneHasBorder = true;\n          return false; // breaks forAll\n        }\n      }\n    });\n  });\n  return atLeastOneHasBorder;\n}\n/**\n * Mark label in contextMenu as selected.\n *\n * @param {string} label The label text.\n * @returns {string}\n */\n\nexport function markSelected(label) {\n  return \"<span class=\\\"selected\\\">\".concat(String.fromCharCode(10003), \"</span>\").concat(label); // workaround for https://github.com/handsontable/handsontable/issues/1946\n}","map":{"version":3,"names":["hasOwnProperty","isObject","arrayEach","createId","row","col","concat","createDefaultCustomBorder","width","color","createSingleEmptyBorder","hide","createDefaultHtBorder","cornerVisible","createEmptyBorders","id","border","top","right","bottom","left","extendDefaultBorder","defaultBorder","customBorder","checkSelectionBorders","hot","direction","atLeastOneHasBorder","getSelectedRange","range","forAll","r","c","metaBorders","getCellMeta","borders","markSelected","label","String","fromCharCode"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/plugins/customBorders/utils.mjs"],"sourcesContent":["import \"core-js/modules/es.array.concat.js\";\nimport { hasOwnProperty, isObject } from \"../../helpers/object.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\n/**\n * Create separated id for borders for each cell.\n *\n * @param {number} row Visual row index.\n * @param {number} col Visual column index.\n * @returns {string}\n */\n\nexport function createId(row, col) {\n  return \"border_row\".concat(row, \"col\").concat(col);\n}\n/**\n * Create default single border for each position (top/right/bottom/left).\n *\n * @returns {object} `{{width: number, color: string}}`.\n */\n\nexport function createDefaultCustomBorder() {\n  return {\n    width: 1,\n    color: '#000'\n  };\n}\n/**\n * Create default object for empty border.\n *\n * @returns {object} `{{hide: boolean}}`.\n */\n\nexport function createSingleEmptyBorder() {\n  return {\n    hide: true\n  };\n}\n/**\n * Create default Handsontable border object.\n *\n * @returns {object} `{{width: number, color: string, cornerVisible: boolean}}`.\n */\n\nexport function createDefaultHtBorder() {\n  return {\n    width: 1,\n    color: '#000',\n    cornerVisible: false\n  };\n}\n/**\n * Prepare empty border for each cell with all custom borders hidden.\n *\n * @param {number} row Visual row index.\n * @param {number} col Visual column index.\n * @returns {object} Returns border configuration containing visual indexes. Example of an object defining it:\n * `{{id: *, border: *, row: *, col: *, top: {hide: boolean}, right: {hide: boolean}, bottom: {hide: boolean}, left: {hide: boolean}}}`.\n */\n\nexport function createEmptyBorders(row, col) {\n  return {\n    id: createId(row, col),\n    border: createDefaultHtBorder(),\n    row: row,\n    col: col,\n    top: createSingleEmptyBorder(),\n    right: createSingleEmptyBorder(),\n    bottom: createSingleEmptyBorder(),\n    left: createSingleEmptyBorder()\n  };\n}\n/**\n * @param {object} defaultBorder The default border object.\n * @param {object} customBorder The border object with custom settings.\n * @returns {object}\n */\n\nexport function extendDefaultBorder(defaultBorder, customBorder) {\n  if (hasOwnProperty(customBorder, 'border')) {\n    defaultBorder.border = customBorder.border;\n  }\n\n  if (hasOwnProperty(customBorder, 'top')) {\n    if (customBorder.top) {\n      if (!isObject(customBorder.top)) {\n        customBorder.top = createDefaultCustomBorder();\n      }\n\n      defaultBorder.top = customBorder.top;\n    } else {\n      customBorder.top = createSingleEmptyBorder();\n      defaultBorder.top = customBorder.top;\n    }\n  }\n\n  if (hasOwnProperty(customBorder, 'right')) {\n    if (customBorder.right) {\n      if (!isObject(customBorder.right)) {\n        customBorder.right = createDefaultCustomBorder();\n      }\n\n      defaultBorder.right = customBorder.right;\n    } else {\n      customBorder.right = createSingleEmptyBorder();\n      defaultBorder.right = customBorder.right;\n    }\n  }\n\n  if (hasOwnProperty(customBorder, 'bottom')) {\n    if (customBorder.bottom) {\n      if (!isObject(customBorder.bottom)) {\n        customBorder.bottom = createDefaultCustomBorder();\n      }\n\n      defaultBorder.bottom = customBorder.bottom;\n    } else {\n      customBorder.bottom = createSingleEmptyBorder();\n      defaultBorder.bottom = customBorder.bottom;\n    }\n  }\n\n  if (hasOwnProperty(customBorder, 'left')) {\n    if (customBorder.left) {\n      if (!isObject(customBorder.left)) {\n        customBorder.left = createDefaultCustomBorder();\n      }\n\n      defaultBorder.left = customBorder.left;\n    } else {\n      customBorder.left = createSingleEmptyBorder();\n      defaultBorder.left = customBorder.left;\n    }\n  }\n\n  return defaultBorder;\n}\n/**\n * Check if selection has border.\n *\n * @param {Core} hot The Handsontable instance.\n * @param {string} [direction] If set ('left' or 'top') then only the specified border side will be checked.\n * @returns {boolean}\n */\n\nexport function checkSelectionBorders(hot, direction) {\n  var atLeastOneHasBorder = false;\n  arrayEach(hot.getSelectedRange(), function (range) {\n    range.forAll(function (r, c) {\n      if (r < 0 || c < 0) {\n        return;\n      }\n\n      var metaBorders = hot.getCellMeta(r, c).borders;\n\n      if (metaBorders) {\n        if (direction) {\n          if (!hasOwnProperty(metaBorders[direction], 'hide') || metaBorders[direction].hide === false) {\n            atLeastOneHasBorder = true;\n            return false; // breaks forAll\n          }\n        } else {\n          atLeastOneHasBorder = true;\n          return false; // breaks forAll\n        }\n      }\n    });\n  });\n  return atLeastOneHasBorder;\n}\n/**\n * Mark label in contextMenu as selected.\n *\n * @param {string} label The label text.\n * @returns {string}\n */\n\nexport function markSelected(label) {\n  return \"<span class=\\\"selected\\\">\".concat(String.fromCharCode(10003), \"</span>\").concat(label); // workaround for https://github.com/handsontable/handsontable/issues/1946\n}"],"mappings":"AACA,SAASA,cAAc,EAAEC,QAAQ,QAAQ,0BAA0B;AACnE,SAASC,SAAS,QAAQ,yBAAyB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,QAAQA,CAACC,GAAG,EAAEC,GAAG,EAAE;EACjC,OAAO,YAAY,CAACC,MAAM,CAACF,GAAG,EAAE,KAAK,CAAC,CAACE,MAAM,CAACD,GAAG,CAAC;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,yBAAyBA,CAAA,EAAG;EAC1C,OAAO;IACLC,KAAK,EAAE,CAAC;IACRC,KAAK,EAAE;EACT,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,uBAAuBA,CAAA,EAAG;EACxC,OAAO;IACLC,IAAI,EAAE;EACR,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,qBAAqBA,CAAA,EAAG;EACtC,OAAO;IACLJ,KAAK,EAAE,CAAC;IACRC,KAAK,EAAE,MAAM;IACbI,aAAa,EAAE;EACjB,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,kBAAkBA,CAACV,GAAG,EAAEC,GAAG,EAAE;EAC3C,OAAO;IACLU,EAAE,EAAEZ,QAAQ,CAACC,GAAG,EAAEC,GAAG,CAAC;IACtBW,MAAM,EAAEJ,qBAAqB,CAAC,CAAC;IAC/BR,GAAG,EAAEA,GAAG;IACRC,GAAG,EAAEA,GAAG;IACRY,GAAG,EAAEP,uBAAuB,CAAC,CAAC;IAC9BQ,KAAK,EAAER,uBAAuB,CAAC,CAAC;IAChCS,MAAM,EAAET,uBAAuB,CAAC,CAAC;IACjCU,IAAI,EAAEV,uBAAuB,CAAC;EAChC,CAAC;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASW,mBAAmBA,CAACC,aAAa,EAAEC,YAAY,EAAE;EAC/D,IAAIvB,cAAc,CAACuB,YAAY,EAAE,QAAQ,CAAC,EAAE;IAC1CD,aAAa,CAACN,MAAM,GAAGO,YAAY,CAACP,MAAM;EAC5C;EAEA,IAAIhB,cAAc,CAACuB,YAAY,EAAE,KAAK,CAAC,EAAE;IACvC,IAAIA,YAAY,CAACN,GAAG,EAAE;MACpB,IAAI,CAAChB,QAAQ,CAACsB,YAAY,CAACN,GAAG,CAAC,EAAE;QAC/BM,YAAY,CAACN,GAAG,GAAGV,yBAAyB,CAAC,CAAC;MAChD;MAEAe,aAAa,CAACL,GAAG,GAAGM,YAAY,CAACN,GAAG;IACtC,CAAC,MAAM;MACLM,YAAY,CAACN,GAAG,GAAGP,uBAAuB,CAAC,CAAC;MAC5CY,aAAa,CAACL,GAAG,GAAGM,YAAY,CAACN,GAAG;IACtC;EACF;EAEA,IAAIjB,cAAc,CAACuB,YAAY,EAAE,OAAO,CAAC,EAAE;IACzC,IAAIA,YAAY,CAACL,KAAK,EAAE;MACtB,IAAI,CAACjB,QAAQ,CAACsB,YAAY,CAACL,KAAK,CAAC,EAAE;QACjCK,YAAY,CAACL,KAAK,GAAGX,yBAAyB,CAAC,CAAC;MAClD;MAEAe,aAAa,CAACJ,KAAK,GAAGK,YAAY,CAACL,KAAK;IAC1C,CAAC,MAAM;MACLK,YAAY,CAACL,KAAK,GAAGR,uBAAuB,CAAC,CAAC;MAC9CY,aAAa,CAACJ,KAAK,GAAGK,YAAY,CAACL,KAAK;IAC1C;EACF;EAEA,IAAIlB,cAAc,CAACuB,YAAY,EAAE,QAAQ,CAAC,EAAE;IAC1C,IAAIA,YAAY,CAACJ,MAAM,EAAE;MACvB,IAAI,CAAClB,QAAQ,CAACsB,YAAY,CAACJ,MAAM,CAAC,EAAE;QAClCI,YAAY,CAACJ,MAAM,GAAGZ,yBAAyB,CAAC,CAAC;MACnD;MAEAe,aAAa,CAACH,MAAM,GAAGI,YAAY,CAACJ,MAAM;IAC5C,CAAC,MAAM;MACLI,YAAY,CAACJ,MAAM,GAAGT,uBAAuB,CAAC,CAAC;MAC/CY,aAAa,CAACH,MAAM,GAAGI,YAAY,CAACJ,MAAM;IAC5C;EACF;EAEA,IAAInB,cAAc,CAACuB,YAAY,EAAE,MAAM,CAAC,EAAE;IACxC,IAAIA,YAAY,CAACH,IAAI,EAAE;MACrB,IAAI,CAACnB,QAAQ,CAACsB,YAAY,CAACH,IAAI,CAAC,EAAE;QAChCG,YAAY,CAACH,IAAI,GAAGb,yBAAyB,CAAC,CAAC;MACjD;MAEAe,aAAa,CAACF,IAAI,GAAGG,YAAY,CAACH,IAAI;IACxC,CAAC,MAAM;MACLG,YAAY,CAACH,IAAI,GAAGV,uBAAuB,CAAC,CAAC;MAC7CY,aAAa,CAACF,IAAI,GAAGG,YAAY,CAACH,IAAI;IACxC;EACF;EAEA,OAAOE,aAAa;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,qBAAqBA,CAACC,GAAG,EAAEC,SAAS,EAAE;EACpD,IAAIC,mBAAmB,GAAG,KAAK;EAC/BzB,SAAS,CAACuB,GAAG,CAACG,gBAAgB,CAAC,CAAC,EAAE,UAAUC,KAAK,EAAE;IACjDA,KAAK,CAACC,MAAM,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;MAC3B,IAAID,CAAC,GAAG,CAAC,IAAIC,CAAC,GAAG,CAAC,EAAE;QAClB;MACF;MAEA,IAAIC,WAAW,GAAGR,GAAG,CAACS,WAAW,CAACH,CAAC,EAAEC,CAAC,CAAC,CAACG,OAAO;MAE/C,IAAIF,WAAW,EAAE;QACf,IAAIP,SAAS,EAAE;UACb,IAAI,CAAC1B,cAAc,CAACiC,WAAW,CAACP,SAAS,CAAC,EAAE,MAAM,CAAC,IAAIO,WAAW,CAACP,SAAS,CAAC,CAACf,IAAI,KAAK,KAAK,EAAE;YAC5FgB,mBAAmB,GAAG,IAAI;YAC1B,OAAO,KAAK,CAAC,CAAC;UAChB;QACF,CAAC,MAAM;UACLA,mBAAmB,GAAG,IAAI;UAC1B,OAAO,KAAK,CAAC,CAAC;QAChB;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EACF,OAAOA,mBAAmB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASS,YAAYA,CAACC,KAAK,EAAE;EAClC,OAAO,2BAA2B,CAAC/B,MAAM,CAACgC,MAAM,CAACC,YAAY,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC,CAACjC,MAAM,CAAC+B,KAAK,CAAC,CAAC,CAAC;AAClG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nvar _excluded = [\"column\"],\n  _excluded2 = [\"column\"];\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nimport { addClass, removeClass } from \"../../helpers/dom/element.mjs\";\nimport { isUndefined, isDefined } from \"../../helpers/mixed.mjs\";\nimport { isObject } from \"../../helpers/object.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nimport { arrayMap } from \"../../helpers/array.mjs\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { IndexesSequence, PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { isPressedCtrlKey } from \"../../utils/keyStateObserver.mjs\";\nimport { ColumnStatesManager } from \"./columnStatesManager.mjs\";\nimport { getNextSortOrder, areValidSortStates, getHeaderSpanElement, isFirstLevelColumnHeader, wasHeaderClickedProperly } from \"./utils.mjs\";\nimport { getClassesToRemove, getClassesToAdd } from \"./domHelpers.mjs\";\nimport { rootComparator } from \"./rootComparator.mjs\";\nimport { registerRootComparator, sort } from \"./sortService/index.mjs\";\nexport var PLUGIN_KEY = 'columnSorting';\nexport var PLUGIN_PRIORITY = 50;\nvar APPEND_COLUMN_CONFIG_STRATEGY = 'append';\nvar REPLACE_COLUMN_CONFIG_STRATEGY = 'replace';\nregisterRootComparator(PLUGIN_KEY, rootComparator);\nHooks.getSingleton().register('beforeColumnSort');\nHooks.getSingleton().register('afterColumnSort'); // DIFF - MultiColumnSorting & ColumnSorting: changed configuration documentation.\n\n/**\n * @plugin ColumnSorting\n * @class ColumnSorting\n *\n * @description\n * This plugin sorts the view by columns (but does not sort the data source!). To enable the plugin, set the\n * {@link Options#columnSorting} property to the correct value (see the examples below).\n *\n * @example\n * ```js\n * // as boolean\n * columnSorting: true\n *\n * // as an object with initial sort config (sort ascending for column at index 1)\n * columnSorting: {\n *   initialConfig: {\n *     column: 1,\n *     sortOrder: 'asc'\n *   }\n * }\n *\n * // as an object which define specific sorting options for all columns\n * columnSorting: {\n *   sortEmptyCells: true, // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table (by default)\n *   indicator: true, // true = shows indicator for all columns (by default), false = don't show indicator for columns\n *   headerAction: true, // true = allow to click on the headers to sort (by default), false = turn off possibility to click on the headers to sort\n *   compareFunctionFactory: function(sortOrder, columnMeta) {\n *     return function(value, nextValue) {\n *       // Some value comparisons which will return -1, 0 or 1...\n *     }\n *   }\n * }\n *\n * // as an object passed to the `column` property, allows specifying a custom options for the desired column.\n * // please take a look at documentation of `column` property: https://handsontable.com/docs/Options.html#columns\n * columns: [{\n *   columnSorting: {\n *     indicator: false, // disable indicator for the first column,\n *     sortEmptyCells: true,\n *     headerAction: false, // clicks on the first column won't sort\n *     compareFunctionFactory: function(sortOrder, columnMeta) {\n *       return function(value, nextValue) {\n *         return 0; // Custom compare function for the first column (don't sort)\n *       }\n *     }\n *   }\n * }]\n * ```\n */\n\nexport var ColumnSorting = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(ColumnSorting, _BasePlugin);\n  var _super = _createSuper(ColumnSorting);\n  function ColumnSorting(hotInstance) {\n    var _this;\n    _classCallCheck(this, ColumnSorting);\n    _this = _super.call(this, hotInstance);\n    /**\n     * Instance of column state manager.\n     *\n     * @private\n     * @type {null|ColumnStatesManager}\n     */\n\n    _this.columnStatesManager = null;\n    /**\n     * Cached column properties from plugin like i.e. `indicator`, `headerAction`.\n     *\n     * @private\n     * @type {null|PhysicalIndexToValueMap}\n     */\n\n    _this.columnMetaCache = null;\n    /**\n     * Main settings key designed for the plugin.\n     *\n     * @private\n     * @type {string}\n     */\n\n    _this.pluginKey = PLUGIN_KEY;\n    /**\n     * Plugin indexes cache.\n     *\n     * @private\n     * @type {null|IndexesSequence}\n     */\n\n    _this.indexesSequenceCache = null;\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link ColumnSorting#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n\n  _createClass(ColumnSorting, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings()[this.pluginKey];\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n      if (this.enabled) {\n        return;\n      }\n      this.columnStatesManager = new ColumnStatesManager(this.hot, \"\".concat(this.pluginKey, \".sortingStates\"));\n      this.columnMetaCache = new IndexToValueMap(function (physicalIndex) {\n        var visualIndex = _this2.hot.toVisualColumn(physicalIndex);\n        if (visualIndex === null) {\n          visualIndex = physicalIndex;\n        }\n        return _this2.getMergedPluginSettings(visualIndex);\n      });\n      this.hot.columnIndexMapper.registerMap(\"\".concat(this.pluginKey, \".columnMeta\"), this.columnMetaCache);\n      this.addHook('afterGetColHeader', function (column, TH) {\n        return _this2.onAfterGetColHeader(column, TH);\n      });\n      this.addHook('beforeOnCellMouseDown', function () {\n        return _this2.onBeforeOnCellMouseDown.apply(_this2, arguments);\n      });\n      this.addHook('afterOnCellMouseDown', function (event, target) {\n        return _this2.onAfterOnCellMouseDown(event, target);\n      });\n      this.addHook('afterInit', function () {\n        return _this2.loadOrSortBySettings();\n      });\n      this.addHook('afterLoadData', function () {\n        return _this2.onAfterLoadData.apply(_this2, arguments);\n      }); // TODO: Workaround? It should be refactored / described.\n\n      if (this.hot.view) {\n        this.loadOrSortBySettings();\n      }\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      var _this3 = this;\n      var clearColHeader = function clearColHeader(column, TH) {\n        var headerSpanElement = getHeaderSpanElement(TH);\n        if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n          return;\n        }\n        _this3.updateHeaderClasses(headerSpanElement);\n      }; // Changing header width and removing indicator.\n\n      this.hot.addHook('afterGetColHeader', clearColHeader);\n      this.hot.addHookOnce('afterViewRender', function () {\n        _this3.hot.removeHook('afterGetColHeader', clearColHeader);\n      });\n      this.hot.batchExecution(function () {\n        if (_this3.indexesSequenceCache !== null) {\n          _this3.hot.rowIndexMapper.setIndexesSequence(_this3.indexesSequenceCache.getValues());\n          _this3.hot.rowIndexMapper.unregisterMap(_this3.pluginKey);\n        }\n      }, true);\n      this.hot.columnIndexMapper.unregisterMap(\"\".concat(this.pluginKey, \".columnMeta\"));\n      this.columnStatesManager.destroy();\n      this.columnMetaCache = null;\n      this.columnStatesManager = null;\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"disablePlugin\", this).call(this);\n    } // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.\n\n    /**\n     * Sorts the table by chosen columns and orders.\n     *\n     * @param {undefined|object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.\n     * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).\n     *\n     * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.\n     *\n     * @example\n     * ```js\n     * // sort ascending first visual column\n     * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n     * ```\n     *\n     * @fires Hooks#beforeColumnSort\n     * @fires Hooks#afterColumnSort\n     */\n  }, {\n    key: \"sort\",\n    value: function sort(sortConfig) {\n      var currentSortConfig = this.getSortConfig(); // We always pass configs defined as an array to `beforeColumnSort` and `afterColumnSort` hooks.\n\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n      var sortPossible = this.areValidSortConfigs(destinationSortConfigs);\n      var allowSort = this.hot.runHooks('beforeColumnSort', currentSortConfig, destinationSortConfigs, sortPossible);\n      if (allowSort === false) {\n        return;\n      }\n      if (currentSortConfig.length === 0 && this.indexesSequenceCache === null) {\n        this.indexesSequenceCache = this.hot.rowIndexMapper.registerMap(this.pluginKey, new IndexesSequence());\n        this.indexesSequenceCache.setValues(this.hot.rowIndexMapper.getIndexesSequence());\n      }\n      if (sortPossible) {\n        this.columnStatesManager.setSortStates(destinationSortConfigs);\n        this.sortByPresetSortStates(destinationSortConfigs);\n        this.saveAllSortSettings(destinationSortConfigs);\n      }\n      this.hot.runHooks('afterColumnSort', currentSortConfig, sortPossible ? destinationSortConfigs : currentSortConfig, sortPossible);\n      if (sortPossible) {\n        this.hot.render(); // TODO: Workaround? This triggers fast redraw. One test won't pass after removal.\n        // It should be refactored / described.\n\n        this.hot.forceFullRender = false;\n        this.hot.view.render();\n      }\n    }\n    /**\n     * Clear the sort performed on the table.\n     */\n  }, {\n    key: \"clearSort\",\n    value: function clearSort() {\n      this.sort([]);\n    }\n    /**\n     * Checks if the table is sorted (any column have to be sorted).\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isSorted\",\n    value: function isSorted() {\n      return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();\n    }\n    /**\n     * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.\n     *\n     * @param {number} [column] Visual column index.\n     * @returns {undefined|object|Array}\n     */\n  }, {\n    key: \"getSortConfig\",\n    value: function getSortConfig(column) {\n      if (isDefined(column)) {\n        return this.columnStatesManager.getColumnSortState(column);\n      }\n      return this.columnStatesManager.getSortStates();\n    }\n    /**\n     * @description\n     * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.\n     * Note: Please keep in mind that this method doesn't re-render the table.\n     *\n     * @example\n     * ```js\n     * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {\n     *   const columnSortPlugin = this.getPlugin('columnSorting');\n     *\n     *   columnSortPlugin.setSortConfig(destinationSortConfigs);\n     *\n     *   // const newData = ... // Calculated data set, ie. from an AJAX call.\n     *\n     *   this.loadData(newData); // Load new data set and re-render the table.\n     *\n     *   return false; // The blockade for the default sort action.\n     * }\n     * ```\n     *\n     * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     */\n  }, {\n    key: \"setSortConfig\",\n    value: function setSortConfig(sortConfig) {\n      // We always set configs defined as an array.\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n      if (this.areValidSortConfigs(destinationSortConfigs)) {\n        this.columnStatesManager.setSortStates(destinationSortConfigs);\n      }\n    }\n    /**\n     * Get normalized sort configs.\n     *\n     * @private\n     * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     * @returns {Array}\n     */\n  }, {\n    key: \"getNormalizedSortConfigs\",\n    value: function getNormalizedSortConfigs() {\n      var sortConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      if (Array.isArray(sortConfig)) {\n        return sortConfig.slice(0, 1);\n      }\n      return [sortConfig];\n    }\n    /**\n     * Get if sort configs are valid.\n     *\n     * @private\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"areValidSortConfigs\",\n    value: function areValidSortConfigs(sortConfigs) {\n      var numberOfColumns = this.hot.countCols(); // We don't translate visual indexes to physical indexes.\n\n      return areValidSortStates(sortConfigs) && sortConfigs.every(function (_ref) {\n        var column = _ref.column;\n        return column <= numberOfColumns && column >= 0;\n      });\n    }\n    /**\n     * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.\n     *\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     *\n     * @private\n     * @fires Hooks#persistentStateSave\n     */\n  }, {\n    key: \"saveAllSortSettings\",\n    value: function saveAllSortSettings(sortConfigs) {\n      var _this4 = this;\n      var allSortSettings = this.columnStatesManager.getAllColumnsProperties();\n      var translateColumnToPhysical = function translateColumnToPhysical(_ref2) {\n        var visualColumn = _ref2.column,\n          restOfProperties = _objectWithoutProperties(_ref2, _excluded);\n        return _objectSpread({\n          column: _this4.hot.toPhysicalColumn(visualColumn)\n        }, restOfProperties);\n      };\n      allSortSettings.initialConfig = arrayMap(sortConfigs, translateColumnToPhysical);\n      this.hot.runHooks('persistentStateSave', 'columnSorting', allSortSettings);\n    }\n    /**\n     * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.\n     *\n     * @private\n     * @returns {object} Previously saved sort settings.\n     *\n     * @fires Hooks#persistentStateLoad\n     */\n  }, {\n    key: \"getAllSavedSortSettings\",\n    value: function getAllSavedSortSettings() {\n      var _this5 = this;\n      var storedAllSortSettings = {};\n      this.hot.runHooks('persistentStateLoad', 'columnSorting', storedAllSortSettings);\n      var allSortSettings = storedAllSortSettings.value;\n      var translateColumnToVisual = function translateColumnToVisual(_ref3) {\n        var physicalColumn = _ref3.column,\n          restOfProperties = _objectWithoutProperties(_ref3, _excluded2);\n        return _objectSpread({\n          column: _this5.hot.toVisualColumn(physicalColumn)\n        }, restOfProperties);\n      };\n      if (isDefined(allSortSettings) && Array.isArray(allSortSettings.initialConfig)) {\n        allSortSettings.initialConfig = arrayMap(allSortSettings.initialConfig, translateColumnToVisual);\n      }\n      return allSortSettings;\n    }\n    /**\n     * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @returns {undefined|object}\n     */\n  }, {\n    key: \"getColumnNextConfig\",\n    value: function getColumnNextConfig(column) {\n      var sortOrder = this.columnStatesManager.getSortOrderOfColumn(column);\n      if (isDefined(sortOrder)) {\n        var nextSortOrder = getNextSortOrder(sortOrder);\n        if (isDefined(nextSortOrder)) {\n          return {\n            column: column,\n            sortOrder: nextSortOrder\n          };\n        }\n        return;\n      }\n      var nrOfColumns = this.hot.countCols();\n      if (Number.isInteger(column) && column >= 0 && column < nrOfColumns) {\n        return {\n          column: column,\n          sortOrder: getNextSortOrder()\n        };\n      }\n    }\n    /**\n     * Get sort configuration with \"next order\" for particular column.\n     *\n     * @private\n     * @param {number} columnToChange Visual column index of column which order will be changed.\n     * @param {string} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one\n     * change order of particular column and change it's position in the sort queue to the last one. The second one\n     * just change order of particular column.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @returns {Array}\n     */\n  }, {\n    key: \"getNextSortConfig\",\n    value: function getNextSortConfig(columnToChange) {\n      var strategyId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APPEND_COLUMN_CONFIG_STRATEGY;\n      var indexOfColumnToChange = this.columnStatesManager.getIndexOfColumnInSortQueue(columnToChange);\n      var isColumnSorted = indexOfColumnToChange !== -1;\n      var currentSortConfig = this.getSortConfig();\n      var nextColumnConfig = this.getColumnNextConfig(columnToChange);\n      if (isColumnSorted) {\n        if (isUndefined(nextColumnConfig)) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n        if (strategyId === APPEND_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)), [nextColumnConfig]);\n        } else if (strategyId === REPLACE_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), [nextColumnConfig], _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n      }\n      if (isDefined(nextColumnConfig)) {\n        return currentSortConfig.concat(nextColumnConfig);\n      }\n      return currentSortConfig;\n    }\n    /**\n     * Get plugin's column config for the specified column index.\n     *\n     * @private\n     * @param {object} columnConfig Configuration inside `columns` property for the specified column index.\n     * @returns {object}\n     */\n  }, {\n    key: \"getPluginColumnConfig\",\n    value: function getPluginColumnConfig(columnConfig) {\n      if (isObject(columnConfig)) {\n        var pluginColumnConfig = columnConfig[this.pluginKey];\n        if (isObject(pluginColumnConfig)) {\n          return pluginColumnConfig;\n        }\n      }\n      return {};\n    }\n    /**\n     * Get plugin settings related properties, properly merged from cascade settings.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @returns {object}\n     */\n  }, {\n    key: \"getMergedPluginSettings\",\n    value: function getMergedPluginSettings(column) {\n      var pluginMainSettings = this.hot.getSettings()[this.pluginKey];\n      var storedColumnProperties = this.columnStatesManager.getAllColumnsProperties();\n      var cellMeta = this.hot.getCellMeta(0, column);\n      var columnMeta = Object.getPrototypeOf(cellMeta);\n      if (Array.isArray(columnMeta.columns)) {\n        return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns[column]));\n      } else if (isFunction(columnMeta.columns)) {\n        return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns(column)));\n      }\n      return Object.assign(storedColumnProperties, pluginMainSettings);\n    }\n    /**\n     * Get copy of settings for first cell in the column.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @returns {object}\n     */\n    // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from column meta we call this function.\n    // TODO: Remove test named: \"should not break the dataset when inserted new row\" (#5431).\n  }, {\n    key: \"getFirstCellSettings\",\n    value: function getFirstCellSettings(column) {\n      var cellMeta = this.hot.getCellMeta(0, column);\n      var cellMetaCopy = Object.create(cellMeta);\n      cellMetaCopy[this.pluginKey] = this.columnMetaCache.getValueAtIndex(this.hot.toPhysicalColumn(column));\n      return cellMetaCopy;\n    }\n    /**\n     * Get number of rows which should be sorted.\n     *\n     * @private\n     * @param {number} numberOfRows Total number of displayed rows.\n     * @returns {number}\n     */\n  }, {\n    key: \"getNumberOfRowsToSort\",\n    value: function getNumberOfRowsToSort(numberOfRows) {\n      var settings = this.hot.getSettings(); // `maxRows` option doesn't take into account `minSpareRows` option in this case.\n\n      if (settings.maxRows <= numberOfRows) {\n        return settings.maxRows;\n      }\n      return numberOfRows - settings.minSpareRows;\n    }\n    /**\n     * Performs the sorting using a stable sort function basing on internal state of sorting.\n     *\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     * @private\n     */\n  }, {\n    key: \"sortByPresetSortStates\",\n    value: function sortByPresetSortStates(sortConfigs) {\n      var _this6 = this;\n      if (sortConfigs.length === 0) {\n        this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());\n        return;\n      }\n      var indexesWithData = [];\n      var numberOfRows = this.hot.countRows();\n      var getDataForSortedColumns = function getDataForSortedColumns(visualRowIndex) {\n        return arrayMap(sortConfigs, function (sortConfig) {\n          return _this6.hot.getDataAtCell(visualRowIndex, sortConfig.column);\n        });\n      };\n      for (var visualRowIndex = 0; visualRowIndex < this.getNumberOfRowsToSort(numberOfRows); visualRowIndex += 1) {\n        indexesWithData.push([this.hot.toPhysicalRow(visualRowIndex)].concat(getDataForSortedColumns(visualRowIndex)));\n      }\n      var indexesBefore = arrayMap(indexesWithData, function (indexWithData) {\n        return indexWithData[0];\n      });\n      sort(indexesWithData, this.pluginKey, arrayMap(sortConfigs, function (sortConfig) {\n        return sortConfig.sortOrder;\n      }), arrayMap(sortConfigs, function (sortConfig) {\n        return _this6.getFirstCellSettings(sortConfig.column);\n      })); // Append spareRows\n\n      for (var _visualRowIndex = indexesWithData.length; _visualRowIndex < numberOfRows; _visualRowIndex += 1) {\n        indexesWithData.push([_visualRowIndex].concat(getDataForSortedColumns(_visualRowIndex)));\n      }\n      var indexesAfter = arrayMap(indexesWithData, function (indexWithData) {\n        return indexWithData[0];\n      });\n      var indexMapping = new Map(arrayMap(indexesBefore, function (indexBefore, indexInsideArray) {\n        return [indexBefore, indexesAfter[indexInsideArray]];\n      }));\n      var newIndexesSequence = arrayMap(this.hot.rowIndexMapper.getIndexesSequence(), function (physicalIndex) {\n        if (indexMapping.has(physicalIndex)) {\n          return indexMapping.get(physicalIndex);\n        }\n        return physicalIndex;\n      });\n      this.hot.rowIndexMapper.setIndexesSequence(newIndexesSequence);\n    }\n    /**\n     * Load saved settings or sort by predefined plugin configuration.\n     *\n     * @private\n     */\n  }, {\n    key: \"loadOrSortBySettings\",\n    value: function loadOrSortBySettings() {\n      var storedAllSortSettings = this.getAllSavedSortSettings();\n      if (isObject(storedAllSortSettings)) {\n        this.sortBySettings(storedAllSortSettings);\n      } else {\n        var allSortSettings = this.hot.getSettings()[this.pluginKey];\n        this.sortBySettings(allSortSettings);\n      }\n    }\n    /**\n     * Sort the table by provided configuration.\n     *\n     * @private\n     * @param {object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,\n     * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.\n     */\n  }, {\n    key: \"sortBySettings\",\n    value: function sortBySettings(allSortSettings) {\n      if (isObject(allSortSettings)) {\n        this.columnStatesManager.updateAllColumnsProperties(allSortSettings);\n        var initialConfig = allSortSettings.initialConfig;\n        if (Array.isArray(initialConfig) || isObject(initialConfig)) {\n          this.sort(initialConfig);\n        }\n      } else {\n        // Extra render for headers. Their width may change.\n        this.hot.render();\n      }\n    }\n    /**\n     * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @param {Element} TH TH HTML element.\n     */\n  }, {\n    key: \"onAfterGetColHeader\",\n    value: function onAfterGetColHeader(column, TH) {\n      var headerSpanElement = getHeaderSpanElement(TH);\n      if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n        return;\n      }\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var showSortIndicator = pluginSettingsForColumn.indicator;\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      this.updateHeaderClasses(headerSpanElement, this.columnStatesManager, column, showSortIndicator, headerActionEnabled);\n    }\n    /**\n     * Update header classes.\n     *\n     * @private\n     * @param {HTMLElement} headerSpanElement Header span element.\n     * @param {...*} args Extra arguments for helpers.\n     */\n  }, {\n    key: \"updateHeaderClasses\",\n    value: function updateHeaderClasses(headerSpanElement) {\n      removeClass(headerSpanElement, getClassesToRemove(headerSpanElement));\n      if (this.enabled !== false) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        addClass(headerSpanElement, getClassesToAdd.apply(void 0, args));\n      }\n    }\n    /**\n     * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called\n     * for `updateSettings` in specific situations.\n     *\n     * @private\n     * @param {object} newSettings New settings object.\n     */\n  }, {\n    key: \"onUpdateSettings\",\n    value: function onUpdateSettings(newSettings) {\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"onUpdateSettings\", this).call(this);\n      if (this.columnMetaCache !== null) {\n        // Column meta cache base on settings, thus we should re-init the map.\n        this.columnMetaCache.init(this.hot.columnIndexMapper.getNumberOfIndexes());\n      }\n      if (isDefined(newSettings[this.pluginKey])) {\n        this.sortBySettings(newSettings[this.pluginKey]);\n      }\n    }\n    /**\n     * Callback for the `afterLoadData` hook.\n     *\n     * @private\n     * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.\n     */\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData(initialLoad) {\n      if (initialLoad === true) {\n        // TODO: Workaround? It should be refactored / described.\n        if (this.hot.view) {\n          this.loadOrSortBySettings();\n        }\n      }\n    }\n    /**\n     * Indicates if clickable header was clicked.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {number} column Visual column index.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"wasClickableHeaderClicked\",\n    value: function wasClickableHeaderClicked(event, column) {\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      return headerActionEnabled && event.target.nodeName === 'SPAN';\n    }\n    /**\n     * Changes the behavior of selection / dragging.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {CellCoords} coords Visual coordinates.\n     * @param {HTMLElement} TD The cell element.\n     * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains\n     *                            a boolean value that allows or disallows changing the selection for that particular area.\n     */\n  }, {\n    key: \"onBeforeOnCellMouseDown\",\n    value: function onBeforeOnCellMouseDown(event, coords, TD, controller) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n      if (this.wasClickableHeaderClicked(event, coords.col) && isPressedCtrlKey()) {\n        controller.column = true;\n      }\n    }\n    /**\n     * Callback for the `onAfterOnCellMouseDown` hook.\n     *\n     * @private\n     * @param {Event} event Event which are provided by hook.\n     * @param {CellCoords} coords Visual coords of the selected cell.\n     */\n  }, {\n    key: \"onAfterOnCellMouseDown\",\n    value: function onAfterOnCellMouseDown(event, coords) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n      if (this.wasClickableHeaderClicked(event, coords.col)) {\n        if (isPressedCtrlKey()) {\n          this.hot.deselectCell();\n          this.hot.selectColumns(coords.col);\n        }\n        this.sort(this.getColumnNextConfig(coords.col));\n      }\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this$columnStatesMan;\n\n      // TODO: Probably not supported yet by ESLint: https://github.com/eslint/eslint/issues/11045\n      // eslint-disable-next-line no-unused-expressions\n      (_this$columnStatesMan = this.columnStatesManager) === null || _this$columnStatesMan === void 0 ? void 0 : _this$columnStatesMan.destroy();\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"destroy\", this).call(this);\n    }\n  }], [{\n    key: \"PLUGIN_KEY\",\n    get: function get() {\n      return PLUGIN_KEY;\n    }\n  }, {\n    key: \"PLUGIN_PRIORITY\",\n    get: function get() {\n      return PLUGIN_PRIORITY;\n    }\n  }]);\n  return ColumnSorting;\n}(BasePlugin);","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_excluded","_excluded2","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","iter","isArray","len","length","i","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","configurable","writable","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","_get","Reflect","get","property","receiver","base","_superPropBase","desc","hasOwnProperty","_getPrototypeOf","_inherits","subClass","superClass","create","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","construct","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","addClass","removeClass","isUndefined","isDefined","isObject","isFunction","arrayMap","BasePlugin","IndexesSequence","PhysicalIndexToValueMap","IndexToValueMap","Hooks","isPressedCtrlKey","ColumnStatesManager","getNextSortOrder","areValidSortStates","getHeaderSpanElement","isFirstLevelColumnHeader","wasHeaderClickedProperly","getClassesToRemove","getClassesToAdd","rootComparator","registerRootComparator","sort","PLUGIN_KEY","PLUGIN_PRIORITY","APPEND_COLUMN_CONFIG_STRATEGY","REPLACE_COLUMN_CONFIG_STRATEGY","getSingleton","register","ColumnSorting","_BasePlugin","_super","hotInstance","_this","columnStatesManager","columnMetaCache","pluginKey","indexesSequenceCache","isEnabled","hot","getSettings","enablePlugin","_this2","enabled","concat","physicalIndex","visualIndex","toVisualColumn","getMergedPluginSettings","columnIndexMapper","registerMap","addHook","column","TH","onAfterGetColHeader","onBeforeOnCellMouseDown","event","onAfterOnCellMouseDown","loadOrSortBySettings","onAfterLoadData","view","disablePlugin","_this3","clearColHeader","headerSpanElement","updateHeaderClasses","addHookOnce","removeHook","batchExecution","rowIndexMapper","setIndexesSequence","getValues","unregisterMap","destroy","sortConfig","currentSortConfig","getSortConfig","destinationSortConfigs","getNormalizedSortConfigs","sortPossible","areValidSortConfigs","allowSort","runHooks","setValues","getIndexesSequence","setSortStates","sortByPresetSortStates","saveAllSortSettings","render","forceFullRender","clearSort","isSorted","isListOfSortedColumnsEmpty","getColumnSortState","getSortStates","setSortConfig","undefined","sortConfigs","numberOfColumns","countCols","every","_ref","_this4","allSortSettings","getAllColumnsProperties","translateColumnToPhysical","_ref2","visualColumn","restOfProperties","toPhysicalColumn","initialConfig","getAllSavedSortSettings","_this5","storedAllSortSettings","translateColumnToVisual","_ref3","physicalColumn","getColumnNextConfig","sortOrder","getSortOrderOfColumn","nextSortOrder","nrOfColumns","Number","isInteger","getNextSortConfig","columnToChange","strategyId","indexOfColumnToChange","getIndexOfColumnInSortQueue","isColumnSorted","nextColumnConfig","getPluginColumnConfig","columnConfig","pluginColumnConfig","pluginMainSettings","storedColumnProperties","cellMeta","getCellMeta","columnMeta","columns","assign","getFirstCellSettings","cellMetaCopy","getValueAtIndex","getNumberOfRowsToSort","numberOfRows","settings","maxRows","minSpareRows","_this6","indexesWithData","countRows","getDataForSortedColumns","visualRowIndex","getDataAtCell","toPhysicalRow","indexesBefore","indexWithData","_visualRowIndex","indexesAfter","indexMapping","Map","indexBefore","indexInsideArray","newIndexesSequence","has","sortBySettings","updateAllColumnsProperties","pluginSettingsForColumn","showSortIndicator","indicator","headerActionEnabled","headerAction","_len","args","_key","onUpdateSettings","newSettings","init","getNumberOfIndexes","initialLoad","wasClickableHeaderClicked","nodeName","coords","TD","controller","row","col","deselectCell","selectColumns","_this$columnStatesMan"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/plugins/columnSorting/columnSorting.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nimport \"core-js/modules/es.object.set-prototype-of.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\nimport \"core-js/modules/es.reflect.get.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nvar _excluded = [\"column\"],\n    _excluded2 = [\"column\"];\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.number.is-integer.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _get() { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { addClass, removeClass } from \"../../helpers/dom/element.mjs\";\nimport { isUndefined, isDefined } from \"../../helpers/mixed.mjs\";\nimport { isObject } from \"../../helpers/object.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nimport { arrayMap } from \"../../helpers/array.mjs\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { IndexesSequence, PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { isPressedCtrlKey } from \"../../utils/keyStateObserver.mjs\";\nimport { ColumnStatesManager } from \"./columnStatesManager.mjs\";\nimport { getNextSortOrder, areValidSortStates, getHeaderSpanElement, isFirstLevelColumnHeader, wasHeaderClickedProperly } from \"./utils.mjs\";\nimport { getClassesToRemove, getClassesToAdd } from \"./domHelpers.mjs\";\nimport { rootComparator } from \"./rootComparator.mjs\";\nimport { registerRootComparator, sort } from \"./sortService/index.mjs\";\nexport var PLUGIN_KEY = 'columnSorting';\nexport var PLUGIN_PRIORITY = 50;\nvar APPEND_COLUMN_CONFIG_STRATEGY = 'append';\nvar REPLACE_COLUMN_CONFIG_STRATEGY = 'replace';\nregisterRootComparator(PLUGIN_KEY, rootComparator);\nHooks.getSingleton().register('beforeColumnSort');\nHooks.getSingleton().register('afterColumnSort'); // DIFF - MultiColumnSorting & ColumnSorting: changed configuration documentation.\n\n/**\n * @plugin ColumnSorting\n * @class ColumnSorting\n *\n * @description\n * This plugin sorts the view by columns (but does not sort the data source!). To enable the plugin, set the\n * {@link Options#columnSorting} property to the correct value (see the examples below).\n *\n * @example\n * ```js\n * // as boolean\n * columnSorting: true\n *\n * // as an object with initial sort config (sort ascending for column at index 1)\n * columnSorting: {\n *   initialConfig: {\n *     column: 1,\n *     sortOrder: 'asc'\n *   }\n * }\n *\n * // as an object which define specific sorting options for all columns\n * columnSorting: {\n *   sortEmptyCells: true, // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table (by default)\n *   indicator: true, // true = shows indicator for all columns (by default), false = don't show indicator for columns\n *   headerAction: true, // true = allow to click on the headers to sort (by default), false = turn off possibility to click on the headers to sort\n *   compareFunctionFactory: function(sortOrder, columnMeta) {\n *     return function(value, nextValue) {\n *       // Some value comparisons which will return -1, 0 or 1...\n *     }\n *   }\n * }\n *\n * // as an object passed to the `column` property, allows specifying a custom options for the desired column.\n * // please take a look at documentation of `column` property: https://handsontable.com/docs/Options.html#columns\n * columns: [{\n *   columnSorting: {\n *     indicator: false, // disable indicator for the first column,\n *     sortEmptyCells: true,\n *     headerAction: false, // clicks on the first column won't sort\n *     compareFunctionFactory: function(sortOrder, columnMeta) {\n *       return function(value, nextValue) {\n *         return 0; // Custom compare function for the first column (don't sort)\n *       }\n *     }\n *   }\n * }]\n * ```\n */\n\nexport var ColumnSorting = /*#__PURE__*/function (_BasePlugin) {\n  _inherits(ColumnSorting, _BasePlugin);\n\n  var _super = _createSuper(ColumnSorting);\n\n  function ColumnSorting(hotInstance) {\n    var _this;\n\n    _classCallCheck(this, ColumnSorting);\n\n    _this = _super.call(this, hotInstance);\n    /**\n     * Instance of column state manager.\n     *\n     * @private\n     * @type {null|ColumnStatesManager}\n     */\n\n    _this.columnStatesManager = null;\n    /**\n     * Cached column properties from plugin like i.e. `indicator`, `headerAction`.\n     *\n     * @private\n     * @type {null|PhysicalIndexToValueMap}\n     */\n\n    _this.columnMetaCache = null;\n    /**\n     * Main settings key designed for the plugin.\n     *\n     * @private\n     * @type {string}\n     */\n\n    _this.pluginKey = PLUGIN_KEY;\n    /**\n     * Plugin indexes cache.\n     *\n     * @private\n     * @type {null|IndexesSequence}\n     */\n\n    _this.indexesSequenceCache = null;\n    return _this;\n  }\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` than the {@link ColumnSorting#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n\n\n  _createClass(ColumnSorting, [{\n    key: \"isEnabled\",\n    value: function isEnabled() {\n      return !!this.hot.getSettings()[this.pluginKey];\n    }\n    /**\n     * Enables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"enablePlugin\",\n    value: function enablePlugin() {\n      var _this2 = this;\n\n      if (this.enabled) {\n        return;\n      }\n\n      this.columnStatesManager = new ColumnStatesManager(this.hot, \"\".concat(this.pluginKey, \".sortingStates\"));\n      this.columnMetaCache = new IndexToValueMap(function (physicalIndex) {\n        var visualIndex = _this2.hot.toVisualColumn(physicalIndex);\n\n        if (visualIndex === null) {\n          visualIndex = physicalIndex;\n        }\n\n        return _this2.getMergedPluginSettings(visualIndex);\n      });\n      this.hot.columnIndexMapper.registerMap(\"\".concat(this.pluginKey, \".columnMeta\"), this.columnMetaCache);\n      this.addHook('afterGetColHeader', function (column, TH) {\n        return _this2.onAfterGetColHeader(column, TH);\n      });\n      this.addHook('beforeOnCellMouseDown', function () {\n        return _this2.onBeforeOnCellMouseDown.apply(_this2, arguments);\n      });\n      this.addHook('afterOnCellMouseDown', function (event, target) {\n        return _this2.onAfterOnCellMouseDown(event, target);\n      });\n      this.addHook('afterInit', function () {\n        return _this2.loadOrSortBySettings();\n      });\n      this.addHook('afterLoadData', function () {\n        return _this2.onAfterLoadData.apply(_this2, arguments);\n      }); // TODO: Workaround? It should be refactored / described.\n\n      if (this.hot.view) {\n        this.loadOrSortBySettings();\n      }\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"enablePlugin\", this).call(this);\n    }\n    /**\n     * Disables the plugin functionality for this Handsontable instance.\n     */\n\n  }, {\n    key: \"disablePlugin\",\n    value: function disablePlugin() {\n      var _this3 = this;\n\n      var clearColHeader = function clearColHeader(column, TH) {\n        var headerSpanElement = getHeaderSpanElement(TH);\n\n        if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n          return;\n        }\n\n        _this3.updateHeaderClasses(headerSpanElement);\n      }; // Changing header width and removing indicator.\n\n\n      this.hot.addHook('afterGetColHeader', clearColHeader);\n      this.hot.addHookOnce('afterViewRender', function () {\n        _this3.hot.removeHook('afterGetColHeader', clearColHeader);\n      });\n      this.hot.batchExecution(function () {\n        if (_this3.indexesSequenceCache !== null) {\n          _this3.hot.rowIndexMapper.setIndexesSequence(_this3.indexesSequenceCache.getValues());\n\n          _this3.hot.rowIndexMapper.unregisterMap(_this3.pluginKey);\n        }\n      }, true);\n      this.hot.columnIndexMapper.unregisterMap(\"\".concat(this.pluginKey, \".columnMeta\"));\n      this.columnStatesManager.destroy();\n      this.columnMetaCache = null;\n      this.columnStatesManager = null;\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"disablePlugin\", this).call(this);\n    } // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.\n\n    /**\n     * Sorts the table by chosen columns and orders.\n     *\n     * @param {undefined|object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.\n     * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).\n     *\n     * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.\n     *\n     * @example\n     * ```js\n     * // sort ascending first visual column\n     * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n     * ```\n     *\n     * @fires Hooks#beforeColumnSort\n     * @fires Hooks#afterColumnSort\n     */\n\n  }, {\n    key: \"sort\",\n    value: function sort(sortConfig) {\n      var currentSortConfig = this.getSortConfig(); // We always pass configs defined as an array to `beforeColumnSort` and `afterColumnSort` hooks.\n\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n      var sortPossible = this.areValidSortConfigs(destinationSortConfigs);\n      var allowSort = this.hot.runHooks('beforeColumnSort', currentSortConfig, destinationSortConfigs, sortPossible);\n\n      if (allowSort === false) {\n        return;\n      }\n\n      if (currentSortConfig.length === 0 && this.indexesSequenceCache === null) {\n        this.indexesSequenceCache = this.hot.rowIndexMapper.registerMap(this.pluginKey, new IndexesSequence());\n        this.indexesSequenceCache.setValues(this.hot.rowIndexMapper.getIndexesSequence());\n      }\n\n      if (sortPossible) {\n        this.columnStatesManager.setSortStates(destinationSortConfigs);\n        this.sortByPresetSortStates(destinationSortConfigs);\n        this.saveAllSortSettings(destinationSortConfigs);\n      }\n\n      this.hot.runHooks('afterColumnSort', currentSortConfig, sortPossible ? destinationSortConfigs : currentSortConfig, sortPossible);\n\n      if (sortPossible) {\n        this.hot.render(); // TODO: Workaround? This triggers fast redraw. One test won't pass after removal.\n        // It should be refactored / described.\n\n        this.hot.forceFullRender = false;\n        this.hot.view.render();\n      }\n    }\n    /**\n     * Clear the sort performed on the table.\n     */\n\n  }, {\n    key: \"clearSort\",\n    value: function clearSort() {\n      this.sort([]);\n    }\n    /**\n     * Checks if the table is sorted (any column have to be sorted).\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isSorted\",\n    value: function isSorted() {\n      return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();\n    }\n    /**\n     * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.\n     *\n     * @param {number} [column] Visual column index.\n     * @returns {undefined|object|Array}\n     */\n\n  }, {\n    key: \"getSortConfig\",\n    value: function getSortConfig(column) {\n      if (isDefined(column)) {\n        return this.columnStatesManager.getColumnSortState(column);\n      }\n\n      return this.columnStatesManager.getSortStates();\n    }\n    /**\n     * @description\n     * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.\n     * Note: Please keep in mind that this method doesn't re-render the table.\n     *\n     * @example\n     * ```js\n     * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {\n     *   const columnSortPlugin = this.getPlugin('columnSorting');\n     *\n     *   columnSortPlugin.setSortConfig(destinationSortConfigs);\n     *\n     *   // const newData = ... // Calculated data set, ie. from an AJAX call.\n     *\n     *   this.loadData(newData); // Load new data set and re-render the table.\n     *\n     *   return false; // The blockade for the default sort action.\n     * }\n     * ```\n     *\n     * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     */\n\n  }, {\n    key: \"setSortConfig\",\n    value: function setSortConfig(sortConfig) {\n      // We always set configs defined as an array.\n      var destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n\n      if (this.areValidSortConfigs(destinationSortConfigs)) {\n        this.columnStatesManager.setSortStates(destinationSortConfigs);\n      }\n    }\n    /**\n     * Get normalized sort configs.\n     *\n     * @private\n     * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).\n     * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n     * sort order (`asc` for ascending, `desc` for descending).\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getNormalizedSortConfigs\",\n    value: function getNormalizedSortConfigs() {\n      var sortConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (Array.isArray(sortConfig)) {\n        return sortConfig.slice(0, 1);\n      }\n\n      return [sortConfig];\n    }\n    /**\n     * Get if sort configs are valid.\n     *\n     * @private\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"areValidSortConfigs\",\n    value: function areValidSortConfigs(sortConfigs) {\n      var numberOfColumns = this.hot.countCols(); // We don't translate visual indexes to physical indexes.\n\n      return areValidSortStates(sortConfigs) && sortConfigs.every(function (_ref) {\n        var column = _ref.column;\n        return column <= numberOfColumns && column >= 0;\n      });\n    }\n    /**\n     * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.\n     *\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     *\n     * @private\n     * @fires Hooks#persistentStateSave\n     */\n\n  }, {\n    key: \"saveAllSortSettings\",\n    value: function saveAllSortSettings(sortConfigs) {\n      var _this4 = this;\n\n      var allSortSettings = this.columnStatesManager.getAllColumnsProperties();\n\n      var translateColumnToPhysical = function translateColumnToPhysical(_ref2) {\n        var visualColumn = _ref2.column,\n            restOfProperties = _objectWithoutProperties(_ref2, _excluded);\n\n        return _objectSpread({\n          column: _this4.hot.toPhysicalColumn(visualColumn)\n        }, restOfProperties);\n      };\n\n      allSortSettings.initialConfig = arrayMap(sortConfigs, translateColumnToPhysical);\n      this.hot.runHooks('persistentStateSave', 'columnSorting', allSortSettings);\n    }\n    /**\n     * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.\n     *\n     * @private\n     * @returns {object} Previously saved sort settings.\n     *\n     * @fires Hooks#persistentStateLoad\n     */\n\n  }, {\n    key: \"getAllSavedSortSettings\",\n    value: function getAllSavedSortSettings() {\n      var _this5 = this;\n\n      var storedAllSortSettings = {};\n      this.hot.runHooks('persistentStateLoad', 'columnSorting', storedAllSortSettings);\n      var allSortSettings = storedAllSortSettings.value;\n\n      var translateColumnToVisual = function translateColumnToVisual(_ref3) {\n        var physicalColumn = _ref3.column,\n            restOfProperties = _objectWithoutProperties(_ref3, _excluded2);\n\n        return _objectSpread({\n          column: _this5.hot.toVisualColumn(physicalColumn)\n        }, restOfProperties);\n      };\n\n      if (isDefined(allSortSettings) && Array.isArray(allSortSettings.initialConfig)) {\n        allSortSettings.initialConfig = arrayMap(allSortSettings.initialConfig, translateColumnToVisual);\n      }\n\n      return allSortSettings;\n    }\n    /**\n     * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @returns {undefined|object}\n     */\n\n  }, {\n    key: \"getColumnNextConfig\",\n    value: function getColumnNextConfig(column) {\n      var sortOrder = this.columnStatesManager.getSortOrderOfColumn(column);\n\n      if (isDefined(sortOrder)) {\n        var nextSortOrder = getNextSortOrder(sortOrder);\n\n        if (isDefined(nextSortOrder)) {\n          return {\n            column: column,\n            sortOrder: nextSortOrder\n          };\n        }\n\n        return;\n      }\n\n      var nrOfColumns = this.hot.countCols();\n\n      if (Number.isInteger(column) && column >= 0 && column < nrOfColumns) {\n        return {\n          column: column,\n          sortOrder: getNextSortOrder()\n        };\n      }\n    }\n    /**\n     * Get sort configuration with \"next order\" for particular column.\n     *\n     * @private\n     * @param {number} columnToChange Visual column index of column which order will be changed.\n     * @param {string} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one\n     * change order of particular column and change it's position in the sort queue to the last one. The second one\n     * just change order of particular column.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getNextSortConfig\",\n    value: function getNextSortConfig(columnToChange) {\n      var strategyId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APPEND_COLUMN_CONFIG_STRATEGY;\n      var indexOfColumnToChange = this.columnStatesManager.getIndexOfColumnInSortQueue(columnToChange);\n      var isColumnSorted = indexOfColumnToChange !== -1;\n      var currentSortConfig = this.getSortConfig();\n      var nextColumnConfig = this.getColumnNextConfig(columnToChange);\n\n      if (isColumnSorted) {\n        if (isUndefined(nextColumnConfig)) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n\n        if (strategyId === APPEND_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)), [nextColumnConfig]);\n        } else if (strategyId === REPLACE_COLUMN_CONFIG_STRATEGY) {\n          return [].concat(_toConsumableArray(currentSortConfig.slice(0, indexOfColumnToChange)), [nextColumnConfig], _toConsumableArray(currentSortConfig.slice(indexOfColumnToChange + 1)));\n        }\n      }\n\n      if (isDefined(nextColumnConfig)) {\n        return currentSortConfig.concat(nextColumnConfig);\n      }\n\n      return currentSortConfig;\n    }\n    /**\n     * Get plugin's column config for the specified column index.\n     *\n     * @private\n     * @param {object} columnConfig Configuration inside `columns` property for the specified column index.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getPluginColumnConfig\",\n    value: function getPluginColumnConfig(columnConfig) {\n      if (isObject(columnConfig)) {\n        var pluginColumnConfig = columnConfig[this.pluginKey];\n\n        if (isObject(pluginColumnConfig)) {\n          return pluginColumnConfig;\n        }\n      }\n\n      return {};\n    }\n    /**\n     * Get plugin settings related properties, properly merged from cascade settings.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getMergedPluginSettings\",\n    value: function getMergedPluginSettings(column) {\n      var pluginMainSettings = this.hot.getSettings()[this.pluginKey];\n      var storedColumnProperties = this.columnStatesManager.getAllColumnsProperties();\n      var cellMeta = this.hot.getCellMeta(0, column);\n      var columnMeta = Object.getPrototypeOf(cellMeta);\n\n      if (Array.isArray(columnMeta.columns)) {\n        return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns[column]));\n      } else if (isFunction(columnMeta.columns)) {\n        return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns(column)));\n      }\n\n      return Object.assign(storedColumnProperties, pluginMainSettings);\n    }\n    /**\n     * Get copy of settings for first cell in the column.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @returns {object}\n     */\n    // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from column meta we call this function.\n    // TODO: Remove test named: \"should not break the dataset when inserted new row\" (#5431).\n\n  }, {\n    key: \"getFirstCellSettings\",\n    value: function getFirstCellSettings(column) {\n      var cellMeta = this.hot.getCellMeta(0, column);\n      var cellMetaCopy = Object.create(cellMeta);\n      cellMetaCopy[this.pluginKey] = this.columnMetaCache.getValueAtIndex(this.hot.toPhysicalColumn(column));\n      return cellMetaCopy;\n    }\n    /**\n     * Get number of rows which should be sorted.\n     *\n     * @private\n     * @param {number} numberOfRows Total number of displayed rows.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getNumberOfRowsToSort\",\n    value: function getNumberOfRowsToSort(numberOfRows) {\n      var settings = this.hot.getSettings(); // `maxRows` option doesn't take into account `minSpareRows` option in this case.\n\n      if (settings.maxRows <= numberOfRows) {\n        return settings.maxRows;\n      }\n\n      return numberOfRows - settings.minSpareRows;\n    }\n    /**\n     * Performs the sorting using a stable sort function basing on internal state of sorting.\n     *\n     * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n     * @private\n     */\n\n  }, {\n    key: \"sortByPresetSortStates\",\n    value: function sortByPresetSortStates(sortConfigs) {\n      var _this6 = this;\n\n      if (sortConfigs.length === 0) {\n        this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());\n        return;\n      }\n\n      var indexesWithData = [];\n      var numberOfRows = this.hot.countRows();\n\n      var getDataForSortedColumns = function getDataForSortedColumns(visualRowIndex) {\n        return arrayMap(sortConfigs, function (sortConfig) {\n          return _this6.hot.getDataAtCell(visualRowIndex, sortConfig.column);\n        });\n      };\n\n      for (var visualRowIndex = 0; visualRowIndex < this.getNumberOfRowsToSort(numberOfRows); visualRowIndex += 1) {\n        indexesWithData.push([this.hot.toPhysicalRow(visualRowIndex)].concat(getDataForSortedColumns(visualRowIndex)));\n      }\n\n      var indexesBefore = arrayMap(indexesWithData, function (indexWithData) {\n        return indexWithData[0];\n      });\n      sort(indexesWithData, this.pluginKey, arrayMap(sortConfigs, function (sortConfig) {\n        return sortConfig.sortOrder;\n      }), arrayMap(sortConfigs, function (sortConfig) {\n        return _this6.getFirstCellSettings(sortConfig.column);\n      })); // Append spareRows\n\n      for (var _visualRowIndex = indexesWithData.length; _visualRowIndex < numberOfRows; _visualRowIndex += 1) {\n        indexesWithData.push([_visualRowIndex].concat(getDataForSortedColumns(_visualRowIndex)));\n      }\n\n      var indexesAfter = arrayMap(indexesWithData, function (indexWithData) {\n        return indexWithData[0];\n      });\n      var indexMapping = new Map(arrayMap(indexesBefore, function (indexBefore, indexInsideArray) {\n        return [indexBefore, indexesAfter[indexInsideArray]];\n      }));\n      var newIndexesSequence = arrayMap(this.hot.rowIndexMapper.getIndexesSequence(), function (physicalIndex) {\n        if (indexMapping.has(physicalIndex)) {\n          return indexMapping.get(physicalIndex);\n        }\n\n        return physicalIndex;\n      });\n      this.hot.rowIndexMapper.setIndexesSequence(newIndexesSequence);\n    }\n    /**\n     * Load saved settings or sort by predefined plugin configuration.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"loadOrSortBySettings\",\n    value: function loadOrSortBySettings() {\n      var storedAllSortSettings = this.getAllSavedSortSettings();\n\n      if (isObject(storedAllSortSettings)) {\n        this.sortBySettings(storedAllSortSettings);\n      } else {\n        var allSortSettings = this.hot.getSettings()[this.pluginKey];\n        this.sortBySettings(allSortSettings);\n      }\n    }\n    /**\n     * Sort the table by provided configuration.\n     *\n     * @private\n     * @param {object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,\n     * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.\n     */\n\n  }, {\n    key: \"sortBySettings\",\n    value: function sortBySettings(allSortSettings) {\n      if (isObject(allSortSettings)) {\n        this.columnStatesManager.updateAllColumnsProperties(allSortSettings);\n        var initialConfig = allSortSettings.initialConfig;\n\n        if (Array.isArray(initialConfig) || isObject(initialConfig)) {\n          this.sort(initialConfig);\n        }\n      } else {\n        // Extra render for headers. Their width may change.\n        this.hot.render();\n      }\n    }\n    /**\n     * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.\n     *\n     * @private\n     * @param {number} column Visual column index.\n     * @param {Element} TH TH HTML element.\n     */\n\n  }, {\n    key: \"onAfterGetColHeader\",\n    value: function onAfterGetColHeader(column, TH) {\n      var headerSpanElement = getHeaderSpanElement(TH);\n\n      if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n        return;\n      }\n\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var showSortIndicator = pluginSettingsForColumn.indicator;\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      this.updateHeaderClasses(headerSpanElement, this.columnStatesManager, column, showSortIndicator, headerActionEnabled);\n    }\n    /**\n     * Update header classes.\n     *\n     * @private\n     * @param {HTMLElement} headerSpanElement Header span element.\n     * @param {...*} args Extra arguments for helpers.\n     */\n\n  }, {\n    key: \"updateHeaderClasses\",\n    value: function updateHeaderClasses(headerSpanElement) {\n      removeClass(headerSpanElement, getClassesToRemove(headerSpanElement));\n\n      if (this.enabled !== false) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        addClass(headerSpanElement, getClassesToAdd.apply(void 0, args));\n      }\n    }\n    /**\n     * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called\n     * for `updateSettings` in specific situations.\n     *\n     * @private\n     * @param {object} newSettings New settings object.\n     */\n\n  }, {\n    key: \"onUpdateSettings\",\n    value: function onUpdateSettings(newSettings) {\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"onUpdateSettings\", this).call(this);\n\n      if (this.columnMetaCache !== null) {\n        // Column meta cache base on settings, thus we should re-init the map.\n        this.columnMetaCache.init(this.hot.columnIndexMapper.getNumberOfIndexes());\n      }\n\n      if (isDefined(newSettings[this.pluginKey])) {\n        this.sortBySettings(newSettings[this.pluginKey]);\n      }\n    }\n    /**\n     * Callback for the `afterLoadData` hook.\n     *\n     * @private\n     * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.\n     */\n\n  }, {\n    key: \"onAfterLoadData\",\n    value: function onAfterLoadData(initialLoad) {\n      if (initialLoad === true) {\n        // TODO: Workaround? It should be refactored / described.\n        if (this.hot.view) {\n          this.loadOrSortBySettings();\n        }\n      }\n    }\n    /**\n     * Indicates if clickable header was clicked.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {number} column Visual column index.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"wasClickableHeaderClicked\",\n    value: function wasClickableHeaderClicked(event, column) {\n      var pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n      var headerActionEnabled = pluginSettingsForColumn.headerAction;\n      return headerActionEnabled && event.target.nodeName === 'SPAN';\n    }\n    /**\n     * Changes the behavior of selection / dragging.\n     *\n     * @private\n     * @param {MouseEvent} event The `mousedown` event.\n     * @param {CellCoords} coords Visual coordinates.\n     * @param {HTMLElement} TD The cell element.\n     * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains\n     *                            a boolean value that allows or disallows changing the selection for that particular area.\n     */\n\n  }, {\n    key: \"onBeforeOnCellMouseDown\",\n    value: function onBeforeOnCellMouseDown(event, coords, TD, controller) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n\n      if (this.wasClickableHeaderClicked(event, coords.col) && isPressedCtrlKey()) {\n        controller.column = true;\n      }\n    }\n    /**\n     * Callback for the `onAfterOnCellMouseDown` hook.\n     *\n     * @private\n     * @param {Event} event Event which are provided by hook.\n     * @param {CellCoords} coords Visual coords of the selected cell.\n     */\n\n  }, {\n    key: \"onAfterOnCellMouseDown\",\n    value: function onAfterOnCellMouseDown(event, coords) {\n      if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n        return;\n      }\n\n      if (this.wasClickableHeaderClicked(event, coords.col)) {\n        if (isPressedCtrlKey()) {\n          this.hot.deselectCell();\n          this.hot.selectColumns(coords.col);\n        }\n\n        this.sort(this.getColumnNextConfig(coords.col));\n      }\n    }\n    /**\n     * Destroys the plugin instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this$columnStatesMan;\n\n      // TODO: Probably not supported yet by ESLint: https://github.com/eslint/eslint/issues/11045\n      // eslint-disable-next-line no-unused-expressions\n      (_this$columnStatesMan = this.columnStatesManager) === null || _this$columnStatesMan === void 0 ? void 0 : _this$columnStatesMan.destroy();\n\n      _get(_getPrototypeOf(ColumnSorting.prototype), \"destroy\", this).call(this);\n    }\n  }], [{\n    key: \"PLUGIN_KEY\",\n    get: function get() {\n      return PLUGIN_KEY;\n    }\n  }, {\n    key: \"PLUGIN_PRIORITY\",\n    get: function get() {\n      return PLUGIN_PRIORITY;\n    }\n  }]);\n\n  return ColumnSorting;\n}(BasePlugin);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
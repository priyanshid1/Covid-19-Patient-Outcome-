{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport { CellCoords, CellRange } from \"../../../3rdparty/walkontable/src/index.mjs\";\n/**\n * Class responsible for all of the Selection-related operations on merged cells.\n *\n * @private\n * @class SelectionCalculations\n */\n\nvar SelectionCalculations = /*#__PURE__*/function () {\n  function SelectionCalculations(plugin) {\n    _classCallCheck(this, SelectionCalculations);\n\n    /**\n     * Reference to the Merge Cells plugin.\n     *\n     * @type {MergeCells}\n     */\n    this.plugin = plugin;\n    /**\n     * Class name used for fully selected merged cells.\n     *\n     * @type {string}\n     */\n\n    this.fullySelectedMergedCellClassName = 'fullySelectedMergedCell';\n  }\n  /**\n   * \"Snap\" the delta value according to defined merged cells. (In other words, compensate the rowspan -\n   * e.g. Going up with `delta.row = -1` over a merged cell with `rowspan = 3`, `delta.row` should change to `-3`.).\n   *\n   * @param {object} delta The delta object containing `row` and `col` properties.\n   * @param {CellRange} selectionRange The selection range.\n   * @param {object} mergedCell A merged cell object.\n   */\n\n  _createClass(SelectionCalculations, [{\n    key: \"snapDelta\",\n    value: function snapDelta(delta, selectionRange, mergedCell) {\n      var cellCoords = selectionRange.to;\n      var newRow = cellCoords.row + delta.row;\n      var newColumn = cellCoords.col + delta.col;\n      if (delta.row) {\n        this.jumpOverMergedCell(delta, mergedCell, newRow);\n      } else if (delta.col) {\n        this.jumpOverMergedCell(delta, mergedCell, newColumn);\n      }\n    }\n    /**\n     * \"Jump\" over the merged cell (compensate for the indexes within the merged cell to get past it).\n     *\n     * @private\n     * @param {object} delta The delta object.\n     * @param {MergedCellCoords} mergedCell The merge cell object.\n     * @param {number} newIndex New row/column index, created with the delta.\n     */\n  }, {\n    key: \"jumpOverMergedCell\",\n    value: function jumpOverMergedCell(delta, mergedCell, newIndex) {\n      var flatDelta = delta.row || delta.col;\n      var includesIndex = null;\n      var firstIndex = null;\n      var lastIndex = null;\n      if (delta.row) {\n        includesIndex = mergedCell.includesVertically(newIndex);\n        firstIndex = mergedCell.row;\n        lastIndex = mergedCell.getLastRow();\n      } else if (delta.col) {\n        includesIndex = mergedCell.includesHorizontally(newIndex);\n        firstIndex = mergedCell.col;\n        lastIndex = mergedCell.getLastColumn();\n      }\n      if (flatDelta === 0) {\n        return;\n      } else if (flatDelta > 0) {\n        if (includesIndex && newIndex !== firstIndex) {\n          flatDelta += lastIndex - newIndex + 1;\n        }\n      } else if (includesIndex && newIndex !== lastIndex) {\n        flatDelta -= newIndex - firstIndex + 1;\n      }\n      if (delta.row) {\n        delta.row = flatDelta;\n      } else if (delta.col) {\n        delta.col = flatDelta;\n      }\n    }\n    /**\n     * Get a selection range with `to` property incremented by the provided delta.\n     *\n     * @param {CellRange} oldSelectionRange The base selection range.\n     * @param {object} delta The delta object with `row` and `col` properties.\n     * @returns {CellRange} A new `CellRange` object.\n     */\n  }, {\n    key: \"getUpdatedSelectionRange\",\n    value: function getUpdatedSelectionRange(oldSelectionRange, delta) {\n      return new CellRange(oldSelectionRange.highlight, oldSelectionRange.from, new CellCoords(oldSelectionRange.to.row + delta.row, oldSelectionRange.to.col + delta.col));\n    }\n    /**\n     * Generate an additional class name for the entirely-selected merged cells.\n     *\n     * @param {number} currentRow Visual row index of the currently processed cell.\n     * @param {number} currentColumn Visual column index of the currently cell.\n     * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.\n     * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.\n     * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently processed cell.\n     */\n  }, {\n    key: \"getSelectedMergedCellClassName\",\n    value: function getSelectedMergedCellClassName(currentRow, currentColumn, cornersOfSelection, layerLevel) {\n      var startRow = Math.min(cornersOfSelection[0], cornersOfSelection[2]);\n      var startColumn = Math.min(cornersOfSelection[1], cornersOfSelection[3]);\n      var endRow = Math.max(cornersOfSelection[0], cornersOfSelection[2]);\n      var endColumn = Math.max(cornersOfSelection[1], cornersOfSelection[3]);\n      if (layerLevel === void 0) {\n        return;\n      }\n      var isFirstRenderableMergedCell = this.plugin.mergedCellsCollection.isFirstRenderableMergedCell(currentRow, currentColumn); // We add extra classes just to the first renderable merged cell.\n\n      if (!isFirstRenderableMergedCell) {\n        return;\n      }\n      var mergedCell = this.plugin.mergedCellsCollection.get(currentRow, currentColumn);\n      if (!mergedCell) {\n        return;\n      }\n      var mergeRowEnd = mergedCell.getLastRow();\n      var mergeColumnEnd = mergedCell.getLastColumn();\n      var fullMergeAreaWithinSelection = startRow <= mergedCell.row && startColumn <= mergedCell.col && endRow >= mergeRowEnd && endColumn >= mergeColumnEnd;\n      if (fullMergeAreaWithinSelection) {\n        return \"\".concat(this.fullySelectedMergedCellClassName, \"-\").concat(layerLevel);\n      } else if (this.plugin.selectionCalculations.isMergeCellFullySelected(mergedCell, this.plugin.hot.getSelectedRange())) {\n        // eslint-disable-line max-len\n        return \"\".concat(this.fullySelectedMergedCellClassName, \"-multiple\");\n      }\n    }\n    /**\n     * Check if the provided merged cell is fully selected (by one or many layers of selection).\n     *\n     * @param {MergedCellCoords} mergedCell The merged cell to be processed.\n     * @param {CellRange[]} selectionRangesArray Array of selection ranges.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isMergeCellFullySelected\",\n    value: function isMergeCellFullySelected(mergedCell, selectionRangesArray) {\n      var mergedCellIndividualCoords = [];\n      if (!selectionRangesArray || !mergedCell) {\n        return false;\n      }\n      for (var r = 0; r < mergedCell.rowspan; r += 1) {\n        for (var c = 0; c < mergedCell.colspan; c += 1) {\n          mergedCellIndividualCoords.push(new CellCoords(mergedCell.row + r, mergedCell.col + c));\n        }\n      }\n      for (var i = 0; i < mergedCellIndividualCoords.length; i += 1) {\n        var insideSelections = [];\n        for (var s = 0; s < selectionRangesArray.length; s += 1) {\n          insideSelections[s] = selectionRangesArray[s].includes(mergedCellIndividualCoords[i]);\n        }\n        if (!insideSelections.includes(true)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    /**\n     * Generate an array of the entirely-selected merged cells' class names.\n     *\n     * @returns {string[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.\n     */\n  }, {\n    key: \"getSelectedMergedCellClassNameToRemove\",\n    value: function getSelectedMergedCellClassNameToRemove() {\n      var classNames = [];\n      for (var i = 0; i <= 7; i += 1) {\n        classNames.push(\"\".concat(this.fullySelectedMergedCellClassName, \"-\").concat(i));\n      }\n      classNames.push(\"\".concat(this.fullySelectedMergedCellClassName, \"-multiple\"));\n      return classNames;\n    }\n  }]);\n  return SelectionCalculations;\n}();\nexport default SelectionCalculations;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","CellCoords","CellRange","SelectionCalculations","plugin","fullySelectedMergedCellClassName","value","snapDelta","delta","selectionRange","mergedCell","cellCoords","to","newRow","row","newColumn","col","jumpOverMergedCell","newIndex","flatDelta","includesIndex","firstIndex","lastIndex","includesVertically","getLastRow","includesHorizontally","getLastColumn","getUpdatedSelectionRange","oldSelectionRange","highlight","from","getSelectedMergedCellClassName","currentRow","currentColumn","cornersOfSelection","layerLevel","startRow","Math","min","startColumn","endRow","max","endColumn","isFirstRenderableMergedCell","mergedCellsCollection","get","mergeRowEnd","mergeColumnEnd","fullMergeAreaWithinSelection","concat","selectionCalculations","isMergeCellFullySelected","hot","getSelectedRange","selectionRangesArray","mergedCellIndividualCoords","r","rowspan","c","colspan","push","insideSelections","s","includes","getSelectedMergedCellClassNameToRemove","classNames"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/plugins/mergeCells/calculations/selection.mjs"],"sourcesContent":["import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { CellCoords, CellRange } from \"../../../3rdparty/walkontable/src/index.mjs\";\n/**\n * Class responsible for all of the Selection-related operations on merged cells.\n *\n * @private\n * @class SelectionCalculations\n */\n\nvar SelectionCalculations = /*#__PURE__*/function () {\n  function SelectionCalculations(plugin) {\n    _classCallCheck(this, SelectionCalculations);\n\n    /**\n     * Reference to the Merge Cells plugin.\n     *\n     * @type {MergeCells}\n     */\n    this.plugin = plugin;\n    /**\n     * Class name used for fully selected merged cells.\n     *\n     * @type {string}\n     */\n\n    this.fullySelectedMergedCellClassName = 'fullySelectedMergedCell';\n  }\n  /**\n   * \"Snap\" the delta value according to defined merged cells. (In other words, compensate the rowspan -\n   * e.g. Going up with `delta.row = -1` over a merged cell with `rowspan = 3`, `delta.row` should change to `-3`.).\n   *\n   * @param {object} delta The delta object containing `row` and `col` properties.\n   * @param {CellRange} selectionRange The selection range.\n   * @param {object} mergedCell A merged cell object.\n   */\n\n\n  _createClass(SelectionCalculations, [{\n    key: \"snapDelta\",\n    value: function snapDelta(delta, selectionRange, mergedCell) {\n      var cellCoords = selectionRange.to;\n      var newRow = cellCoords.row + delta.row;\n      var newColumn = cellCoords.col + delta.col;\n\n      if (delta.row) {\n        this.jumpOverMergedCell(delta, mergedCell, newRow);\n      } else if (delta.col) {\n        this.jumpOverMergedCell(delta, mergedCell, newColumn);\n      }\n    }\n    /**\n     * \"Jump\" over the merged cell (compensate for the indexes within the merged cell to get past it).\n     *\n     * @private\n     * @param {object} delta The delta object.\n     * @param {MergedCellCoords} mergedCell The merge cell object.\n     * @param {number} newIndex New row/column index, created with the delta.\n     */\n\n  }, {\n    key: \"jumpOverMergedCell\",\n    value: function jumpOverMergedCell(delta, mergedCell, newIndex) {\n      var flatDelta = delta.row || delta.col;\n      var includesIndex = null;\n      var firstIndex = null;\n      var lastIndex = null;\n\n      if (delta.row) {\n        includesIndex = mergedCell.includesVertically(newIndex);\n        firstIndex = mergedCell.row;\n        lastIndex = mergedCell.getLastRow();\n      } else if (delta.col) {\n        includesIndex = mergedCell.includesHorizontally(newIndex);\n        firstIndex = mergedCell.col;\n        lastIndex = mergedCell.getLastColumn();\n      }\n\n      if (flatDelta === 0) {\n        return;\n      } else if (flatDelta > 0) {\n        if (includesIndex && newIndex !== firstIndex) {\n          flatDelta += lastIndex - newIndex + 1;\n        }\n      } else if (includesIndex && newIndex !== lastIndex) {\n        flatDelta -= newIndex - firstIndex + 1;\n      }\n\n      if (delta.row) {\n        delta.row = flatDelta;\n      } else if (delta.col) {\n        delta.col = flatDelta;\n      }\n    }\n    /**\n     * Get a selection range with `to` property incremented by the provided delta.\n     *\n     * @param {CellRange} oldSelectionRange The base selection range.\n     * @param {object} delta The delta object with `row` and `col` properties.\n     * @returns {CellRange} A new `CellRange` object.\n     */\n\n  }, {\n    key: \"getUpdatedSelectionRange\",\n    value: function getUpdatedSelectionRange(oldSelectionRange, delta) {\n      return new CellRange(oldSelectionRange.highlight, oldSelectionRange.from, new CellCoords(oldSelectionRange.to.row + delta.row, oldSelectionRange.to.col + delta.col));\n    }\n    /**\n     * Generate an additional class name for the entirely-selected merged cells.\n     *\n     * @param {number} currentRow Visual row index of the currently processed cell.\n     * @param {number} currentColumn Visual column index of the currently cell.\n     * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.\n     * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.\n     * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently processed cell.\n     */\n\n  }, {\n    key: \"getSelectedMergedCellClassName\",\n    value: function getSelectedMergedCellClassName(currentRow, currentColumn, cornersOfSelection, layerLevel) {\n      var startRow = Math.min(cornersOfSelection[0], cornersOfSelection[2]);\n      var startColumn = Math.min(cornersOfSelection[1], cornersOfSelection[3]);\n      var endRow = Math.max(cornersOfSelection[0], cornersOfSelection[2]);\n      var endColumn = Math.max(cornersOfSelection[1], cornersOfSelection[3]);\n\n      if (layerLevel === void 0) {\n        return;\n      }\n\n      var isFirstRenderableMergedCell = this.plugin.mergedCellsCollection.isFirstRenderableMergedCell(currentRow, currentColumn); // We add extra classes just to the first renderable merged cell.\n\n      if (!isFirstRenderableMergedCell) {\n        return;\n      }\n\n      var mergedCell = this.plugin.mergedCellsCollection.get(currentRow, currentColumn);\n\n      if (!mergedCell) {\n        return;\n      }\n\n      var mergeRowEnd = mergedCell.getLastRow();\n      var mergeColumnEnd = mergedCell.getLastColumn();\n      var fullMergeAreaWithinSelection = startRow <= mergedCell.row && startColumn <= mergedCell.col && endRow >= mergeRowEnd && endColumn >= mergeColumnEnd;\n\n      if (fullMergeAreaWithinSelection) {\n        return \"\".concat(this.fullySelectedMergedCellClassName, \"-\").concat(layerLevel);\n      } else if (this.plugin.selectionCalculations.isMergeCellFullySelected(mergedCell, this.plugin.hot.getSelectedRange())) {\n        // eslint-disable-line max-len\n        return \"\".concat(this.fullySelectedMergedCellClassName, \"-multiple\");\n      }\n    }\n    /**\n     * Check if the provided merged cell is fully selected (by one or many layers of selection).\n     *\n     * @param {MergedCellCoords} mergedCell The merged cell to be processed.\n     * @param {CellRange[]} selectionRangesArray Array of selection ranges.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isMergeCellFullySelected\",\n    value: function isMergeCellFullySelected(mergedCell, selectionRangesArray) {\n      var mergedCellIndividualCoords = [];\n\n      if (!selectionRangesArray || !mergedCell) {\n        return false;\n      }\n\n      for (var r = 0; r < mergedCell.rowspan; r += 1) {\n        for (var c = 0; c < mergedCell.colspan; c += 1) {\n          mergedCellIndividualCoords.push(new CellCoords(mergedCell.row + r, mergedCell.col + c));\n        }\n      }\n\n      for (var i = 0; i < mergedCellIndividualCoords.length; i += 1) {\n        var insideSelections = [];\n\n        for (var s = 0; s < selectionRangesArray.length; s += 1) {\n          insideSelections[s] = selectionRangesArray[s].includes(mergedCellIndividualCoords[i]);\n        }\n\n        if (!insideSelections.includes(true)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n    /**\n     * Generate an array of the entirely-selected merged cells' class names.\n     *\n     * @returns {string[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.\n     */\n\n  }, {\n    key: \"getSelectedMergedCellClassNameToRemove\",\n    value: function getSelectedMergedCellClassNameToRemove() {\n      var classNames = [];\n\n      for (var i = 0; i <= 7; i += 1) {\n        classNames.push(\"\".concat(this.fullySelectedMergedCellClassName, \"-\").concat(i));\n      }\n\n      classNames.push(\"\".concat(this.fullySelectedMergedCellClassName, \"-multiple\"));\n      return classNames;\n    }\n  }]);\n\n  return SelectionCalculations;\n}();\n\nexport default SelectionCalculations;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
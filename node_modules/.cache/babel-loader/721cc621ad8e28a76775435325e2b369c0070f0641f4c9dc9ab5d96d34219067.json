{"ast":null,"code":"function _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport { CellCoords } from \"./3rdparty/walkontable/src/index.mjs\";\nimport { KEY_CODES, isFunctionKey, isCtrlMetaKey } from \"./helpers/unicode.mjs\";\nimport { stopImmediatePropagation, isImmediatePropagationStopped } from \"./helpers/dom/event.mjs\";\nimport { getEditorInstance } from \"./editors/registry.mjs\";\nimport EventManager from \"./eventManager.mjs\";\nimport { EDITOR_STATE } from \"./editors/baseEditor/index.mjs\";\nimport { getParentWindow } from \"./helpers/dom/element.mjs\";\nvar EditorManager = /*#__PURE__*/function () {\n  /**\n   * @param {Core} instance The Handsontable instance.\n   * @param {TableMeta} tableMeta The table meta instance.\n   * @param {Selection} selection The selection instance.\n   */\n  function EditorManager(instance, tableMeta, selection) {\n    var _this = this;\n    _classCallCheck(this, EditorManager);\n\n    /**\n     * Instance of {@link Handsontable}.\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    this.instance = instance;\n    /**\n     * Reference to an instance's private GridSettings object.\n     *\n     * @private\n     * @type {GridSettings}\n     */\n\n    this.tableMeta = tableMeta;\n    /**\n     * Instance of {@link Selection}.\n     *\n     * @private\n     * @type {Selection}\n     */\n\n    this.selection = selection;\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n\n    this.eventManager = new EventManager(instance);\n    /**\n     * Determines if EditorManager is destroyed.\n     *\n     * @private\n     * @type {boolean}\n     */\n\n    this.destroyed = false;\n    /**\n     * Determines if EditorManager is locked.\n     *\n     * @private\n     * @type {boolean}\n     */\n\n    this.lock = false;\n    /**\n     * A reference to an instance of the activeEditor.\n     *\n     * @private\n     * @type {BaseEditor}\n     */\n\n    this.activeEditor = void 0;\n    /**\n     * Keeps a reference to the cell's properties object.\n     *\n     * @type {object}\n     */\n\n    this.cellProperties = void 0;\n    /**\n     * Keeps last keyCode pressed from the keydown event.\n     *\n     * @type {number}\n     */\n\n    this.lastKeyCode = void 0;\n    this.instance.addHook('afterDocumentKeyDown', function (event) {\n      return _this.onAfterDocumentKeyDown(event);\n    });\n    var frame = this.instance.rootWindow;\n    while (frame) {\n      this.eventManager.addEventListener(frame.document.documentElement, 'keydown', function (event) {\n        if (!_this.destroyed) {\n          _this.instance.runHooks('afterDocumentKeyDown', event);\n        }\n      });\n      frame = getParentWindow(frame);\n    } // Open editor when text composition is started (IME editor)\n\n    this.eventManager.addEventListener(this.instance.rootDocument.documentElement, 'compositionstart', function (event) {\n      if (!_this.destroyed && _this.activeEditor && !_this.activeEditor.isOpened() && _this.instance.isListening()) {\n        _this.openEditor('', event);\n      }\n    });\n    this.instance.view.wt.update('onCellDblClick', function (event, coords, elem) {\n      return _this.onCellDblClick(event, coords, elem);\n    });\n  }\n  /**\n   * Lock the editor from being prepared and closed. Locking the editor prevents its closing and\n   * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.\n   */\n\n  _createClass(EditorManager, [{\n    key: \"lockEditor\",\n    value: function lockEditor() {\n      this.lock = true;\n    }\n    /**\n     * Unlock the editor from being prepared and closed. This method restores the original behavior of\n     * the editors where for every new selection its instances are closed.\n     */\n  }, {\n    key: \"unlockEditor\",\n    value: function unlockEditor() {\n      this.lock = false;\n    }\n    /**\n     * Destroy current editor, if exists.\n     *\n     * @param {boolean} revertOriginal If `false` and the cell using allowInvalid option,\n     *                                 then an editor won't be closed until validation is passed.\n     */\n  }, {\n    key: \"destroyEditor\",\n    value: function destroyEditor(revertOriginal) {\n      if (!this.lock) {\n        this.closeEditor(revertOriginal);\n      }\n    }\n    /**\n     * Get active editor.\n     *\n     * @returns {BaseEditor}\n     */\n  }, {\n    key: \"getActiveEditor\",\n    value: function getActiveEditor() {\n      return this.activeEditor;\n    }\n    /**\n     * Prepare text input to be displayed at given grid cell.\n     */\n  }, {\n    key: \"prepareEditor\",\n    value: function prepareEditor() {\n      var _this2 = this;\n      if (this.lock) {\n        return;\n      }\n      if (this.activeEditor && this.activeEditor.isWaiting()) {\n        this.closeEditor(false, false, function (dataSaved) {\n          if (dataSaved) {\n            _this2.prepareEditor();\n          }\n        });\n        return;\n      }\n      var _this$instance$select = this.instance.selection.selectedRange.current().highlight,\n        row = _this$instance$select.row,\n        col = _this$instance$select.col;\n      var modifiedCellCoords = this.instance.runHooks('modifyGetCellCoords', row, col);\n      var visualRowToCheck = row;\n      var visualColumnToCheck = col;\n      if (Array.isArray(modifiedCellCoords)) {\n        var _modifiedCellCoords = _slicedToArray(modifiedCellCoords, 2);\n        visualRowToCheck = _modifiedCellCoords[0];\n        visualColumnToCheck = _modifiedCellCoords[1];\n      } // Getting values using the modified coordinates.\n\n      this.cellProperties = this.instance.getCellMeta(visualRowToCheck, visualColumnToCheck);\n      var activeElement = this.instance.rootDocument.activeElement;\n      if (activeElement) {\n        // Bluring the activeElement removes unwanted border around the focusable element\n        // (and resets activeElement prop). Without blurring the activeElement points to the\n        // previously focusable element after clicking onto the cell (#6877).\n        activeElement.blur();\n      }\n      if (this.cellProperties.readOnly) {\n        this.clearActiveEditor();\n        return;\n      }\n      var editorClass = this.instance.getCellEditor(this.cellProperties); // Getting element using coordinates from the selection.\n\n      var td = this.instance.getCell(row, col, true);\n      if (editorClass && td) {\n        var prop = this.instance.colToProp(visualColumnToCheck);\n        var originalValue = this.instance.getSourceDataAtCell(this.instance.toPhysicalRow(visualRowToCheck), visualColumnToCheck);\n        this.activeEditor = getEditorInstance(editorClass, this.instance); // Using not modified coordinates, as we need to get the table element using selection coordinates.\n        // There is an extra translation in the editor for saving value.\n\n        this.activeEditor.prepare(row, col, prop, td, originalValue, this.cellProperties);\n      } else {\n        this.clearActiveEditor();\n      }\n    }\n    /**\n     * Check is editor is opened/showed.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      return this.activeEditor && this.activeEditor.isOpened();\n    }\n    /**\n     * Open editor with initial value.\n     *\n     * @param {null|string} newInitialValue New value from which editor will start if handled property it's not the `null`.\n     * @param {Event} event The event object.\n     */\n  }, {\n    key: \"openEditor\",\n    value: function openEditor(newInitialValue, event) {\n      if (!this.activeEditor) {\n        return;\n      }\n      this.activeEditor.beginEditing(newInitialValue, event);\n    }\n    /**\n     * Close editor, finish editing cell.\n     *\n     * @param {boolean} restoreOriginalValue If `true`, then closes editor without saving value from the editor into a cell.\n     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.\n     * @param {Function} callback The callback function, fired after editor closing.\n     */\n  }, {\n    key: \"closeEditor\",\n    value: function closeEditor(restoreOriginalValue, isCtrlPressed, callback) {\n      if (this.activeEditor) {\n        this.activeEditor.finishEditing(restoreOriginalValue, isCtrlPressed, callback);\n      } else if (callback) {\n        callback(false);\n      }\n    }\n    /**\n     * Close editor and save changes.\n     *\n     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.\n     */\n  }, {\n    key: \"closeEditorAndSaveChanges\",\n    value: function closeEditorAndSaveChanges(isCtrlPressed) {\n      this.closeEditor(false, isCtrlPressed);\n    }\n    /**\n     * Close editor and restore original value.\n     *\n     * @param {boolean} isCtrlPressed Indication of whether the CTRL button is pressed.\n     */\n  }, {\n    key: \"closeEditorAndRestoreOriginalValue\",\n    value: function closeEditorAndRestoreOriginalValue(isCtrlPressed) {\n      this.closeEditor(true, isCtrlPressed);\n    }\n    /**\n     * Clears reference to an instance of the active editor.\n     *\n     * @private\n     */\n  }, {\n    key: \"clearActiveEditor\",\n    value: function clearActiveEditor() {\n      this.activeEditor = void 0;\n    }\n    /**\n     * Controls selection's behaviour after clicking `Enter`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will move up after hit enter.\n     */\n  }, {\n    key: \"moveSelectionAfterEnter\",\n    value: function moveSelectionAfterEnter(isShiftPressed) {\n      var enterMoves = typeof this.tableMeta.enterMoves === 'function' ? this.tableMeta.enterMoves(event) : this.tableMeta.enterMoves;\n      if (isShiftPressed) {\n        // move selection up\n        this.selection.transformStart(-enterMoves.row, -enterMoves.col);\n      } else {\n        // move selection down (add a new row if needed)\n        this.selection.transformStart(enterMoves.row, enterMoves.col, true);\n      }\n    }\n    /**\n     * Controls selection behaviour after clicking `arrow up`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand up.\n     */\n  }, {\n    key: \"moveSelectionUp\",\n    value: function moveSelectionUp(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(-1, 0);\n      } else {\n        this.selection.transformStart(-1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow down`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand down.\n     */\n  }, {\n    key: \"moveSelectionDown\",\n    value: function moveSelectionDown(isShiftPressed) {\n      if (isShiftPressed) {\n        // expanding selection down with shift\n        this.selection.transformEnd(1, 0);\n      } else {\n        this.selection.transformStart(1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow right`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand right.\n     */\n  }, {\n    key: \"moveSelectionRight\",\n    value: function moveSelectionRight(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, this.instance.getDirectionFactor());\n      } else {\n        this.selection.transformStart(0, this.instance.getDirectionFactor());\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow left`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand left.\n     */\n  }, {\n    key: \"moveSelectionLeft\",\n    value: function moveSelectionLeft(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, -1 * this.instance.getDirectionFactor());\n      } else {\n        this.selection.transformStart(0, -1 * this.instance.getDirectionFactor());\n      }\n    }\n    /**\n     * OnAfterDocumentKeyDown callback.\n     *\n     * @private\n     * @param {KeyboardEvent} event The keyboard event object.\n     */\n  }, {\n    key: \"onAfterDocumentKeyDown\",\n    value: function onAfterDocumentKeyDown(event) {\n      if (!this.instance.isListening()) {\n        return;\n      }\n      this.instance.runHooks('beforeKeyDown', event);\n      var keyCode = event.keyCode; // keyCode 229 aka 'uninitialized' doesn't take into account with editors. This key code is produced when unfinished\n      // character is entering (using IME editor). It is fired mainly on linux (ubuntu) with installed ibus-pinyin package.\n\n      if (this.destroyed || keyCode === 229) {\n        return;\n      }\n      if (isImmediatePropagationStopped(event)) {\n        return;\n      }\n      this.lastKeyCode = keyCode;\n      if (!this.selection.isSelected()) {\n        return;\n      } // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)\n\n      var isCtrlPressed = (event.ctrlKey || event.metaKey) && !event.altKey;\n      if (this.activeEditor && !this.activeEditor.isWaiting()) {\n        if (!isFunctionKey(keyCode) && !isCtrlMetaKey(keyCode) && !isCtrlPressed && !this.isEditorOpened()) {\n          this.openEditor('', event);\n          return;\n        }\n      }\n      var isShiftPressed = event.shiftKey;\n      var rangeModifier = isShiftPressed ? this.selection.setRangeEnd : this.selection.setRangeStart;\n      var tabMoves;\n      switch (keyCode) {\n        case KEY_CODES.A:\n          if (!this.isEditorOpened() && isCtrlPressed) {\n            this.instance.selectAll();\n            event.preventDefault();\n            event.stopPropagation();\n          }\n          break;\n        case KEY_CODES.ARROW_UP:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n          this.moveSelectionUp(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n        case KEY_CODES.ARROW_DOWN:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n          this.moveSelectionDown(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n        case KEY_CODES.ARROW_RIGHT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n          this.moveSelectionRight(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n        case KEY_CODES.ARROW_LEFT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n          this.moveSelectionLeft(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n        case KEY_CODES.TAB:\n          tabMoves = typeof this.tableMeta.tabMoves === 'function' ? this.tableMeta.tabMoves(event) : this.tableMeta.tabMoves;\n          if (isShiftPressed) {\n            // move selection left\n            this.selection.transformStart(-tabMoves.row, -tabMoves.col);\n          } else {\n            // move selection right (add a new column if needed)\n            this.selection.transformStart(tabMoves.row, tabMoves.col, true);\n          }\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n        case KEY_CODES.BACKSPACE:\n        case KEY_CODES.DELETE:\n          this.instance.emptySelectedCells();\n          this.prepareEditor();\n          event.preventDefault();\n          break;\n        case KEY_CODES.F2:\n          /* F2 */\n          if (this.activeEditor) {\n            this.activeEditor.enableFullEditMode();\n          }\n          this.openEditor(null, event);\n          event.preventDefault(); // prevent Opera from opening 'Go to Page dialog'\n\n          break;\n        case KEY_CODES.ENTER:\n          /* return/enter */\n          if (this.isEditorOpened()) {\n            if (this.activeEditor && this.activeEditor.state !== EDITOR_STATE.WAITING) {\n              this.closeEditorAndSaveChanges(isCtrlPressed);\n            }\n            this.moveSelectionAfterEnter(isShiftPressed);\n          } else if (this.instance.getSettings().enterBeginsEditing) {\n            if (this.cellProperties.readOnly) {\n              this.moveSelectionAfterEnter();\n            } else if (this.activeEditor) {\n              this.activeEditor.enableFullEditMode();\n              this.openEditor(null, event);\n            }\n          } else {\n            this.moveSelectionAfterEnter(isShiftPressed);\n          }\n          event.preventDefault(); // don't add newline to field\n\n          stopImmediatePropagation(event); // required by HandsontableEditor\n\n          break;\n        case KEY_CODES.ESCAPE:\n          if (this.isEditorOpened()) {\n            this.closeEditorAndRestoreOriginalValue(isCtrlPressed);\n            this.activeEditor.focus();\n          }\n          event.preventDefault();\n          break;\n        case KEY_CODES.HOME:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(this.instance.rowIndexMapper.getFirstNotHiddenIndex(0, 1), this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, this.instance.columnIndexMapper.getFirstNotHiddenIndex(0, 1)));\n          }\n          event.preventDefault(); // don't scroll the window\n\n          event.stopPropagation();\n          break;\n        case KEY_CODES.END:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(this.instance.rowIndexMapper.getFirstNotHiddenIndex(this.instance.countRows() - 1, -1), this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, this.instance.columnIndexMapper.getFirstNotHiddenIndex(this.instance.countCols() - 1, -1)));\n          }\n          event.preventDefault(); // don't scroll the window\n\n          event.stopPropagation();\n          break;\n        case KEY_CODES.PAGE_UP:\n          this.selection.transformStart(-this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page up the window\n\n          event.stopPropagation();\n          break;\n        case KEY_CODES.PAGE_DOWN:\n          this.selection.transformStart(this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page down the window\n\n          event.stopPropagation();\n          break;\n        default:\n          break;\n      }\n    }\n    /**\n     * OnCellDblClick callback.\n     *\n     * @private\n     * @param {MouseEvent} event The mouse event object.\n     * @param {object} coords The cell coordinates.\n     * @param {HTMLTableCellElement|HTMLTableHeaderCellElement} elem The element which triggers the action.\n     */\n  }, {\n    key: \"onCellDblClick\",\n    value: function onCellDblClick(event, coords, elem) {\n      // may be TD or TH\n      if (elem.nodeName === 'TD') {\n        if (this.activeEditor) {\n          this.activeEditor.enableFullEditMode();\n        }\n        this.openEditor(null, event);\n      }\n    }\n    /**\n     * Destroy the instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.eventManager.destroy();\n    }\n  }]);\n  return EditorManager;\n}();\nvar instances = new WeakMap();\n/**\n * @param {Core} hotInstance The Handsontable instance.\n * @param {TableMeta} tableMeta The table meta class instance.\n * @param {Selection} selection The selection instance.\n * @returns {EditorManager}\n */\n\nEditorManager.getInstance = function (hotInstance, tableMeta, selection) {\n  var editorManager = instances.get(hotInstance);\n  if (!editorManager) {\n    editorManager = new EditorManager(hotInstance, tableMeta, selection);\n    instances.set(hotInstance, editorManager);\n  }\n  return editorManager;\n};\nexport default EditorManager;","map":{"version":3,"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","CellCoords","KEY_CODES","isFunctionKey","isCtrlMetaKey","stopImmediatePropagation","isImmediatePropagationStopped","getEditorInstance","EventManager","EDITOR_STATE","getParentWindow","EditorManager","tableMeta","selection","_this","eventManager","destroyed","lock","activeEditor","cellProperties","lastKeyCode","addHook","event","onAfterDocumentKeyDown","frame","rootWindow","addEventListener","document","documentElement","runHooks","rootDocument","isOpened","isListening","openEditor","view","wt","update","coords","elem","onCellDblClick","lockEditor","unlockEditor","destroyEditor","revertOriginal","closeEditor","getActiveEditor","prepareEditor","_this2","isWaiting","dataSaved","_this$instance$select","selectedRange","current","highlight","row","col","modifiedCellCoords","visualRowToCheck","visualColumnToCheck","_modifiedCellCoords","getCellMeta","activeElement","blur","readOnly","clearActiveEditor","editorClass","getCellEditor","td","getCell","prop","colToProp","originalValue","getSourceDataAtCell","toPhysicalRow","prepare","isEditorOpened","newInitialValue","beginEditing","restoreOriginalValue","isCtrlPressed","callback","finishEditing","closeEditorAndSaveChanges","closeEditorAndRestoreOriginalValue","moveSelectionAfterEnter","isShiftPressed","enterMoves","transformStart","moveSelectionUp","transformEnd","moveSelectionDown","moveSelectionRight","getDirectionFactor","moveSelectionLeft","keyCode","isSelected","ctrlKey","metaKey","altKey","shiftKey","rangeModifier","setRangeEnd","setRangeStart","tabMoves","A","selectAll","preventDefault","stopPropagation","ARROW_UP","ARROW_DOWN","ARROW_RIGHT","ARROW_LEFT","TAB","BACKSPACE","DELETE","emptySelectedCells","F2","enableFullEditMode","ENTER","state","WAITING","getSettings","enterBeginsEditing","ESCAPE","focus","HOME","rowIndexMapper","getFirstNotHiddenIndex","columnIndexMapper","END","countRows","countCols","PAGE_UP","countVisibleRows","PAGE_DOWN","nodeName","destroy","instances","WeakMap","getInstance","hotInstance","editorManager","get","set"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/editorManager.mjs"],"sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { CellCoords } from \"./3rdparty/walkontable/src/index.mjs\";\nimport { KEY_CODES, isFunctionKey, isCtrlMetaKey } from \"./helpers/unicode.mjs\";\nimport { stopImmediatePropagation, isImmediatePropagationStopped } from \"./helpers/dom/event.mjs\";\nimport { getEditorInstance } from \"./editors/registry.mjs\";\nimport EventManager from \"./eventManager.mjs\";\nimport { EDITOR_STATE } from \"./editors/baseEditor/index.mjs\";\nimport { getParentWindow } from \"./helpers/dom/element.mjs\";\n\nvar EditorManager = /*#__PURE__*/function () {\n  /**\n   * @param {Core} instance The Handsontable instance.\n   * @param {TableMeta} tableMeta The table meta instance.\n   * @param {Selection} selection The selection instance.\n   */\n  function EditorManager(instance, tableMeta, selection) {\n    var _this = this;\n\n    _classCallCheck(this, EditorManager);\n\n    /**\n     * Instance of {@link Handsontable}.\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    this.instance = instance;\n    /**\n     * Reference to an instance's private GridSettings object.\n     *\n     * @private\n     * @type {GridSettings}\n     */\n\n    this.tableMeta = tableMeta;\n    /**\n     * Instance of {@link Selection}.\n     *\n     * @private\n     * @type {Selection}\n     */\n\n    this.selection = selection;\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n\n    this.eventManager = new EventManager(instance);\n    /**\n     * Determines if EditorManager is destroyed.\n     *\n     * @private\n     * @type {boolean}\n     */\n\n    this.destroyed = false;\n    /**\n     * Determines if EditorManager is locked.\n     *\n     * @private\n     * @type {boolean}\n     */\n\n    this.lock = false;\n    /**\n     * A reference to an instance of the activeEditor.\n     *\n     * @private\n     * @type {BaseEditor}\n     */\n\n    this.activeEditor = void 0;\n    /**\n     * Keeps a reference to the cell's properties object.\n     *\n     * @type {object}\n     */\n\n    this.cellProperties = void 0;\n    /**\n     * Keeps last keyCode pressed from the keydown event.\n     *\n     * @type {number}\n     */\n\n    this.lastKeyCode = void 0;\n    this.instance.addHook('afterDocumentKeyDown', function (event) {\n      return _this.onAfterDocumentKeyDown(event);\n    });\n    var frame = this.instance.rootWindow;\n\n    while (frame) {\n      this.eventManager.addEventListener(frame.document.documentElement, 'keydown', function (event) {\n        if (!_this.destroyed) {\n          _this.instance.runHooks('afterDocumentKeyDown', event);\n        }\n      });\n      frame = getParentWindow(frame);\n    } // Open editor when text composition is started (IME editor)\n\n\n    this.eventManager.addEventListener(this.instance.rootDocument.documentElement, 'compositionstart', function (event) {\n      if (!_this.destroyed && _this.activeEditor && !_this.activeEditor.isOpened() && _this.instance.isListening()) {\n        _this.openEditor('', event);\n      }\n    });\n    this.instance.view.wt.update('onCellDblClick', function (event, coords, elem) {\n      return _this.onCellDblClick(event, coords, elem);\n    });\n  }\n  /**\n   * Lock the editor from being prepared and closed. Locking the editor prevents its closing and\n   * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.\n   */\n\n\n  _createClass(EditorManager, [{\n    key: \"lockEditor\",\n    value: function lockEditor() {\n      this.lock = true;\n    }\n    /**\n     * Unlock the editor from being prepared and closed. This method restores the original behavior of\n     * the editors where for every new selection its instances are closed.\n     */\n\n  }, {\n    key: \"unlockEditor\",\n    value: function unlockEditor() {\n      this.lock = false;\n    }\n    /**\n     * Destroy current editor, if exists.\n     *\n     * @param {boolean} revertOriginal If `false` and the cell using allowInvalid option,\n     *                                 then an editor won't be closed until validation is passed.\n     */\n\n  }, {\n    key: \"destroyEditor\",\n    value: function destroyEditor(revertOriginal) {\n      if (!this.lock) {\n        this.closeEditor(revertOriginal);\n      }\n    }\n    /**\n     * Get active editor.\n     *\n     * @returns {BaseEditor}\n     */\n\n  }, {\n    key: \"getActiveEditor\",\n    value: function getActiveEditor() {\n      return this.activeEditor;\n    }\n    /**\n     * Prepare text input to be displayed at given grid cell.\n     */\n\n  }, {\n    key: \"prepareEditor\",\n    value: function prepareEditor() {\n      var _this2 = this;\n\n      if (this.lock) {\n        return;\n      }\n\n      if (this.activeEditor && this.activeEditor.isWaiting()) {\n        this.closeEditor(false, false, function (dataSaved) {\n          if (dataSaved) {\n            _this2.prepareEditor();\n          }\n        });\n        return;\n      }\n\n      var _this$instance$select = this.instance.selection.selectedRange.current().highlight,\n          row = _this$instance$select.row,\n          col = _this$instance$select.col;\n      var modifiedCellCoords = this.instance.runHooks('modifyGetCellCoords', row, col);\n      var visualRowToCheck = row;\n      var visualColumnToCheck = col;\n\n      if (Array.isArray(modifiedCellCoords)) {\n        var _modifiedCellCoords = _slicedToArray(modifiedCellCoords, 2);\n\n        visualRowToCheck = _modifiedCellCoords[0];\n        visualColumnToCheck = _modifiedCellCoords[1];\n      } // Getting values using the modified coordinates.\n\n\n      this.cellProperties = this.instance.getCellMeta(visualRowToCheck, visualColumnToCheck);\n      var activeElement = this.instance.rootDocument.activeElement;\n\n      if (activeElement) {\n        // Bluring the activeElement removes unwanted border around the focusable element\n        // (and resets activeElement prop). Without blurring the activeElement points to the\n        // previously focusable element after clicking onto the cell (#6877).\n        activeElement.blur();\n      }\n\n      if (this.cellProperties.readOnly) {\n        this.clearActiveEditor();\n        return;\n      }\n\n      var editorClass = this.instance.getCellEditor(this.cellProperties); // Getting element using coordinates from the selection.\n\n      var td = this.instance.getCell(row, col, true);\n\n      if (editorClass && td) {\n        var prop = this.instance.colToProp(visualColumnToCheck);\n        var originalValue = this.instance.getSourceDataAtCell(this.instance.toPhysicalRow(visualRowToCheck), visualColumnToCheck);\n        this.activeEditor = getEditorInstance(editorClass, this.instance); // Using not modified coordinates, as we need to get the table element using selection coordinates.\n        // There is an extra translation in the editor for saving value.\n\n        this.activeEditor.prepare(row, col, prop, td, originalValue, this.cellProperties);\n      } else {\n        this.clearActiveEditor();\n      }\n    }\n    /**\n     * Check is editor is opened/showed.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isEditorOpened\",\n    value: function isEditorOpened() {\n      return this.activeEditor && this.activeEditor.isOpened();\n    }\n    /**\n     * Open editor with initial value.\n     *\n     * @param {null|string} newInitialValue New value from which editor will start if handled property it's not the `null`.\n     * @param {Event} event The event object.\n     */\n\n  }, {\n    key: \"openEditor\",\n    value: function openEditor(newInitialValue, event) {\n      if (!this.activeEditor) {\n        return;\n      }\n\n      this.activeEditor.beginEditing(newInitialValue, event);\n    }\n    /**\n     * Close editor, finish editing cell.\n     *\n     * @param {boolean} restoreOriginalValue If `true`, then closes editor without saving value from the editor into a cell.\n     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.\n     * @param {Function} callback The callback function, fired after editor closing.\n     */\n\n  }, {\n    key: \"closeEditor\",\n    value: function closeEditor(restoreOriginalValue, isCtrlPressed, callback) {\n      if (this.activeEditor) {\n        this.activeEditor.finishEditing(restoreOriginalValue, isCtrlPressed, callback);\n      } else if (callback) {\n        callback(false);\n      }\n    }\n    /**\n     * Close editor and save changes.\n     *\n     * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.\n     */\n\n  }, {\n    key: \"closeEditorAndSaveChanges\",\n    value: function closeEditorAndSaveChanges(isCtrlPressed) {\n      this.closeEditor(false, isCtrlPressed);\n    }\n    /**\n     * Close editor and restore original value.\n     *\n     * @param {boolean} isCtrlPressed Indication of whether the CTRL button is pressed.\n     */\n\n  }, {\n    key: \"closeEditorAndRestoreOriginalValue\",\n    value: function closeEditorAndRestoreOriginalValue(isCtrlPressed) {\n      this.closeEditor(true, isCtrlPressed);\n    }\n    /**\n     * Clears reference to an instance of the active editor.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"clearActiveEditor\",\n    value: function clearActiveEditor() {\n      this.activeEditor = void 0;\n    }\n    /**\n     * Controls selection's behaviour after clicking `Enter`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will move up after hit enter.\n     */\n\n  }, {\n    key: \"moveSelectionAfterEnter\",\n    value: function moveSelectionAfterEnter(isShiftPressed) {\n      var enterMoves = typeof this.tableMeta.enterMoves === 'function' ? this.tableMeta.enterMoves(event) : this.tableMeta.enterMoves;\n\n      if (isShiftPressed) {\n        // move selection up\n        this.selection.transformStart(-enterMoves.row, -enterMoves.col);\n      } else {\n        // move selection down (add a new row if needed)\n        this.selection.transformStart(enterMoves.row, enterMoves.col, true);\n      }\n    }\n    /**\n     * Controls selection behaviour after clicking `arrow up`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand up.\n     */\n\n  }, {\n    key: \"moveSelectionUp\",\n    value: function moveSelectionUp(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(-1, 0);\n      } else {\n        this.selection.transformStart(-1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow down`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand down.\n     */\n\n  }, {\n    key: \"moveSelectionDown\",\n    value: function moveSelectionDown(isShiftPressed) {\n      if (isShiftPressed) {\n        // expanding selection down with shift\n        this.selection.transformEnd(1, 0);\n      } else {\n        this.selection.transformStart(1, 0);\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow right`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand right.\n     */\n\n  }, {\n    key: \"moveSelectionRight\",\n    value: function moveSelectionRight(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, this.instance.getDirectionFactor());\n      } else {\n        this.selection.transformStart(0, this.instance.getDirectionFactor());\n      }\n    }\n    /**\n     * Controls selection's behaviour after clicking `arrow left`.\n     *\n     * @private\n     * @param {boolean} isShiftPressed If `true`, then the selection will expand left.\n     */\n\n  }, {\n    key: \"moveSelectionLeft\",\n    value: function moveSelectionLeft(isShiftPressed) {\n      if (isShiftPressed) {\n        this.selection.transformEnd(0, -1 * this.instance.getDirectionFactor());\n      } else {\n        this.selection.transformStart(0, -1 * this.instance.getDirectionFactor());\n      }\n    }\n    /**\n     * OnAfterDocumentKeyDown callback.\n     *\n     * @private\n     * @param {KeyboardEvent} event The keyboard event object.\n     */\n\n  }, {\n    key: \"onAfterDocumentKeyDown\",\n    value: function onAfterDocumentKeyDown(event) {\n      if (!this.instance.isListening()) {\n        return;\n      }\n\n      this.instance.runHooks('beforeKeyDown', event);\n      var keyCode = event.keyCode; // keyCode 229 aka 'uninitialized' doesn't take into account with editors. This key code is produced when unfinished\n      // character is entering (using IME editor). It is fired mainly on linux (ubuntu) with installed ibus-pinyin package.\n\n      if (this.destroyed || keyCode === 229) {\n        return;\n      }\n\n      if (isImmediatePropagationStopped(event)) {\n        return;\n      }\n\n      this.lastKeyCode = keyCode;\n\n      if (!this.selection.isSelected()) {\n        return;\n      } // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)\n\n\n      var isCtrlPressed = (event.ctrlKey || event.metaKey) && !event.altKey;\n\n      if (this.activeEditor && !this.activeEditor.isWaiting()) {\n        if (!isFunctionKey(keyCode) && !isCtrlMetaKey(keyCode) && !isCtrlPressed && !this.isEditorOpened()) {\n          this.openEditor('', event);\n          return;\n        }\n      }\n\n      var isShiftPressed = event.shiftKey;\n      var rangeModifier = isShiftPressed ? this.selection.setRangeEnd : this.selection.setRangeStart;\n      var tabMoves;\n\n      switch (keyCode) {\n        case KEY_CODES.A:\n          if (!this.isEditorOpened() && isCtrlPressed) {\n            this.instance.selectAll();\n            event.preventDefault();\n            event.stopPropagation();\n          }\n\n          break;\n\n        case KEY_CODES.ARROW_UP:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionUp(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.ARROW_DOWN:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionDown(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.ARROW_RIGHT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionRight(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.ARROW_LEFT:\n          if (this.isEditorOpened() && !this.activeEditor.isWaiting()) {\n            this.closeEditorAndSaveChanges(isCtrlPressed);\n          }\n\n          this.moveSelectionLeft(isShiftPressed);\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.TAB:\n          tabMoves = typeof this.tableMeta.tabMoves === 'function' ? this.tableMeta.tabMoves(event) : this.tableMeta.tabMoves;\n\n          if (isShiftPressed) {\n            // move selection left\n            this.selection.transformStart(-tabMoves.row, -tabMoves.col);\n          } else {\n            // move selection right (add a new column if needed)\n            this.selection.transformStart(tabMoves.row, tabMoves.col, true);\n          }\n\n          event.preventDefault();\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.BACKSPACE:\n        case KEY_CODES.DELETE:\n          this.instance.emptySelectedCells();\n          this.prepareEditor();\n          event.preventDefault();\n          break;\n\n        case KEY_CODES.F2:\n          /* F2 */\n          if (this.activeEditor) {\n            this.activeEditor.enableFullEditMode();\n          }\n\n          this.openEditor(null, event);\n          event.preventDefault(); // prevent Opera from opening 'Go to Page dialog'\n\n          break;\n\n        case KEY_CODES.ENTER:\n          /* return/enter */\n          if (this.isEditorOpened()) {\n            if (this.activeEditor && this.activeEditor.state !== EDITOR_STATE.WAITING) {\n              this.closeEditorAndSaveChanges(isCtrlPressed);\n            }\n\n            this.moveSelectionAfterEnter(isShiftPressed);\n          } else if (this.instance.getSettings().enterBeginsEditing) {\n            if (this.cellProperties.readOnly) {\n              this.moveSelectionAfterEnter();\n            } else if (this.activeEditor) {\n              this.activeEditor.enableFullEditMode();\n              this.openEditor(null, event);\n            }\n          } else {\n            this.moveSelectionAfterEnter(isShiftPressed);\n          }\n\n          event.preventDefault(); // don't add newline to field\n\n          stopImmediatePropagation(event); // required by HandsontableEditor\n\n          break;\n\n        case KEY_CODES.ESCAPE:\n          if (this.isEditorOpened()) {\n            this.closeEditorAndRestoreOriginalValue(isCtrlPressed);\n            this.activeEditor.focus();\n          }\n\n          event.preventDefault();\n          break;\n\n        case KEY_CODES.HOME:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(this.instance.rowIndexMapper.getFirstNotHiddenIndex(0, 1), this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, this.instance.columnIndexMapper.getFirstNotHiddenIndex(0, 1)));\n          }\n\n          event.preventDefault(); // don't scroll the window\n\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.END:\n          if (event.ctrlKey || event.metaKey) {\n            rangeModifier.call(this.selection, new CellCoords(this.instance.rowIndexMapper.getFirstNotHiddenIndex(this.instance.countRows() - 1, -1), this.selection.selectedRange.current().from.col));\n          } else {\n            rangeModifier.call(this.selection, new CellCoords(this.selection.selectedRange.current().from.row, this.instance.columnIndexMapper.getFirstNotHiddenIndex(this.instance.countCols() - 1, -1)));\n          }\n\n          event.preventDefault(); // don't scroll the window\n\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.PAGE_UP:\n          this.selection.transformStart(-this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page up the window\n\n          event.stopPropagation();\n          break;\n\n        case KEY_CODES.PAGE_DOWN:\n          this.selection.transformStart(this.instance.countVisibleRows(), 0);\n          event.preventDefault(); // don't page down the window\n\n          event.stopPropagation();\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\n     * OnCellDblClick callback.\n     *\n     * @private\n     * @param {MouseEvent} event The mouse event object.\n     * @param {object} coords The cell coordinates.\n     * @param {HTMLTableCellElement|HTMLTableHeaderCellElement} elem The element which triggers the action.\n     */\n\n  }, {\n    key: \"onCellDblClick\",\n    value: function onCellDblClick(event, coords, elem) {\n      // may be TD or TH\n      if (elem.nodeName === 'TD') {\n        if (this.activeEditor) {\n          this.activeEditor.enableFullEditMode();\n        }\n\n        this.openEditor(null, event);\n      }\n    }\n    /**\n     * Destroy the instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.destroyed = true;\n      this.eventManager.destroy();\n    }\n  }]);\n\n  return EditorManager;\n}();\n\nvar instances = new WeakMap();\n/**\n * @param {Core} hotInstance The Handsontable instance.\n * @param {TableMeta} tableMeta The table meta class instance.\n * @param {Selection} selection The selection instance.\n * @returns {EditorManager}\n */\n\nEditorManager.getInstance = function (hotInstance, tableMeta, selection) {\n  var editorManager = instances.get(hotInstance);\n\n  if (!editorManager) {\n    editorManager = new EditorManager(hotInstance, tableMeta, selection);\n    instances.set(hotInstance, editorManager);\n  }\n\n  return editorManager;\n};\n\nexport default EditorManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
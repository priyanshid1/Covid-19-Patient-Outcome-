{"ast":null,"code":"import { arrayReduce } from \"../helpers/array.mjs\";\n/**\n * Tags a multiline string and return new one without line break characters and following spaces.\n *\n * @param {Array} strings Parts of the entire string without expressions.\n * @param {...string} expressions Expressions converted to strings, which are added to the entire string.\n * @returns {string}\n */\n\nexport function toSingleLine(strings) {\n  for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    expressions[_key - 1] = arguments[_key];\n  }\n  var result = arrayReduce(strings, function (previousValue, currentValue, index) {\n    var valueWithoutWhiteSpaces = currentValue.replace(/\\r?\\n\\s*/g, '');\n    var expressionForIndex = expressions[index] ? expressions[index] : '';\n    return previousValue + valueWithoutWhiteSpaces + expressionForIndex;\n  }, '');\n  return result.trim();\n}","map":{"version":3,"names":["arrayReduce","toSingleLine","strings","_len","arguments","length","expressions","Array","_key","result","previousValue","currentValue","index","valueWithoutWhiteSpaces","replace","expressionForIndex","trim"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/helpers/templateLiteralTag.mjs"],"sourcesContent":["import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport { arrayReduce } from \"../helpers/array.mjs\";\n/**\n * Tags a multiline string and return new one without line break characters and following spaces.\n *\n * @param {Array} strings Parts of the entire string without expressions.\n * @param {...string} expressions Expressions converted to strings, which are added to the entire string.\n * @returns {string}\n */\n\nexport function toSingleLine(strings) {\n  for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    expressions[_key - 1] = arguments[_key];\n  }\n\n  var result = arrayReduce(strings, function (previousValue, currentValue, index) {\n    var valueWithoutWhiteSpaces = currentValue.replace(/\\r?\\n\\s*/g, '');\n    var expressionForIndex = expressions[index] ? expressions[index] : '';\n    return previousValue + valueWithoutWhiteSpaces + expressionForIndex;\n  }, '');\n  return result.trim();\n}"],"mappings":"AAGA,SAASA,WAAW,QAAQ,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAYA,CAACC,OAAO,EAAE;EACpC,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,WAAW,GAAG,IAAIC,KAAK,CAACJ,IAAI,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;IACjHF,WAAW,CAACE,IAAI,GAAG,CAAC,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;EACzC;EAEA,IAAIC,MAAM,GAAGT,WAAW,CAACE,OAAO,EAAE,UAAUQ,aAAa,EAAEC,YAAY,EAAEC,KAAK,EAAE;IAC9E,IAAIC,uBAAuB,GAAGF,YAAY,CAACG,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;IACnE,IAAIC,kBAAkB,GAAGT,WAAW,CAACM,KAAK,CAAC,GAAGN,WAAW,CAACM,KAAK,CAAC,GAAG,EAAE;IACrE,OAAOF,aAAa,GAAGG,uBAAuB,GAAGE,kBAAkB;EACrE,CAAC,EAAE,EAAE,CAAC;EACN,OAAON,MAAM,CAACO,IAAI,CAAC,CAAC;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
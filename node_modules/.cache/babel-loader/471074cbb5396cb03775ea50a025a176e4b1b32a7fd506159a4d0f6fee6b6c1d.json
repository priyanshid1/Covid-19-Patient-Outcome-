{"ast":null,"code":"import _toConsumableArray from \"/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport { isObject } from \"../../../helpers/object.mjs\";\nimport { stringify } from \"../../../helpers/mixed.mjs\";\nimport { createDefaultHeaderSettings, createPlaceholderHeaderSettings } from \"./utils.mjs\";\n/**\n * A function that normalizes user-defined settings into one predictable\n * structure. Currently, the developer can declare nested headers by passing\n * the following unstructured (and sometimes uncompleted) array.\n *   [\n *     [{ label: 'A1', colspan: 2 }],\n *     [{ label: true }, 'B2', 4],\n *     [],\n *   ]\n *\n * The normalization process equalizes the length of columns to each header\n * layers to the same length and generates object settings with a common shape.\n * So the above mentioned example will be normalized into this:\n *   [\n *     [\n *       { label: 'A1', colspan: 2, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: true, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: 'true', colspan: 1, isHidden: false, ... },\n *       { label: 'B2', colspan: 1, isHidden: false, ... },\n *       { label: '4', colspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: '', colspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *     ],\n *   ]\n *\n * @param {Array[]} sourceSettings An array with defined nested headers settings.\n * @param {number} [columnsLimit=Infinity] A number of columns to which the structure\n *                                         will be trimmed. While trimming the colspan\n *                                         values are adjusted to preserve the original\n *                                         structure.\n * @returns {Array[]}\n */\nexport function normalizeSettings(sourceSettings) {\n  var columnsLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  var normalizedSettings = [];\n  if (columnsLimit === 0) {\n    return normalizedSettings;\n  }\n\n  // Normalize array items (header settings) into one shape - literal object with default props.\n  arrayEach(sourceSettings, function (headersSettings) {\n    var columns = [];\n    var columnIndex = 0;\n    normalizedSettings.push(columns);\n    arrayEach(headersSettings, function (sourceHeaderSettings) {\n      var headerSettings = createDefaultHeaderSettings();\n      if (isObject(sourceHeaderSettings)) {\n        var label = sourceHeaderSettings.label,\n          colspan = sourceHeaderSettings.colspan,\n          headerClassName = sourceHeaderSettings.headerClassName;\n        headerSettings.label = stringify(label);\n        if (typeof colspan === 'number' && colspan > 1) {\n          headerSettings.colspan = colspan;\n          headerSettings.origColspan = colspan;\n        }\n        if (typeof headerClassName === 'string') {\n          headerSettings.headerClassNames = _toConsumableArray(headerClassName.split(' '));\n        }\n      } else {\n        headerSettings.label = stringify(sourceHeaderSettings);\n      }\n      columnIndex += headerSettings.origColspan;\n      var cancelProcessing = false;\n      if (columnIndex >= columnsLimit) {\n        // Adjust the colspan value to not overlap the columns limit.\n        headerSettings.colspan = headerSettings.origColspan - (columnIndex - columnsLimit);\n        headerSettings.origColspan = headerSettings.colspan;\n        cancelProcessing = true;\n      }\n      columns.push(headerSettings);\n      if (headerSettings.colspan > 1) {\n        for (var i = 0; i < headerSettings.colspan - 1; i++) {\n          columns.push(createPlaceholderHeaderSettings());\n        }\n      }\n      return !cancelProcessing;\n    });\n  });\n  var columnsLength = Math.max.apply(Math, _toConsumableArray(arrayMap(normalizedSettings, function (headersSettings) {\n    return headersSettings.length;\n  })));\n\n  // Normalize the length of each header layer to the same columns length.\n  arrayEach(normalizedSettings, function (headersSettings) {\n    if (headersSettings.length < columnsLength) {\n      var defaultSettings = arrayMap(new Array(columnsLength - headersSettings.length), function () {\n        return createDefaultHeaderSettings();\n      });\n      headersSettings.splice.apply(headersSettings, [headersSettings.length, 0].concat(_toConsumableArray(defaultSettings)));\n    }\n  });\n  return normalizedSettings;\n}","map":{"version":3,"names":["arrayEach","arrayMap","isObject","stringify","createDefaultHeaderSettings","createPlaceholderHeaderSettings","normalizeSettings","sourceSettings","columnsLimit","arguments","length","undefined","Infinity","normalizedSettings","headersSettings","columns","columnIndex","push","sourceHeaderSettings","headerSettings","label","colspan","headerClassName","origColspan","headerClassNames","_toConsumableArray","split","cancelProcessing","i","columnsLength","Math","max","apply","defaultSettings","Array","splice","concat"],"sources":["/Users/priyadeliwala/node_modules/handsontable/plugins/nestedHeaders/stateManager/settingsNormalizer.mjs"],"sourcesContent":["import \"core-js/modules/es.array.push.js\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport { isObject } from \"../../../helpers/object.mjs\";\nimport { stringify } from \"../../../helpers/mixed.mjs\";\nimport { createDefaultHeaderSettings, createPlaceholderHeaderSettings } from \"./utils.mjs\";\n/**\n * A function that normalizes user-defined settings into one predictable\n * structure. Currently, the developer can declare nested headers by passing\n * the following unstructured (and sometimes uncompleted) array.\n *   [\n *     [{ label: 'A1', colspan: 2 }],\n *     [{ label: true }, 'B2', 4],\n *     [],\n *   ]\n *\n * The normalization process equalizes the length of columns to each header\n * layers to the same length and generates object settings with a common shape.\n * So the above mentioned example will be normalized into this:\n *   [\n *     [\n *       { label: 'A1', colspan: 2, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: true, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: 'true', colspan: 1, isHidden: false, ... },\n *       { label: 'B2', colspan: 1, isHidden: false, ... },\n *       { label: '4', colspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: '', colspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *     ],\n *   ]\n *\n * @param {Array[]} sourceSettings An array with defined nested headers settings.\n * @param {number} [columnsLimit=Infinity] A number of columns to which the structure\n *                                         will be trimmed. While trimming the colspan\n *                                         values are adjusted to preserve the original\n *                                         structure.\n * @returns {Array[]}\n */\nexport function normalizeSettings(sourceSettings) {\n  let columnsLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  const normalizedSettings = [];\n  if (columnsLimit === 0) {\n    return normalizedSettings;\n  }\n\n  // Normalize array items (header settings) into one shape - literal object with default props.\n  arrayEach(sourceSettings, headersSettings => {\n    const columns = [];\n    let columnIndex = 0;\n    normalizedSettings.push(columns);\n    arrayEach(headersSettings, sourceHeaderSettings => {\n      const headerSettings = createDefaultHeaderSettings();\n      if (isObject(sourceHeaderSettings)) {\n        const {\n          label,\n          colspan,\n          headerClassName\n        } = sourceHeaderSettings;\n        headerSettings.label = stringify(label);\n        if (typeof colspan === 'number' && colspan > 1) {\n          headerSettings.colspan = colspan;\n          headerSettings.origColspan = colspan;\n        }\n        if (typeof headerClassName === 'string') {\n          headerSettings.headerClassNames = [...headerClassName.split(' ')];\n        }\n      } else {\n        headerSettings.label = stringify(sourceHeaderSettings);\n      }\n      columnIndex += headerSettings.origColspan;\n      let cancelProcessing = false;\n      if (columnIndex >= columnsLimit) {\n        // Adjust the colspan value to not overlap the columns limit.\n        headerSettings.colspan = headerSettings.origColspan - (columnIndex - columnsLimit);\n        headerSettings.origColspan = headerSettings.colspan;\n        cancelProcessing = true;\n      }\n      columns.push(headerSettings);\n      if (headerSettings.colspan > 1) {\n        for (let i = 0; i < headerSettings.colspan - 1; i++) {\n          columns.push(createPlaceholderHeaderSettings());\n        }\n      }\n      return !cancelProcessing;\n    });\n  });\n  const columnsLength = Math.max(...arrayMap(normalizedSettings, headersSettings => headersSettings.length));\n\n  // Normalize the length of each header layer to the same columns length.\n  arrayEach(normalizedSettings, headersSettings => {\n    if (headersSettings.length < columnsLength) {\n      const defaultSettings = arrayMap(new Array(columnsLength - headersSettings.length), () => createDefaultHeaderSettings());\n      headersSettings.splice(headersSettings.length, 0, ...defaultSettings);\n    }\n  });\n  return normalizedSettings;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
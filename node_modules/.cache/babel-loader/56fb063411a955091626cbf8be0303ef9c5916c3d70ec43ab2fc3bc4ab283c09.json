{"ast":null,"code":"import { getComparisonFunction } from \"../../helpers/feature.mjs\";\nimport { arrayUnique, arrayEach } from \"../../helpers/array.mjs\";\nvar sortCompare = getComparisonFunction();\n/**\n * Comparison function for sorting purposes.\n *\n * @param {*} a The first value to compare.\n * @param {*} b The second value to compare.\n * @returns {number} Returns number from -1 to 1.\n */\n\nexport function sortComparison(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n  return sortCompare(a, b);\n}\n/**\n * Convert raw value into visual value.\n *\n * @param {*} value The value to convert.\n * @param {string} defaultEmptyValue Default value for empty cells.\n * @returns {*}\n */\n\nexport function toVisualValue(value, defaultEmptyValue) {\n  var visualValue = value;\n  if (visualValue === '') {\n    visualValue = \"(\".concat(defaultEmptyValue, \")\");\n  }\n  return visualValue;\n}\nvar SUPPORT_SET_CONSTRUCTOR = new Set([1]).has(1);\nvar SUPPORT_FAST_DEDUPE = SUPPORT_SET_CONSTRUCTOR && typeof Array.from === 'function';\n/**\n * Create an array assertion to compare if an element exists in that array (in a more efficient way than .indexOf).\n *\n * @param {Array} initialData Values to compare.\n * @returns {Function}\n */\n\nexport function createArrayAssertion(initialData) {\n  var dataset = initialData;\n  if (SUPPORT_SET_CONSTRUCTOR) {\n    dataset = new Set(dataset);\n  }\n  return function (value) {\n    var result;\n    if (SUPPORT_SET_CONSTRUCTOR) {\n      result = dataset.has(value);\n    } else {\n      /* eslint-disable no-bitwise */\n      result = !!~dataset.indexOf(value);\n    }\n    return result;\n  };\n}\n/**\n * Convert empty-ish values like null and undefined to an empty string.\n *\n * @param {*} value Value to check.\n * @returns {string}\n */\n\nexport function toEmptyString(value) {\n  return value === null || value === void 0 ? '' : value;\n}\n/**\n * Unify column values (replace `null` and `undefined` values into empty string, unique values and sort them).\n *\n * @param {Array} values An array of values.\n * @returns {Array}\n */\n\nexport function unifyColumnValues(values) {\n  var unifiedValues = values;\n  if (SUPPORT_FAST_DEDUPE) {\n    unifiedValues = Array.from(new Set(unifiedValues));\n  } else {\n    unifiedValues = arrayUnique(unifiedValues);\n  }\n  unifiedValues = unifiedValues.sort(function (a, b) {\n    if (typeof a === 'number' && typeof b === 'number') {\n      return a - b;\n    }\n    if (a === b) {\n      return 0;\n    }\n    return a > b ? 1 : -1;\n  });\n  return unifiedValues;\n}\n/**\n * Intersect 'base' values with 'selected' values and return an array of object.\n *\n * @param {Array} base An array of base values.\n * @param {Array} selected An array of selected values.\n * @param {string} defaultEmptyValue Default value for empty cells.\n * @param {Function} [callback] A callback function which is invoked for every item in an array.\n * @returns {Array}\n */\n\nexport function intersectValues(base, selected, defaultEmptyValue, callback) {\n  var result = [];\n  var same = base === selected;\n  var selectedItemsAssertion;\n  if (!same) {\n    selectedItemsAssertion = createArrayAssertion(selected);\n  }\n  arrayEach(base, function (value) {\n    var checked = false;\n    if (same || selectedItemsAssertion(value)) {\n      checked = true;\n    }\n    var item = {\n      checked: checked,\n      value: value,\n      visualValue: toVisualValue(value, defaultEmptyValue)\n    };\n    if (callback) {\n      callback(item);\n    }\n    result.push(item);\n  });\n  return result;\n}","map":{"version":3,"names":["getComparisonFunction","arrayUnique","arrayEach","sortCompare","sortComparison","a","b","toVisualValue","value","defaultEmptyValue","visualValue","concat","SUPPORT_SET_CONSTRUCTOR","Set","has","SUPPORT_FAST_DEDUPE","Array","from","createArrayAssertion","initialData","dataset","result","indexOf","toEmptyString","unifyColumnValues","values","unifiedValues","sort","intersectValues","base","selected","callback","same","selectedItemsAssertion","checked","item","push"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/plugins/filters/utils.mjs"],"sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport { getComparisonFunction } from \"../../helpers/feature.mjs\";\nimport { arrayUnique, arrayEach } from \"../../helpers/array.mjs\";\nvar sortCompare = getComparisonFunction();\n/**\n * Comparison function for sorting purposes.\n *\n * @param {*} a The first value to compare.\n * @param {*} b The second value to compare.\n * @returns {number} Returns number from -1 to 1.\n */\n\nexport function sortComparison(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n\n  return sortCompare(a, b);\n}\n/**\n * Convert raw value into visual value.\n *\n * @param {*} value The value to convert.\n * @param {string} defaultEmptyValue Default value for empty cells.\n * @returns {*}\n */\n\nexport function toVisualValue(value, defaultEmptyValue) {\n  var visualValue = value;\n\n  if (visualValue === '') {\n    visualValue = \"(\".concat(defaultEmptyValue, \")\");\n  }\n\n  return visualValue;\n}\nvar SUPPORT_SET_CONSTRUCTOR = new Set([1]).has(1);\nvar SUPPORT_FAST_DEDUPE = SUPPORT_SET_CONSTRUCTOR && typeof Array.from === 'function';\n/**\n * Create an array assertion to compare if an element exists in that array (in a more efficient way than .indexOf).\n *\n * @param {Array} initialData Values to compare.\n * @returns {Function}\n */\n\nexport function createArrayAssertion(initialData) {\n  var dataset = initialData;\n\n  if (SUPPORT_SET_CONSTRUCTOR) {\n    dataset = new Set(dataset);\n  }\n\n  return function (value) {\n    var result;\n\n    if (SUPPORT_SET_CONSTRUCTOR) {\n      result = dataset.has(value);\n    } else {\n      /* eslint-disable no-bitwise */\n      result = !!~dataset.indexOf(value);\n    }\n\n    return result;\n  };\n}\n/**\n * Convert empty-ish values like null and undefined to an empty string.\n *\n * @param {*} value Value to check.\n * @returns {string}\n */\n\nexport function toEmptyString(value) {\n  return value === null || value === void 0 ? '' : value;\n}\n/**\n * Unify column values (replace `null` and `undefined` values into empty string, unique values and sort them).\n *\n * @param {Array} values An array of values.\n * @returns {Array}\n */\n\nexport function unifyColumnValues(values) {\n  var unifiedValues = values;\n\n  if (SUPPORT_FAST_DEDUPE) {\n    unifiedValues = Array.from(new Set(unifiedValues));\n  } else {\n    unifiedValues = arrayUnique(unifiedValues);\n  }\n\n  unifiedValues = unifiedValues.sort(function (a, b) {\n    if (typeof a === 'number' && typeof b === 'number') {\n      return a - b;\n    }\n\n    if (a === b) {\n      return 0;\n    }\n\n    return a > b ? 1 : -1;\n  });\n  return unifiedValues;\n}\n/**\n * Intersect 'base' values with 'selected' values and return an array of object.\n *\n * @param {Array} base An array of base values.\n * @param {Array} selected An array of selected values.\n * @param {string} defaultEmptyValue Default value for empty cells.\n * @param {Function} [callback] A callback function which is invoked for every item in an array.\n * @returns {Array}\n */\n\nexport function intersectValues(base, selected, defaultEmptyValue, callback) {\n  var result = [];\n  var same = base === selected;\n  var selectedItemsAssertion;\n\n  if (!same) {\n    selectedItemsAssertion = createArrayAssertion(selected);\n  }\n\n  arrayEach(base, function (value) {\n    var checked = false;\n\n    if (same || selectedItemsAssertion(value)) {\n      checked = true;\n    }\n\n    var item = {\n      checked: checked,\n      value: value,\n      visualValue: toVisualValue(value, defaultEmptyValue)\n    };\n\n    if (callback) {\n      callback(item);\n    }\n\n    result.push(item);\n  });\n  return result;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
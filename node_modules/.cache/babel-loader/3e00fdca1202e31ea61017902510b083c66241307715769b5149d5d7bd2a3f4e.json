{"ast":null,"code":"import _classCallCheck from \"/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nfunction _classPrivateFieldInitSpec(e, t, a) {\n  _checkPrivateRedeclaration(e, t), t.set(e, a);\n}\nfunction _checkPrivateRedeclaration(e, t) {\n  if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _classPrivateFieldGet(s, a) {\n  return s.get(_assertClassBrand(s, a));\n}\nfunction _classPrivateFieldSet(s, a, r) {\n  return s.set(_assertClassBrand(s, a), r), r;\n}\nfunction _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}\nimport { DEFAULT_COLUMN_WIDTH } from \"../calculator/index.mjs\";\n/**\n * @typedef {object} ColumnStretchingOptions\n * @property {number} totalColumns Total number of columns.\n * @property {Function} columnWidthFn Function that returns the width of the column at a given index (in px).\n * @property {'all' | 'last' | 'none'} stretchMode Stretch mode 'all', 'last' or 'none'.\n * @property {Function} stretchingColumnWidthFn Function that returns the new width of the stretched column.\n */\n/**\n * @class ColumnStretching\n */\nvar _totalTargetWidth = /*#__PURE__*/new WeakMap();\nvar _totalColumns = /*#__PURE__*/new WeakMap();\nvar _stretchingColumnWidthFn = /*#__PURE__*/new WeakMap();\nvar _columnWidthFn = /*#__PURE__*/new WeakMap();\nvar _stretchMode = /*#__PURE__*/new WeakMap();\nexport var ColumnStretching = /*#__PURE__*/function () {\n  /**\n   * @param {ColumnStretchingOptions} options Object with all options specified for column viewport calculation.\n   */\n  function ColumnStretching(_ref) {\n    _classCallCheck(this, ColumnStretching);\n    var totalColumns = _ref.totalColumns,\n      stretchMode = _ref.stretchMode,\n      stretchingColumnWidthFn = _ref.stretchingColumnWidthFn,\n      columnWidthFn = _ref.columnWidthFn;\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"stretchAllRatio\", 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"stretchLastWidth\", 0);\n    /**\n     * @type {number[]}\n     */\n    _defineProperty(this, \"stretchAllColumnsWidth\", []);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _totalTargetWidth, 0);\n    /**\n     * @type {boolean}\n     */\n    _defineProperty(this, \"needVerifyLastColumnWidth\", true);\n    /**\n     * The total number of columns.\n     *\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _totalColumns, function () {\n      return 0;\n    });\n    /**\n     * Function that returns the width of the stretched column at a given index (in px).\n     *\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _stretchingColumnWidthFn, function (width) {\n      return width;\n    });\n    /**\n     * Function that returns the width of the column at a given index (in px).\n     *\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _columnWidthFn, function (width) {\n      return width;\n    });\n    /**\n     * Stretch mode.\n     *\n     * @type {function(): 'all' | 'last' | 'none'}\n     */\n    _classPrivateFieldInitSpec(this, _stretchMode, function () {\n      return 'none';\n    });\n    _classPrivateFieldSet(_totalColumns, this, totalColumns);\n    _classPrivateFieldSet(_stretchMode, this, stretchMode);\n    _classPrivateFieldSet(_stretchingColumnWidthFn, this, stretchingColumnWidthFn !== null && stretchingColumnWidthFn !== void 0 ? stretchingColumnWidthFn : _classPrivateFieldGet(_stretchingColumnWidthFn, this));\n    _classPrivateFieldSet(_columnWidthFn, this, columnWidthFn !== null && columnWidthFn !== void 0 ? columnWidthFn : _classPrivateFieldGet(_columnWidthFn, this));\n  }\n\n  /**\n   * Recalculate columns stretching.\n   *\n   * @param {number} totalWidth The total width of the table.\n   */\n  return _createClass(ColumnStretching, [{\n    key: \"refreshStretching\",\n    value: function refreshStretching(totalWidth) {\n      if (_classPrivateFieldGet(_stretchMode, this).call(this) === 'none') {\n        return;\n      }\n      this.stretchAllRatio = 0;\n      this.stretchAllColumnsWidth = [];\n      this.needVerifyLastColumnWidth = true;\n      this.stretchLastWidth = 0;\n      _classPrivateFieldSet(_totalTargetWidth, this, totalWidth);\n      var sumAll = 0;\n      for (var i = 0; i < _classPrivateFieldGet(_totalColumns, this).call(this); i++) {\n        var columnWidth = this._getColumnWidth(i);\n        var permanentColumnWidth = _classPrivateFieldGet(_stretchingColumnWidthFn, this).call(this, undefined, i);\n        if (typeof permanentColumnWidth === 'number') {\n          totalWidth -= permanentColumnWidth;\n        } else {\n          sumAll += columnWidth;\n        }\n      }\n      var remainingSize = totalWidth - sumAll;\n      if (_classPrivateFieldGet(_stretchMode, this).call(this) === 'all' && remainingSize > 0) {\n        this.stretchAllRatio = totalWidth / sumAll;\n        this.stretchAllColumnsWidth = [];\n        this.needVerifyLastColumnWidth = true;\n      } else if (_classPrivateFieldGet(_stretchMode, this).call(this) === 'last' && totalWidth !== Infinity) {\n        var _columnWidth = this._getColumnWidth(_classPrivateFieldGet(_totalColumns, this).call(this) - 1);\n        var lastColumnWidth = remainingSize + _columnWidth;\n        this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : _columnWidth;\n      }\n    }\n\n    /**\n     * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.\n     *\n     * @param {number} column The visual column index.\n     * @param {number} baseWidth The default column width.\n     * @returns {number|null}\n     */\n  }, {\n    key: \"getStretchedColumnWidth\",\n    value: function getStretchedColumnWidth(column, baseWidth) {\n      var result = null;\n      if (_classPrivateFieldGet(_stretchMode, this).call(this) === 'all' && this.stretchAllRatio !== 0) {\n        result = this._getStretchedAllColumnWidth(column, baseWidth);\n      } else if (_classPrivateFieldGet(_stretchMode, this).call(this) === 'last' && this.stretchLastWidth !== 0) {\n        result = this._getStretchedLastColumnWidth(column);\n      }\n      return result;\n    }\n\n    /**\n     * @param {number} column The visual column index.\n     * @param {number} baseWidth The default column width.\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_getStretchedAllColumnWidth\",\n    value: function _getStretchedAllColumnWidth(column, baseWidth) {\n      var sumRatioWidth = 0;\n      if (!this.stretchAllColumnsWidth[column]) {\n        var stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);\n        var newStretchedWidth = _classPrivateFieldGet(_stretchingColumnWidthFn, this).call(this, stretchedWidth, column);\n        if (newStretchedWidth === undefined) {\n          this.stretchAllColumnsWidth[column] = stretchedWidth;\n        } else {\n          this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;\n        }\n      }\n      if (this.stretchAllColumnsWidth.length === _classPrivateFieldGet(_totalColumns, this).call(this) && this.needVerifyLastColumnWidth) {\n        this.needVerifyLastColumnWidth = false;\n        for (var i = 0; i < this.stretchAllColumnsWidth.length; i++) {\n          sumRatioWidth += this.stretchAllColumnsWidth[i];\n        }\n        if (sumRatioWidth !== _classPrivateFieldGet(_totalTargetWidth, this)) {\n          this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += _classPrivateFieldGet(_totalTargetWidth, this) - sumRatioWidth;\n        }\n      }\n      return this.stretchAllColumnsWidth[column];\n    }\n\n    /**\n     * @param {number} column The visual column index.\n     * @returns {number|null}\n     * @private\n     */\n  }, {\n    key: \"_getStretchedLastColumnWidth\",\n    value: function _getStretchedLastColumnWidth(column) {\n      if (column === _classPrivateFieldGet(_totalColumns, this).call(this) - 1) {\n        return this.stretchLastWidth;\n      }\n      return null;\n    }\n\n    /**\n     * @param {number} column The visual column index.\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_getColumnWidth\",\n    value: function _getColumnWidth(column) {\n      var width = _classPrivateFieldGet(_columnWidthFn, this).call(this, column);\n      if (isNaN(width)) {\n        width = DEFAULT_COLUMN_WIDTH;\n      }\n      return width;\n    }\n  }]);\n}();","map":{"version":3,"names":["_classPrivateFieldInitSpec","e","t","a","_checkPrivateRedeclaration","set","has","TypeError","_defineProperty","r","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","String","Number","_classPrivateFieldGet","s","get","_assertClassBrand","_classPrivateFieldSet","n","arguments","length","DEFAULT_COLUMN_WIDTH","_totalTargetWidth","WeakMap","_totalColumns","_stretchingColumnWidthFn","_columnWidthFn","_stretchMode","ColumnStretching","_ref","_classCallCheck","totalColumns","stretchMode","stretchingColumnWidthFn","columnWidthFn","width","_createClass","key","refreshStretching","totalWidth","stretchAllRatio","stretchAllColumnsWidth","needVerifyLastColumnWidth","stretchLastWidth","sumAll","columnWidth","_getColumnWidth","permanentColumnWidth","undefined","remainingSize","Infinity","lastColumnWidth","getStretchedColumnWidth","column","baseWidth","result","_getStretchedAllColumnWidth","_getStretchedLastColumnWidth","sumRatioWidth","stretchedWidth","Math","round","newStretchedWidth","isNaN"],"sources":["/Users/priyadeliwala/node_modules/handsontable/3rdparty/walkontable/src/utils/columnStretching.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(e, t, a) { _checkPrivateRedeclaration(e, t), t.set(e, a); }\nfunction _checkPrivateRedeclaration(e, t) { if (t.has(e)) throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _classPrivateFieldGet(s, a) { return s.get(_assertClassBrand(s, a)); }\nfunction _classPrivateFieldSet(s, a, r) { return s.set(_assertClassBrand(s, a), r), r; }\nfunction _assertClassBrand(e, t, n) { if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n; throw new TypeError(\"Private element is not present on this object\"); }\nimport { DEFAULT_COLUMN_WIDTH } from \"../calculator/index.mjs\";\n/**\n * @typedef {object} ColumnStretchingOptions\n * @property {number} totalColumns Total number of columns.\n * @property {Function} columnWidthFn Function that returns the width of the column at a given index (in px).\n * @property {'all' | 'last' | 'none'} stretchMode Stretch mode 'all', 'last' or 'none'.\n * @property {Function} stretchingColumnWidthFn Function that returns the new width of the stretched column.\n */\n/**\n * @class ColumnStretching\n */\nvar _totalTargetWidth = /*#__PURE__*/new WeakMap();\nvar _totalColumns = /*#__PURE__*/new WeakMap();\nvar _stretchingColumnWidthFn = /*#__PURE__*/new WeakMap();\nvar _columnWidthFn = /*#__PURE__*/new WeakMap();\nvar _stretchMode = /*#__PURE__*/new WeakMap();\nexport class ColumnStretching {\n  /**\n   * @param {ColumnStretchingOptions} options Object with all options specified for column viewport calculation.\n   */\n  constructor(_ref) {\n    let {\n      totalColumns,\n      stretchMode,\n      stretchingColumnWidthFn,\n      columnWidthFn\n    } = _ref;\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"stretchAllRatio\", 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"stretchLastWidth\", 0);\n    /**\n     * @type {number[]}\n     */\n    _defineProperty(this, \"stretchAllColumnsWidth\", []);\n    /**\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _totalTargetWidth, 0);\n    /**\n     * @type {boolean}\n     */\n    _defineProperty(this, \"needVerifyLastColumnWidth\", true);\n    /**\n     * The total number of columns.\n     *\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _totalColumns, () => 0);\n    /**\n     * Function that returns the width of the stretched column at a given index (in px).\n     *\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _stretchingColumnWidthFn, width => width);\n    /**\n     * Function that returns the width of the column at a given index (in px).\n     *\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _columnWidthFn, width => width);\n    /**\n     * Stretch mode.\n     *\n     * @type {function(): 'all' | 'last' | 'none'}\n     */\n    _classPrivateFieldInitSpec(this, _stretchMode, () => 'none');\n    _classPrivateFieldSet(_totalColumns, this, totalColumns);\n    _classPrivateFieldSet(_stretchMode, this, stretchMode);\n    _classPrivateFieldSet(_stretchingColumnWidthFn, this, stretchingColumnWidthFn !== null && stretchingColumnWidthFn !== void 0 ? stretchingColumnWidthFn : _classPrivateFieldGet(_stretchingColumnWidthFn, this));\n    _classPrivateFieldSet(_columnWidthFn, this, columnWidthFn !== null && columnWidthFn !== void 0 ? columnWidthFn : _classPrivateFieldGet(_columnWidthFn, this));\n  }\n\n  /**\n   * Recalculate columns stretching.\n   *\n   * @param {number} totalWidth The total width of the table.\n   */\n  refreshStretching(totalWidth) {\n    if (_classPrivateFieldGet(_stretchMode, this).call(this) === 'none') {\n      return;\n    }\n    this.stretchAllRatio = 0;\n    this.stretchAllColumnsWidth = [];\n    this.needVerifyLastColumnWidth = true;\n    this.stretchLastWidth = 0;\n    _classPrivateFieldSet(_totalTargetWidth, this, totalWidth);\n    let sumAll = 0;\n    for (let i = 0; i < _classPrivateFieldGet(_totalColumns, this).call(this); i++) {\n      const columnWidth = this._getColumnWidth(i);\n      const permanentColumnWidth = _classPrivateFieldGet(_stretchingColumnWidthFn, this).call(this, undefined, i);\n      if (typeof permanentColumnWidth === 'number') {\n        totalWidth -= permanentColumnWidth;\n      } else {\n        sumAll += columnWidth;\n      }\n    }\n    const remainingSize = totalWidth - sumAll;\n    if (_classPrivateFieldGet(_stretchMode, this).call(this) === 'all' && remainingSize > 0) {\n      this.stretchAllRatio = totalWidth / sumAll;\n      this.stretchAllColumnsWidth = [];\n      this.needVerifyLastColumnWidth = true;\n    } else if (_classPrivateFieldGet(_stretchMode, this).call(this) === 'last' && totalWidth !== Infinity) {\n      const columnWidth = this._getColumnWidth(_classPrivateFieldGet(_totalColumns, this).call(this) - 1);\n      const lastColumnWidth = remainingSize + columnWidth;\n      this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : columnWidth;\n    }\n  }\n\n  /**\n   * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.\n   *\n   * @param {number} column The visual column index.\n   * @param {number} baseWidth The default column width.\n   * @returns {number|null}\n   */\n  getStretchedColumnWidth(column, baseWidth) {\n    let result = null;\n    if (_classPrivateFieldGet(_stretchMode, this).call(this) === 'all' && this.stretchAllRatio !== 0) {\n      result = this._getStretchedAllColumnWidth(column, baseWidth);\n    } else if (_classPrivateFieldGet(_stretchMode, this).call(this) === 'last' && this.stretchLastWidth !== 0) {\n      result = this._getStretchedLastColumnWidth(column);\n    }\n    return result;\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @param {number} baseWidth The default column width.\n   * @returns {number}\n   * @private\n   */\n  _getStretchedAllColumnWidth(column, baseWidth) {\n    let sumRatioWidth = 0;\n    if (!this.stretchAllColumnsWidth[column]) {\n      const stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);\n      const newStretchedWidth = _classPrivateFieldGet(_stretchingColumnWidthFn, this).call(this, stretchedWidth, column);\n      if (newStretchedWidth === undefined) {\n        this.stretchAllColumnsWidth[column] = stretchedWidth;\n      } else {\n        this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;\n      }\n    }\n    if (this.stretchAllColumnsWidth.length === _classPrivateFieldGet(_totalColumns, this).call(this) && this.needVerifyLastColumnWidth) {\n      this.needVerifyLastColumnWidth = false;\n      for (let i = 0; i < this.stretchAllColumnsWidth.length; i++) {\n        sumRatioWidth += this.stretchAllColumnsWidth[i];\n      }\n      if (sumRatioWidth !== _classPrivateFieldGet(_totalTargetWidth, this)) {\n        this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += _classPrivateFieldGet(_totalTargetWidth, this) - sumRatioWidth;\n      }\n    }\n    return this.stretchAllColumnsWidth[column];\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @returns {number|null}\n   * @private\n   */\n  _getStretchedLastColumnWidth(column) {\n    if (column === _classPrivateFieldGet(_totalColumns, this).call(this) - 1) {\n      return this.stretchLastWidth;\n    }\n    return null;\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @returns {number}\n   * @private\n   */\n  _getColumnWidth(column) {\n    let width = _classPrivateFieldGet(_columnWidthFn, this).call(this, column);\n    if (isNaN(width)) {\n      width = DEFAULT_COLUMN_WIDTH;\n    }\n    return width;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
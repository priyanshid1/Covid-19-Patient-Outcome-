{"ast":null,"code":"import EventManager from \"../eventManager.mjs\";\nimport { isCtrlMetaKey, isKey } from \"../helpers/unicode.mjs\";\nvar eventManager = new EventManager();\nvar pressedKeys = new Set();\nvar refCount = 0;\n/**\n * Begins observing keyboard keys states.\n *\n * @param {Document} rootDocument The document owner.\n */\n\nfunction startObserving(rootDocument) {\n  if (refCount === 0) {\n    eventManager.addEventListener(rootDocument, 'keydown', function (event) {\n      if (!pressedKeys.has(event.keyCode)) {\n        pressedKeys.add(event.keyCode);\n      }\n    });\n    eventManager.addEventListener(rootDocument, 'keyup', function (event) {\n      if (pressedKeys.has(event.keyCode)) {\n        pressedKeys.delete(event.keyCode);\n      }\n    });\n    eventManager.addEventListener(rootDocument, 'visibilitychange', function () {\n      if (rootDocument.hidden) {\n        pressedKeys.clear();\n      }\n    });\n    eventManager.addEventListener(rootDocument.defaultView, 'blur', function () {\n      pressedKeys.clear();\n    });\n  }\n  refCount += 1;\n}\n/**\n * Stops observing keyboard keys states and clear all previously saved states.\n */\n\nfunction stopObserving() {\n  if (refCount > 0) {\n    refCount -= 1;\n  }\n  if (refCount === 0) {\n    _resetState();\n  }\n}\n/**\n * Remove all listeners attached to the DOM and clear all previously saved states.\n */\n\nfunction _resetState() {\n  eventManager.clearEvents();\n  pressedKeys.clear();\n  refCount = 0;\n}\n/**\n * Checks if provided keyCode or keyCodes are pressed.\n *\n * @param {string} keyCodes The key codes passed as a string defined in helpers/unicode.js file delimited with '|'.\n * @returns {boolean}\n */\n\nfunction isPressed(keyCodes) {\n  return Array.from(pressedKeys.values()).some(function (_keyCode) {\n    return isKey(_keyCode, keyCodes);\n  });\n}\n/**\n * Checks if ctrl keys are pressed.\n *\n * @returns {boolean}\n */\n\nfunction isPressedCtrlKey() {\n  var values = Array.from(pressedKeys.values());\n  return values.some(function (_keyCode) {\n    return isCtrlMetaKey(_keyCode);\n  });\n}\n/**\n * Returns reference count. Useful for debugging and testing purposes.\n *\n * @returns {number}\n */\n\nfunction _getRefCount() {\n  return refCount;\n}\nexport { _getRefCount, _resetState, isPressed, isPressedCtrlKey, startObserving, stopObserving };","map":{"version":3,"names":["EventManager","isCtrlMetaKey","isKey","eventManager","pressedKeys","Set","refCount","startObserving","rootDocument","addEventListener","event","has","keyCode","add","delete","hidden","clear","defaultView","stopObserving","_resetState","clearEvents","isPressed","keyCodes","Array","from","values","some","_keyCode","isPressedCtrlKey","_getRefCount"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/utils/keyStateObserver.mjs"],"sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport EventManager from \"../eventManager.mjs\";\nimport { isCtrlMetaKey, isKey } from \"../helpers/unicode.mjs\";\nvar eventManager = new EventManager();\nvar pressedKeys = new Set();\nvar refCount = 0;\n/**\n * Begins observing keyboard keys states.\n *\n * @param {Document} rootDocument The document owner.\n */\n\nfunction startObserving(rootDocument) {\n  if (refCount === 0) {\n    eventManager.addEventListener(rootDocument, 'keydown', function (event) {\n      if (!pressedKeys.has(event.keyCode)) {\n        pressedKeys.add(event.keyCode);\n      }\n    });\n    eventManager.addEventListener(rootDocument, 'keyup', function (event) {\n      if (pressedKeys.has(event.keyCode)) {\n        pressedKeys.delete(event.keyCode);\n      }\n    });\n    eventManager.addEventListener(rootDocument, 'visibilitychange', function () {\n      if (rootDocument.hidden) {\n        pressedKeys.clear();\n      }\n    });\n    eventManager.addEventListener(rootDocument.defaultView, 'blur', function () {\n      pressedKeys.clear();\n    });\n  }\n\n  refCount += 1;\n}\n/**\n * Stops observing keyboard keys states and clear all previously saved states.\n */\n\n\nfunction stopObserving() {\n  if (refCount > 0) {\n    refCount -= 1;\n  }\n\n  if (refCount === 0) {\n    _resetState();\n  }\n}\n/**\n * Remove all listeners attached to the DOM and clear all previously saved states.\n */\n\n\nfunction _resetState() {\n  eventManager.clearEvents();\n  pressedKeys.clear();\n  refCount = 0;\n}\n/**\n * Checks if provided keyCode or keyCodes are pressed.\n *\n * @param {string} keyCodes The key codes passed as a string defined in helpers/unicode.js file delimited with '|'.\n * @returns {boolean}\n */\n\n\nfunction isPressed(keyCodes) {\n  return Array.from(pressedKeys.values()).some(function (_keyCode) {\n    return isKey(_keyCode, keyCodes);\n  });\n}\n/**\n * Checks if ctrl keys are pressed.\n *\n * @returns {boolean}\n */\n\n\nfunction isPressedCtrlKey() {\n  var values = Array.from(pressedKeys.values());\n  return values.some(function (_keyCode) {\n    return isCtrlMetaKey(_keyCode);\n  });\n}\n/**\n * Returns reference count. Useful for debugging and testing purposes.\n *\n * @returns {number}\n */\n\n\nfunction _getRefCount() {\n  return refCount;\n}\n\nexport { _getRefCount, _resetState, isPressed, isPressedCtrlKey, startObserving, stopObserving };"],"mappings":"AAMA,OAAOA,YAAY,MAAM,qBAAqB;AAC9C,SAASC,aAAa,EAAEC,KAAK,QAAQ,wBAAwB;AAC7D,IAAIC,YAAY,GAAG,IAAIH,YAAY,CAAC,CAAC;AACrC,IAAII,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC;AAC3B,IAAIC,QAAQ,GAAG,CAAC;AAChB;AACA;AACA;AACA;AACA;;AAEA,SAASC,cAAcA,CAACC,YAAY,EAAE;EACpC,IAAIF,QAAQ,KAAK,CAAC,EAAE;IAClBH,YAAY,CAACM,gBAAgB,CAACD,YAAY,EAAE,SAAS,EAAE,UAAUE,KAAK,EAAE;MACtE,IAAI,CAACN,WAAW,CAACO,GAAG,CAACD,KAAK,CAACE,OAAO,CAAC,EAAE;QACnCR,WAAW,CAACS,GAAG,CAACH,KAAK,CAACE,OAAO,CAAC;MAChC;IACF,CAAC,CAAC;IACFT,YAAY,CAACM,gBAAgB,CAACD,YAAY,EAAE,OAAO,EAAE,UAAUE,KAAK,EAAE;MACpE,IAAIN,WAAW,CAACO,GAAG,CAACD,KAAK,CAACE,OAAO,CAAC,EAAE;QAClCR,WAAW,CAACU,MAAM,CAACJ,KAAK,CAACE,OAAO,CAAC;MACnC;IACF,CAAC,CAAC;IACFT,YAAY,CAACM,gBAAgB,CAACD,YAAY,EAAE,kBAAkB,EAAE,YAAY;MAC1E,IAAIA,YAAY,CAACO,MAAM,EAAE;QACvBX,WAAW,CAACY,KAAK,CAAC,CAAC;MACrB;IACF,CAAC,CAAC;IACFb,YAAY,CAACM,gBAAgB,CAACD,YAAY,CAACS,WAAW,EAAE,MAAM,EAAE,YAAY;MAC1Eb,WAAW,CAACY,KAAK,CAAC,CAAC;IACrB,CAAC,CAAC;EACJ;EAEAV,QAAQ,IAAI,CAAC;AACf;AACA;AACA;AACA;;AAGA,SAASY,aAAaA,CAAA,EAAG;EACvB,IAAIZ,QAAQ,GAAG,CAAC,EAAE;IAChBA,QAAQ,IAAI,CAAC;EACf;EAEA,IAAIA,QAAQ,KAAK,CAAC,EAAE;IAClBa,WAAW,CAAC,CAAC;EACf;AACF;AACA;AACA;AACA;;AAGA,SAASA,WAAWA,CAAA,EAAG;EACrBhB,YAAY,CAACiB,WAAW,CAAC,CAAC;EAC1BhB,WAAW,CAACY,KAAK,CAAC,CAAC;EACnBV,QAAQ,GAAG,CAAC;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASe,SAASA,CAACC,QAAQ,EAAE;EAC3B,OAAOC,KAAK,CAACC,IAAI,CAACpB,WAAW,CAACqB,MAAM,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,UAAUC,QAAQ,EAAE;IAC/D,OAAOzB,KAAK,CAACyB,QAAQ,EAAEL,QAAQ,CAAC;EAClC,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASM,gBAAgBA,CAAA,EAAG;EAC1B,IAAIH,MAAM,GAAGF,KAAK,CAACC,IAAI,CAACpB,WAAW,CAACqB,MAAM,CAAC,CAAC,CAAC;EAC7C,OAAOA,MAAM,CAACC,IAAI,CAAC,UAAUC,QAAQ,EAAE;IACrC,OAAO1B,aAAa,CAAC0B,QAAQ,CAAC;EAChC,CAAC,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASE,YAAYA,CAAA,EAAG;EACtB,OAAOvB,QAAQ;AACjB;AAEA,SAASuB,YAAY,EAAEV,WAAW,EAAEE,SAAS,EAAEO,gBAAgB,EAAErB,cAAc,EAAEW,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
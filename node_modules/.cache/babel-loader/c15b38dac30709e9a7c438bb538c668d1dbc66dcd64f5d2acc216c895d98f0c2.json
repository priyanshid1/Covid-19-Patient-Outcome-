{"ast":null,"code":"var _templateObject, _templateObject2;\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport { arrayEach, arrayMap, arrayReduce } from \"../../helpers/array.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\nimport { getCondition } from \"./conditionRegisterer.mjs\";\nimport { OPERATION_ID as OPERATION_AND } from \"./logicalOperations/conjunction.mjs\";\nimport { operations, getOperationFunc } from \"./logicalOperationRegisterer.mjs\";\nimport { isUndefined } from \"../../helpers/mixed.mjs\";\nimport { LinkedPhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nvar MAP_NAME = 'ConditionCollection.filteringStates';\n/**\n * @private\n * @class ConditionCollection\n */\n\nvar ConditionCollection = /*#__PURE__*/function () {\n  function ConditionCollection(hot) {\n    var isMapRegistrable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    _classCallCheck(this, ConditionCollection);\n\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    this.hot = hot;\n    /**\n     * Indicates whether the internal IndexMap should be registered or not. Generally,\n     * registered Maps responds to the index changes. Within that collection, sometimes\n     * this is not necessary.\n     *\n     * @type {boolean}\n     */\n\n    this.isMapRegistrable = isMapRegistrable;\n    /**\n     * Index map storing filtering states for every column. ConditionCollection write and read to/from this element.\n     *\n     * @type {LinkedPhysicalIndexToValueMap}\n     */\n\n    this.filteringStates = new IndexToValueMap();\n    if (this.isMapRegistrable === true) {\n      this.hot.columnIndexMapper.registerMap(MAP_NAME, this.filteringStates);\n    } else {\n      this.filteringStates.init(this.hot.columnIndexMapper.getNumberOfIndexes());\n    }\n  }\n  /**\n   * Check if condition collection is empty (so no needed to filter data).\n   *\n   * @returns {boolean}\n   */\n\n  _createClass(ConditionCollection, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.getFilteredColumns().length === 0;\n    }\n    /**\n     * Check if value is matched to the criteria of conditions chain.\n     *\n     * @param {object} value Object with `value` and `meta` keys.\n     * @param {number} column The physical column index.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isMatch\",\n    value: function isMatch(value, column) {\n      var _stateForColumn$condi;\n      var stateForColumn = this.filteringStates.getValueAtIndex(column);\n      var conditions = (_stateForColumn$condi = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.conditions) !== null && _stateForColumn$condi !== void 0 ? _stateForColumn$condi : [];\n      var operation = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.operation;\n      return this.isMatchInConditions(conditions, value, operation);\n    }\n    /**\n     * Check if the value is matches the conditions.\n     *\n     * @param {Array} conditions List of conditions.\n     * @param {object} value Object with `value` and `meta` keys.\n     * @param {string} [operationType='conjunction'] Type of conditions operation.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isMatchInConditions\",\n    value: function isMatchInConditions(conditions, value) {\n      var operationType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n      if (conditions.length) {\n        return getOperationFunc(operationType)(conditions, value);\n      }\n      return true;\n    }\n    /**\n     * Add condition to the collection.\n     *\n     * @param {number} column The physical column index.\n     * @param {object} conditionDefinition Object with keys:\n     *  * `command` Object, Command object with condition name as `key` property.\n     *  * `args` Array, Condition arguments.\n     * @param {string} [operation='conjunction'] Type of conditions operation.\n     * @param {number} [position] Position to which condition will be added. When argument is undefined\n     * the condition will be processed as the last condition.\n     * @fires ConditionCollection#beforeAdd\n     * @fires ConditionCollection#afterAdd\n     */\n  }, {\n    key: \"addCondition\",\n    value: function addCondition(column, conditionDefinition) {\n      var operation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n      var position = arguments.length > 3 ? arguments[3] : undefined;\n      var localeForColumn = this.hot.getCellMeta(0, column).locale;\n      var args = arrayMap(conditionDefinition.args, function (v) {\n        return typeof v === 'string' ? v.toLocaleLowerCase(localeForColumn) : v;\n      });\n      var name = conditionDefinition.name || conditionDefinition.command.key;\n      this.runLocalHooks('beforeAdd', column);\n      var columnType = this.getOperation(column);\n      if (columnType) {\n        if (columnType !== operation) {\n          throw Error(toSingleLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"The column of index \", \" has been already applied with a `\", \"` \\n        filter operation. Use `removeConditions` to clear the current conditions and then add new ones. \\n        Mind that you cannot mix different types of operations (for instance, if you use `conjunction`, \\n        use it consequently for a particular column).\"], [\"The column of index \", \" has been already applied with a \\\\`\", \"\\\\`\\\\x20\\n        filter operation. Use \\\\`removeConditions\\\\` to clear the current conditions and then add new ones.\\\\x20\\n        Mind that you cannot mix different types of operations (for instance, if you use \\\\`conjunction\\\\`,\\\\x20\\n        use it consequently for a particular column).\"])), column, columnType));\n        }\n      } else if (isUndefined(operations[operation])) {\n        throw new Error(toSingleLine(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"Unexpected operation named `\", \"`. Possible ones are \\n        `disjunction` and `conjunction`.\"], [\"Unexpected operation named \\\\`\", \"\\\\`. Possible ones are\\\\x20\\n        \\\\`disjunction\\\\` and \\\\`conjunction\\\\`.\"])), operation));\n      }\n      var conditionsForColumn = this.getConditions(column);\n      if (conditionsForColumn.length === 0) {\n        // Create first condition for particular column.\n        this.filteringStates.setValueAtIndex(column, {\n          operation: operation,\n          conditions: [{\n            name: name,\n            args: args,\n            func: getCondition(name, args)\n          }]\n        }, position);\n      } else {\n        // Add next condition for particular column (by reference).\n        conditionsForColumn.push({\n          name: name,\n          args: args,\n          func: getCondition(name, args)\n        });\n      }\n      this.runLocalHooks('afterAdd', column);\n    }\n    /**\n     * Get all added conditions from the collection at specified column index.\n     *\n     * @param {number} column The physical column index.\n     * @returns {Array} Returns conditions collection as an array.\n     */\n  }, {\n    key: \"getConditions\",\n    value: function getConditions(column) {\n      var _this$filteringStates, _this$filteringStates2;\n      return (_this$filteringStates = (_this$filteringStates2 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates2 === void 0 ? void 0 : _this$filteringStates2.conditions) !== null && _this$filteringStates !== void 0 ? _this$filteringStates : [];\n    }\n    /**\n     * Get operation for particular column.\n     *\n     * @param {number} column The physical column index.\n     * @returns {string|undefined}\n     */\n  }, {\n    key: \"getOperation\",\n    value: function getOperation(column) {\n      var _this$filteringStates3;\n      return (_this$filteringStates3 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates3 === void 0 ? void 0 : _this$filteringStates3.operation;\n    }\n    /**\n     * Get all filtered physical columns in the order in which actions are performed.\n     *\n     * @returns {Array}\n     */\n  }, {\n    key: \"getFilteredColumns\",\n    value: function getFilteredColumns() {\n      return this.filteringStates.getEntries().map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n          physicalColumn = _ref2[0];\n        return physicalColumn;\n      });\n    }\n    /**\n     * Gets position in the filtering states stack for the specific column.\n     *\n     * @param {number} column The physical column index.\n     * @returns {number} Returns -1 when the column doesn't exist in the stack.\n     */\n  }, {\n    key: \"getColumnStackPosition\",\n    value: function getColumnStackPosition(column) {\n      return this.getFilteredColumns().indexOf(column);\n    }\n    /**\n     * Export all previously added conditions.\n     *\n     * @returns {Array}\n     */\n  }, {\n    key: \"exportAllConditions\",\n    value: function exportAllConditions() {\n      return arrayReduce(this.filteringStates.getEntries(), function (allConditions, _ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          column = _ref4[0],\n          _ref4$ = _ref4[1],\n          operation = _ref4$.operation,\n          conditions = _ref4$.conditions;\n        allConditions.push({\n          column: column,\n          operation: operation,\n          conditions: arrayMap(conditions, function (_ref5) {\n            var name = _ref5.name,\n              args = _ref5.args;\n            return {\n              name: name,\n              args: args\n            };\n          })\n        });\n        return allConditions;\n      }, []);\n    }\n    /**\n     * Import conditions to the collection.\n     *\n     * @param {Array} conditions The collection of the conditions.\n     */\n  }, {\n    key: \"importAllConditions\",\n    value: function importAllConditions(conditions) {\n      var _this = this;\n      this.clean();\n      arrayEach(conditions, function (stack) {\n        arrayEach(stack.conditions, function (condition) {\n          return _this.addCondition(stack.column, condition);\n        });\n      });\n    }\n    /**\n     * Remove conditions at given column index.\n     *\n     * @param {number} column The physical column index.\n     * @fires ConditionCollection#beforeRemove\n     * @fires ConditionCollection#afterRemove\n     */\n  }, {\n    key: \"removeConditions\",\n    value: function removeConditions(column) {\n      this.runLocalHooks('beforeRemove', column);\n      this.filteringStates.clearValue(column);\n      this.runLocalHooks('afterRemove', column);\n    }\n    /**\n     * Clean all conditions collection and reset order stack.\n     *\n     * @fires ConditionCollection#beforeClean\n     * @fires ConditionCollection#afterClean\n     */\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.runLocalHooks('beforeClean');\n      this.filteringStates.clear();\n      this.runLocalHooks('afterClean');\n    }\n    /**\n     * Check if at least one condition was added at specified column index. And if second parameter is passed then additionally\n     * check if condition exists under its name.\n     *\n     * @param {number} column The physical column index.\n     * @param {string} [name] Condition name.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"hasConditions\",\n    value: function hasConditions(column, name) {\n      var conditions = this.getConditions(column);\n      if (name) {\n        return conditions.some(function (condition) {\n          return condition.name === name;\n        });\n      }\n      return conditions.length > 0;\n    }\n    /**\n     * Destroy object.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.isMapRegistrable) {\n        this.hot.columnIndexMapper.unregisterMap(MAP_NAME);\n      }\n      this.filteringStates = null;\n      this.clearLocalHooks();\n    }\n  }]);\n  return ConditionCollection;\n}();\nmixin(ConditionCollection, localHooks);\nexport default ConditionCollection;","map":{"version":3,"names":["_templateObject","_templateObject2","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_taggedTemplateLiteral","strings","raw","freeze","defineProperties","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","arrayEach","arrayMap","arrayReduce","mixin","toSingleLine","localHooks","getCondition","OPERATION_ID","OPERATION_AND","operations","getOperationFunc","isUndefined","LinkedPhysicalIndexToValueMap","IndexToValueMap","MAP_NAME","ConditionCollection","hot","isMapRegistrable","arguments","undefined","filteringStates","columnIndexMapper","registerMap","init","getNumberOfIndexes","isEmpty","getFilteredColumns","isMatch","column","_stateForColumn$condi","stateForColumn","getValueAtIndex","conditions","operation","isMatchInConditions","operationType","addCondition","conditionDefinition","position","localeForColumn","getCellMeta","locale","args","v","toLocaleLowerCase","command","runLocalHooks","columnType","getOperation","Error","conditionsForColumn","getConditions","setValueAtIndex","func","_this$filteringStates","_this$filteringStates2","_this$filteringStates3","getEntries","map","_ref","_ref2","physicalColumn","getColumnStackPosition","indexOf","exportAllConditions","allConditions","_ref3","_ref4","_ref4$","_ref5","importAllConditions","_this","clean","stack","condition","removeConditions","clearValue","clear","hasConditions","some","destroy","unregisterMap","clearLocalHooks"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/plugins/filters/conditionCollection.mjs"],"sourcesContent":["import \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.freeze.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\n\nvar _templateObject, _templateObject2;\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { arrayEach, arrayMap, arrayReduce } from \"../../helpers/array.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\nimport { getCondition } from \"./conditionRegisterer.mjs\";\nimport { OPERATION_ID as OPERATION_AND } from \"./logicalOperations/conjunction.mjs\";\nimport { operations, getOperationFunc } from \"./logicalOperationRegisterer.mjs\";\nimport { isUndefined } from \"../../helpers/mixed.mjs\";\nimport { LinkedPhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nvar MAP_NAME = 'ConditionCollection.filteringStates';\n/**\n * @private\n * @class ConditionCollection\n */\n\nvar ConditionCollection = /*#__PURE__*/function () {\n  function ConditionCollection(hot) {\n    var isMapRegistrable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    _classCallCheck(this, ConditionCollection);\n\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    this.hot = hot;\n    /**\n     * Indicates whether the internal IndexMap should be registered or not. Generally,\n     * registered Maps responds to the index changes. Within that collection, sometimes\n     * this is not necessary.\n     *\n     * @type {boolean}\n     */\n\n    this.isMapRegistrable = isMapRegistrable;\n    /**\n     * Index map storing filtering states for every column. ConditionCollection write and read to/from this element.\n     *\n     * @type {LinkedPhysicalIndexToValueMap}\n     */\n\n    this.filteringStates = new IndexToValueMap();\n\n    if (this.isMapRegistrable === true) {\n      this.hot.columnIndexMapper.registerMap(MAP_NAME, this.filteringStates);\n    } else {\n      this.filteringStates.init(this.hot.columnIndexMapper.getNumberOfIndexes());\n    }\n  }\n  /**\n   * Check if condition collection is empty (so no needed to filter data).\n   *\n   * @returns {boolean}\n   */\n\n\n  _createClass(ConditionCollection, [{\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.getFilteredColumns().length === 0;\n    }\n    /**\n     * Check if value is matched to the criteria of conditions chain.\n     *\n     * @param {object} value Object with `value` and `meta` keys.\n     * @param {number} column The physical column index.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isMatch\",\n    value: function isMatch(value, column) {\n      var _stateForColumn$condi;\n\n      var stateForColumn = this.filteringStates.getValueAtIndex(column);\n      var conditions = (_stateForColumn$condi = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.conditions) !== null && _stateForColumn$condi !== void 0 ? _stateForColumn$condi : [];\n      var operation = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.operation;\n      return this.isMatchInConditions(conditions, value, operation);\n    }\n    /**\n     * Check if the value is matches the conditions.\n     *\n     * @param {Array} conditions List of conditions.\n     * @param {object} value Object with `value` and `meta` keys.\n     * @param {string} [operationType='conjunction'] Type of conditions operation.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isMatchInConditions\",\n    value: function isMatchInConditions(conditions, value) {\n      var operationType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n\n      if (conditions.length) {\n        return getOperationFunc(operationType)(conditions, value);\n      }\n\n      return true;\n    }\n    /**\n     * Add condition to the collection.\n     *\n     * @param {number} column The physical column index.\n     * @param {object} conditionDefinition Object with keys:\n     *  * `command` Object, Command object with condition name as `key` property.\n     *  * `args` Array, Condition arguments.\n     * @param {string} [operation='conjunction'] Type of conditions operation.\n     * @param {number} [position] Position to which condition will be added. When argument is undefined\n     * the condition will be processed as the last condition.\n     * @fires ConditionCollection#beforeAdd\n     * @fires ConditionCollection#afterAdd\n     */\n\n  }, {\n    key: \"addCondition\",\n    value: function addCondition(column, conditionDefinition) {\n      var operation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n      var position = arguments.length > 3 ? arguments[3] : undefined;\n      var localeForColumn = this.hot.getCellMeta(0, column).locale;\n      var args = arrayMap(conditionDefinition.args, function (v) {\n        return typeof v === 'string' ? v.toLocaleLowerCase(localeForColumn) : v;\n      });\n      var name = conditionDefinition.name || conditionDefinition.command.key;\n      this.runLocalHooks('beforeAdd', column);\n      var columnType = this.getOperation(column);\n\n      if (columnType) {\n        if (columnType !== operation) {\n          throw Error(toSingleLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"The column of index \", \" has been already applied with a `\", \"` \\n        filter operation. Use `removeConditions` to clear the current conditions and then add new ones. \\n        Mind that you cannot mix different types of operations (for instance, if you use `conjunction`, \\n        use it consequently for a particular column).\"], [\"The column of index \", \" has been already applied with a \\\\`\", \"\\\\`\\\\x20\\n        filter operation. Use \\\\`removeConditions\\\\` to clear the current conditions and then add new ones.\\\\x20\\n        Mind that you cannot mix different types of operations (for instance, if you use \\\\`conjunction\\\\`,\\\\x20\\n        use it consequently for a particular column).\"])), column, columnType));\n        }\n      } else if (isUndefined(operations[operation])) {\n        throw new Error(toSingleLine(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"Unexpected operation named `\", \"`. Possible ones are \\n        `disjunction` and `conjunction`.\"], [\"Unexpected operation named \\\\`\", \"\\\\`. Possible ones are\\\\x20\\n        \\\\`disjunction\\\\` and \\\\`conjunction\\\\`.\"])), operation));\n      }\n\n      var conditionsForColumn = this.getConditions(column);\n\n      if (conditionsForColumn.length === 0) {\n        // Create first condition for particular column.\n        this.filteringStates.setValueAtIndex(column, {\n          operation: operation,\n          conditions: [{\n            name: name,\n            args: args,\n            func: getCondition(name, args)\n          }]\n        }, position);\n      } else {\n        // Add next condition for particular column (by reference).\n        conditionsForColumn.push({\n          name: name,\n          args: args,\n          func: getCondition(name, args)\n        });\n      }\n\n      this.runLocalHooks('afterAdd', column);\n    }\n    /**\n     * Get all added conditions from the collection at specified column index.\n     *\n     * @param {number} column The physical column index.\n     * @returns {Array} Returns conditions collection as an array.\n     */\n\n  }, {\n    key: \"getConditions\",\n    value: function getConditions(column) {\n      var _this$filteringStates, _this$filteringStates2;\n\n      return (_this$filteringStates = (_this$filteringStates2 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates2 === void 0 ? void 0 : _this$filteringStates2.conditions) !== null && _this$filteringStates !== void 0 ? _this$filteringStates : [];\n    }\n    /**\n     * Get operation for particular column.\n     *\n     * @param {number} column The physical column index.\n     * @returns {string|undefined}\n     */\n\n  }, {\n    key: \"getOperation\",\n    value: function getOperation(column) {\n      var _this$filteringStates3;\n\n      return (_this$filteringStates3 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates3 === void 0 ? void 0 : _this$filteringStates3.operation;\n    }\n    /**\n     * Get all filtered physical columns in the order in which actions are performed.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getFilteredColumns\",\n    value: function getFilteredColumns() {\n      return this.filteringStates.getEntries().map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            physicalColumn = _ref2[0];\n\n        return physicalColumn;\n      });\n    }\n    /**\n     * Gets position in the filtering states stack for the specific column.\n     *\n     * @param {number} column The physical column index.\n     * @returns {number} Returns -1 when the column doesn't exist in the stack.\n     */\n\n  }, {\n    key: \"getColumnStackPosition\",\n    value: function getColumnStackPosition(column) {\n      return this.getFilteredColumns().indexOf(column);\n    }\n    /**\n     * Export all previously added conditions.\n     *\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"exportAllConditions\",\n    value: function exportAllConditions() {\n      return arrayReduce(this.filteringStates.getEntries(), function (allConditions, _ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            column = _ref4[0],\n            _ref4$ = _ref4[1],\n            operation = _ref4$.operation,\n            conditions = _ref4$.conditions;\n\n        allConditions.push({\n          column: column,\n          operation: operation,\n          conditions: arrayMap(conditions, function (_ref5) {\n            var name = _ref5.name,\n                args = _ref5.args;\n            return {\n              name: name,\n              args: args\n            };\n          })\n        });\n        return allConditions;\n      }, []);\n    }\n    /**\n     * Import conditions to the collection.\n     *\n     * @param {Array} conditions The collection of the conditions.\n     */\n\n  }, {\n    key: \"importAllConditions\",\n    value: function importAllConditions(conditions) {\n      var _this = this;\n\n      this.clean();\n      arrayEach(conditions, function (stack) {\n        arrayEach(stack.conditions, function (condition) {\n          return _this.addCondition(stack.column, condition);\n        });\n      });\n    }\n    /**\n     * Remove conditions at given column index.\n     *\n     * @param {number} column The physical column index.\n     * @fires ConditionCollection#beforeRemove\n     * @fires ConditionCollection#afterRemove\n     */\n\n  }, {\n    key: \"removeConditions\",\n    value: function removeConditions(column) {\n      this.runLocalHooks('beforeRemove', column);\n      this.filteringStates.clearValue(column);\n      this.runLocalHooks('afterRemove', column);\n    }\n    /**\n     * Clean all conditions collection and reset order stack.\n     *\n     * @fires ConditionCollection#beforeClean\n     * @fires ConditionCollection#afterClean\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean() {\n      this.runLocalHooks('beforeClean');\n      this.filteringStates.clear();\n      this.runLocalHooks('afterClean');\n    }\n    /**\n     * Check if at least one condition was added at specified column index. And if second parameter is passed then additionally\n     * check if condition exists under its name.\n     *\n     * @param {number} column The physical column index.\n     * @param {string} [name] Condition name.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"hasConditions\",\n    value: function hasConditions(column, name) {\n      var conditions = this.getConditions(column);\n\n      if (name) {\n        return conditions.some(function (condition) {\n          return condition.name === name;\n        });\n      }\n\n      return conditions.length > 0;\n    }\n    /**\n     * Destroy object.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.isMapRegistrable) {\n        this.hot.columnIndexMapper.unregisterMap(MAP_NAME);\n      }\n\n      this.filteringStates = null;\n      this.clearLocalHooks();\n    }\n  }]);\n\n  return ConditionCollection;\n}();\n\nmixin(ConditionCollection, localHooks);\nexport default ConditionCollection;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _construct from \"/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/@babel/runtime/helpers/esm/construct.js\";\nimport _classCallCheck from \"/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { addClass, getMaximumScrollTop, getScrollbarWidth, getScrollTop, getWindowScrollLeft, hasClass, outerHeight, removeClass, setOverlayPosition, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport TopOverlayTable from \"./../table/top.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CORNER_DEFAULT_STYLE } from \"../selection/index.mjs\";\nimport { CLONE_TOP } from \"./constants.mjs\";\n/**\n * @class TopOverlay\n */\nexport var TopOverlay = /*#__PURE__*/function (_Overlay) {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  function TopOverlay(wotInstance, facadeGetter, wtSettings, domBindings) {\n    var _this;\n    _classCallCheck(this, TopOverlay);\n    _this = _callSuper(this, TopOverlay, [wotInstance, facadeGetter, CLONE_TOP, wtSettings, domBindings]);\n    /**\n     * Cached value which holds the previous value of the `fixedRowsTop` option.\n     * It is used as a comparison value that can be used to detect changes in this value.\n     *\n     * @type {number}\n     */\n    _defineProperty(_this, \"cachedFixedRowsTop\", -1);\n    _this.cachedFixedRowsTop = _this.wtSettings.getSetting('fixedRowsTop');\n    return _this;\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {TopOverlayTable}\n   */\n  _inherits(TopOverlay, _Overlay);\n  return _createClass(TopOverlay, [{\n    key: \"createTable\",\n    value: function createTable() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _construct(TopOverlayTable, args);\n    }\n\n    /**\n     * Checks if overlay should be fully rendered.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"shouldBeRendered\",\n    value: function shouldBeRendered() {\n      return this.wtSettings.getSetting('shouldRenderTopOverlay');\n    }\n\n    /**\n     * Updates the top overlay position.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"resetFixedPosition\",\n    value: function resetFixedPosition() {\n      if (!this.needFullRender || !this.shouldBeRendered() || !this.wot.wtTable.holder.parentNode) {\n        // removed from DOM\n        return false;\n      }\n      var overlayRoot = this.clone.wtTable.holder.parentNode;\n      var rootWindow = this.domBindings.rootWindow;\n      var preventOverflow = this.wtSettings.getSetting('preventOverflow');\n      var overlayPosition = 0;\n      var skipInnerBorderAdjusting = false;\n      if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n        var wtTable = this.wot.wtTable;\n        var hiderRect = wtTable.hider.getBoundingClientRect();\n        var bottom = Math.ceil(hiderRect.bottom);\n        var rootHeight = overlayRoot.offsetHeight;\n\n        // This checks if the overlay is going to an infinite loop caused by added (or removed)\n        // `innerBorderTop` class name. Toggling the class name shifts the viewport by 1px and\n        // triggers the `scroll` event. It causes the table to render. The new render cycle takes into,\n        // account the shift and toggles the class name again. This causes the next loops. This\n        // happens only on Chrome (#7256).\n        //\n        // When we detect that the table bottom position is the same as the overlay bottom,\n        // do not toggle the class name.\n        //\n        // This workaround will be able to be cleared after merging the SVG borders, which introduces\n        // frozen lines (no more `innerBorderTop` workaround).\n        skipInnerBorderAdjusting = bottom === rootHeight;\n        overlayPosition = this.getOverlayOffset();\n        setOverlayPosition(overlayRoot, '0px', \"\".concat(overlayPosition, \"px\"));\n      } else {\n        overlayPosition = this.getScrollPosition();\n        resetCssTransform(overlayRoot);\n      }\n      var positionChanged = this.adjustHeaderBordersPosition(overlayPosition, skipInnerBorderAdjusting);\n      this.adjustElementsSize();\n      return positionChanged;\n    }\n\n    /**\n     * Sets the main overlay's vertical scroll position.\n     *\n     * @param {number} pos The scroll position.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"setScrollPosition\",\n    value: function setScrollPosition(pos) {\n      var rootWindow = this.domBindings.rootWindow;\n      var result = false;\n      if (this.mainTableScrollableElement === rootWindow && rootWindow.scrollY !== pos) {\n        rootWindow.scrollTo(getWindowScrollLeft(rootWindow), pos);\n        result = true;\n      } else if (this.mainTableScrollableElement.scrollTop !== pos) {\n        this.mainTableScrollableElement.scrollTop = pos;\n        result = true;\n      }\n      return result;\n    }\n\n    /**\n     * Triggers onScroll hook callback.\n     */\n  }, {\n    key: \"onScroll\",\n    value: function onScroll() {\n      this.wtSettings.getSetting('onScrollHorizontally');\n    }\n\n    /**\n     * Calculates total sum cells height.\n     *\n     * @param {number} from Row index which calculates started from.\n     * @param {number} to Row index where calculation is finished.\n     * @returns {number} Height sum.\n     */\n  }, {\n    key: \"sumCellSizes\",\n    value: function sumCellSizes(from, to) {\n      var defaultRowHeight = this.wtSettings.getSetting('defaultRowHeight');\n      var row = from;\n      var sum = 0;\n      while (row < to) {\n        var height = this.wot.wtTable.getRowHeight(row);\n        sum += height === undefined ? defaultRowHeight : height;\n        row += 1;\n      }\n      return sum;\n    }\n\n    /**\n     * Adjust overlay root element, children and master table element sizes (width, height).\n     */\n  }, {\n    key: \"adjustElementsSize\",\n    value: function adjustElementsSize() {\n      this.updateTrimmingContainer();\n      if (this.needFullRender) {\n        this.adjustRootElementSize();\n        this.adjustRootChildrenSize();\n      }\n    }\n\n    /**\n     * Adjust overlay root element size (width and height).\n     */\n  }, {\n    key: \"adjustRootElementSize\",\n    value: function adjustRootElementSize() {\n      var wtTable = this.wot.wtTable;\n      var _this$domBindings = this.domBindings,\n        rootDocument = _this$domBindings.rootDocument,\n        rootWindow = _this$domBindings.rootWindow;\n      var scrollbarWidth = getScrollbarWidth(rootDocument);\n      var overlayRoot = this.clone.wtTable.holder.parentNode;\n      var overlayRootStyle = overlayRoot.style;\n      var preventOverflow = this.wtSettings.getSetting('preventOverflow');\n      if (this.trimmingContainer !== rootWindow || preventOverflow === 'horizontal') {\n        var width = this.wot.wtViewport.getWorkspaceWidth();\n        if (this.wot.wtOverlays.hasScrollbarRight) {\n          width -= scrollbarWidth;\n        }\n        width = Math.min(width, wtTable.wtRootElement.scrollWidth);\n        overlayRootStyle.width = \"\".concat(width, \"px\");\n      } else {\n        overlayRootStyle.width = '';\n      }\n      this.clone.wtTable.holder.style.width = overlayRootStyle.width;\n      var tableHeight = outerHeight(this.clone.wtTable.TABLE);\n      if (!this.wot.wtTable.hasDefinedSize()) {\n        tableHeight = 0;\n      }\n      overlayRootStyle.height = \"\".concat(tableHeight, \"px\");\n    }\n\n    /**\n     * Adjust overlay root childs size.\n     */\n  }, {\n    key: \"adjustRootChildrenSize\",\n    value: function adjustRootChildrenSize() {\n      var holder = this.clone.wtTable.holder;\n      var selectionCornerOffset = this.wot.selectionManager.getFocusSelection() ? parseInt(CORNER_DEFAULT_STYLE.height, 10) / 2 : 0;\n      this.clone.wtTable.hider.style.width = this.hider.style.width;\n      holder.style.width = holder.parentNode.style.width;\n      // Add selection corner protruding part to the holder total height to make sure that\n      // borders' corner won't be cut after vertical scroll (#6937).\n      holder.style.height = \"\".concat(parseInt(holder.parentNode.style.height, 10) + selectionCornerOffset, \"px\");\n    }\n\n    /**\n     * Adjust the overlay dimensions and position.\n     */\n  }, {\n    key: \"applyToDOM\",\n    value: function applyToDOM() {\n      var total = this.wtSettings.getSetting('totalRows');\n      if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {\n        this.spreader.style.top = \"\".concat(this.wot.wtViewport.rowsRenderCalculator.startPosition, \"px\");\n      } else if (total === 0) {\n        // can happen if there are 0 rows\n        this.spreader.style.top = '0';\n      } else {\n        throw new Error('Incorrect value of the rowsRenderCalculator');\n      }\n      this.spreader.style.bottom = '';\n      if (this.needFullRender) {\n        this.syncOverlayOffset();\n      }\n    }\n\n    /**\n     * Synchronize calculated left position to an element.\n     */\n  }, {\n    key: \"syncOverlayOffset\",\n    value: function syncOverlayOffset() {\n      var styleProperty = this.isRtl() ? 'right' : 'left';\n      var spreader = this.clone.wtTable.spreader;\n      if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {\n        spreader.style[styleProperty] = \"\".concat(this.wot.wtViewport.columnsRenderCalculator.startPosition, \"px\");\n      } else {\n        spreader.style[styleProperty] = '';\n      }\n    }\n\n    /**\n     * Scrolls vertically to a row.\n     *\n     * @param {number} sourceRow Row index which you want to scroll to.\n     * @param {boolean} [bottomEdge] If `true`, scrolls according to the bottom edge (top edge is by default).\n     * @returns {boolean}\n     */\n  }, {\n    key: \"scrollTo\",\n    value: function scrollTo(sourceRow, bottomEdge) {\n      var wot = this.wot,\n        wtSettings = this.wtSettings;\n      var sourceInstance = wot.cloneSource ? wot.cloneSource : wot;\n      var mainHolder = sourceInstance.wtTable.holder;\n      var columnHeaders = wtSettings.getSetting('columnHeaders');\n      var fixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n      var columnHeaderBorderCompensation = fixedRowsTop === 0 && columnHeaders.length > 0 && !hasClass(mainHolder.parentNode, 'innerBorderTop') ? 1 : 0;\n      var newY = this.getTableParentOffset();\n      var scrollbarCompensation = 0;\n      if (bottomEdge) {\n        var rowHeight = this.wot.wtTable.getRowHeight(sourceRow);\n        var viewportHeight = this.wot.wtViewport.getViewportHeight();\n        if (rowHeight > viewportHeight) {\n          bottomEdge = false;\n        }\n      }\n      if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {\n        scrollbarCompensation = getScrollbarWidth(this.domBindings.rootDocument);\n      }\n      if (bottomEdge) {\n        var fixedRowsBottom = wtSettings.getSetting('fixedRowsBottom');\n        var totalRows = wtSettings.getSetting('totalRows');\n        newY += this.sumCellSizes(0, sourceRow + 1);\n        newY -= wot.wtViewport.getViewportHeight() - this.sumCellSizes(totalRows - fixedRowsBottom, totalRows);\n        // Fix 1 pixel offset when cell is selected\n        newY += 1;\n        // Compensate for the bottom header border if scrolled from the absolute top.\n        newY += columnHeaderBorderCompensation;\n      } else {\n        newY += this.sumCellSizes(wtSettings.getSetting('fixedRowsTop'), sourceRow);\n      }\n      newY += scrollbarCompensation;\n\n      // If the table is scrolled all the way up when starting the scroll and going to be scrolled to the bottom,\n      // we need to compensate for the potential header bottom border height.\n      if (getMaximumScrollTop(this.mainTableScrollableElement) === newY - columnHeaderBorderCompensation && columnHeaderBorderCompensation > 0) {\n        this.wot.wtOverlays.expandHiderVerticallyBy(columnHeaderBorderCompensation);\n      }\n      return this.setScrollPosition(newY);\n    }\n\n    /**\n     * Gets table parent top position.\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"getTableParentOffset\",\n    value: function getTableParentOffset() {\n      if (this.mainTableScrollableElement === this.domBindings.rootWindow) {\n        return this.wot.wtTable.holderOffset.top;\n      }\n      return 0;\n    }\n\n    /**\n     * Gets the main overlay's vertical scroll position.\n     *\n     * @returns {number} Main table's vertical scroll position.\n     */\n  }, {\n    key: \"getScrollPosition\",\n    value: function getScrollPosition() {\n      return getScrollTop(this.mainTableScrollableElement, this.domBindings.rootWindow);\n    }\n\n    /**\n     * Gets the main overlay's vertical overlay offset.\n     *\n     * @returns {number} Main table's vertical overlay offset.\n     */\n  }, {\n    key: \"getOverlayOffset\",\n    value: function getOverlayOffset() {\n      var rootWindow = this.domBindings.rootWindow;\n      var preventOverflow = this.wtSettings.getSetting('preventOverflow');\n      var overlayOffset = 0;\n      if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n        var rootHeight = this.wot.wtTable.getTotalHeight();\n        var overlayRootHeight = this.clone.wtTable.getTotalHeight();\n        var maxOffset = rootHeight - overlayRootHeight;\n        overlayOffset = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0);\n        if (overlayOffset > maxOffset) {\n          overlayOffset = 0;\n        }\n      }\n      return overlayOffset;\n    }\n\n    /**\n     * Adds css classes to hide the header border's header (cell-selection border hiding issue).\n     *\n     * @param {number} position Header Y position if trimming container is window or scroll top if not.\n     * @param {boolean} [skipInnerBorderAdjusting=false] If `true` the inner border adjusting will be skipped.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"adjustHeaderBordersPosition\",\n    value: function adjustHeaderBordersPosition(position) {\n      var skipInnerBorderAdjusting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var wtSettings = this.wtSettings;\n      var masterParent = this.wot.wtTable.holder.parentNode;\n      var totalColumns = wtSettings.getSetting('totalColumns');\n      var preventHorizontalOverflow = wtSettings.getSetting('preventOverflow') === 'horizontal';\n      if (totalColumns) {\n        removeClass(masterParent, 'emptyColumns');\n      } else {\n        addClass(masterParent, 'emptyColumns');\n      }\n      var positionChanged = false;\n      if (!skipInnerBorderAdjusting && !preventHorizontalOverflow) {\n        var fixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n        var areFixedRowsTopChanged = this.cachedFixedRowsTop !== fixedRowsTop;\n        var columnHeaders = wtSettings.getSetting('columnHeaders');\n        if ((areFixedRowsTopChanged || fixedRowsTop === 0) && columnHeaders.length > 0) {\n          var previousState = hasClass(masterParent, 'innerBorderTop');\n          this.cachedFixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n          if (position || wtSettings.getSetting('totalRows') === 0) {\n            addClass(masterParent, 'innerBorderTop');\n            positionChanged = !previousState;\n          } else {\n            removeClass(masterParent, 'innerBorderTop');\n            positionChanged = previousState;\n          }\n        }\n      }\n      return positionChanged;\n    }\n  }]);\n}(Overlay);","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","addClass","getMaximumScrollTop","getScrollbarWidth","getScrollTop","getWindowScrollLeft","hasClass","outerHeight","removeClass","setOverlayPosition","resetCssTransform","TopOverlayTable","Overlay","CORNER_DEFAULT_STYLE","CLONE_TOP","TopOverlay","_Overlay","wotInstance","facadeGetter","wtSettings","domBindings","_this","_classCallCheck","_callSuper","cachedFixedRowsTop","getSetting","_inherits","_createClass","key","createTable","_len","arguments","length","args","Array","_key","_construct","shouldBeRendered","resetFixedPosition","needFullRender","wot","wtTable","holder","parentNode","overlayRoot","clone","rootWindow","preventOverflow","overlayPosition","skipInnerBorderAdjusting","trimmingContainer","hiderRect","hider","getBoundingClientRect","bottom","Math","ceil","rootHeight","offsetHeight","getOverlayOffset","concat","getScrollPosition","positionChanged","adjustHeaderBordersPosition","adjustElementsSize","setScrollPosition","pos","result","mainTableScrollableElement","scrollY","scrollTo","scrollTop","onScroll","sumCellSizes","from","to","defaultRowHeight","row","sum","height","getRowHeight","undefined","updateTrimmingContainer","adjustRootElementSize","adjustRootChildrenSize","_this$domBindings","rootDocument","scrollbarWidth","overlayRootStyle","style","width","wtViewport","getWorkspaceWidth","wtOverlays","hasScrollbarRight","min","wtRootElement","scrollWidth","tableHeight","TABLE","hasDefinedSize","selectionCornerOffset","selectionManager","getFocusSelection","parseInt","applyToDOM","total","rowsRenderCalculator","startPosition","spreader","top","Error","syncOverlayOffset","styleProperty","isRtl","columnsRenderCalculator","sourceRow","bottomEdge","sourceInstance","cloneSource","mainHolder","columnHeaders","fixedRowsTop","columnHeaderBorderCompensation","newY","getTableParentOffset","scrollbarCompensation","rowHeight","viewportHeight","getViewportHeight","clientHeight","fixedRowsBottom","totalRows","expandHiderVerticallyBy","holderOffset","overlayOffset","getTotalHeight","overlayRootHeight","maxOffset","max","position","masterParent","totalColumns","preventHorizontalOverflow","areFixedRowsTopChanged","previousState"],"sources":["/Users/priyadeliwala/node_modules/handsontable/3rdparty/walkontable/src/overlay/top.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { addClass, getMaximumScrollTop, getScrollbarWidth, getScrollTop, getWindowScrollLeft, hasClass, outerHeight, removeClass, setOverlayPosition, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport TopOverlayTable from \"./../table/top.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CORNER_DEFAULT_STYLE } from \"../selection/index.mjs\";\nimport { CLONE_TOP } from \"./constants.mjs\";\n/**\n * @class TopOverlay\n */\nexport class TopOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings) {\n    super(wotInstance, facadeGetter, CLONE_TOP, wtSettings, domBindings);\n    /**\n     * Cached value which holds the previous value of the `fixedRowsTop` option.\n     * It is used as a comparison value that can be used to detect changes in this value.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"cachedFixedRowsTop\", -1);\n    this.cachedFixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {TopOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new TopOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderTopOverlay');\n  }\n\n  /**\n   * Updates the top overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    if (!this.needFullRender || !this.shouldBeRendered() || !this.wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayPosition = 0;\n    let skipInnerBorderAdjusting = false;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const {\n        wtTable\n      } = this.wot;\n      const hiderRect = wtTable.hider.getBoundingClientRect();\n      const bottom = Math.ceil(hiderRect.bottom);\n      const rootHeight = overlayRoot.offsetHeight;\n\n      // This checks if the overlay is going to an infinite loop caused by added (or removed)\n      // `innerBorderTop` class name. Toggling the class name shifts the viewport by 1px and\n      // triggers the `scroll` event. It causes the table to render. The new render cycle takes into,\n      // account the shift and toggles the class name again. This causes the next loops. This\n      // happens only on Chrome (#7256).\n      //\n      // When we detect that the table bottom position is the same as the overlay bottom,\n      // do not toggle the class name.\n      //\n      // This workaround will be able to be cleared after merging the SVG borders, which introduces\n      // frozen lines (no more `innerBorderTop` workaround).\n      skipInnerBorderAdjusting = bottom === rootHeight;\n      overlayPosition = this.getOverlayOffset();\n      setOverlayPosition(overlayRoot, '0px', `${overlayPosition}px`);\n    } else {\n      overlayPosition = this.getScrollPosition();\n      resetCssTransform(overlayRoot);\n    }\n    const positionChanged = this.adjustHeaderBordersPosition(overlayPosition, skipInnerBorderAdjusting);\n    this.adjustElementsSize();\n    return positionChanged;\n  }\n\n  /**\n   * Sets the main overlay's vertical scroll position.\n   *\n   * @param {number} pos The scroll position.\n   * @returns {boolean}\n   */\n  setScrollPosition(pos) {\n    const rootWindow = this.domBindings.rootWindow;\n    let result = false;\n    if (this.mainTableScrollableElement === rootWindow && rootWindow.scrollY !== pos) {\n      rootWindow.scrollTo(getWindowScrollLeft(rootWindow), pos);\n      result = true;\n    } else if (this.mainTableScrollableElement.scrollTop !== pos) {\n      this.mainTableScrollableElement.scrollTop = pos;\n      result = true;\n    }\n    return result;\n  }\n\n  /**\n   * Triggers onScroll hook callback.\n   */\n  onScroll() {\n    this.wtSettings.getSetting('onScrollHorizontally');\n  }\n\n  /**\n   * Calculates total sum cells height.\n   *\n   * @param {number} from Row index which calculates started from.\n   * @param {number} to Row index where calculation is finished.\n   * @returns {number} Height sum.\n   */\n  sumCellSizes(from, to) {\n    const defaultRowHeight = this.wtSettings.getSetting('defaultRowHeight');\n    let row = from;\n    let sum = 0;\n    while (row < to) {\n      const height = this.wot.wtTable.getRowHeight(row);\n      sum += height === undefined ? defaultRowHeight : height;\n      row += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * Adjust overlay root element, children and master table element sizes (width, height).\n   */\n  adjustElementsSize() {\n    this.updateTrimmingContainer();\n    if (this.needFullRender) {\n      this.adjustRootElementSize();\n      this.adjustRootChildrenSize();\n    }\n  }\n\n  /**\n   * Adjust overlay root element size (width and height).\n   */\n  adjustRootElementSize() {\n    const {\n      wtTable\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const scrollbarWidth = getScrollbarWidth(rootDocument);\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const overlayRootStyle = overlayRoot.style;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer !== rootWindow || preventOverflow === 'horizontal') {\n      let width = this.wot.wtViewport.getWorkspaceWidth();\n      if (this.wot.wtOverlays.hasScrollbarRight) {\n        width -= scrollbarWidth;\n      }\n      width = Math.min(width, wtTable.wtRootElement.scrollWidth);\n      overlayRootStyle.width = `${width}px`;\n    } else {\n      overlayRootStyle.width = '';\n    }\n    this.clone.wtTable.holder.style.width = overlayRootStyle.width;\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRootStyle.height = `${tableHeight}px`;\n  }\n\n  /**\n   * Adjust overlay root childs size.\n   */\n  adjustRootChildrenSize() {\n    const {\n      holder\n    } = this.clone.wtTable;\n    const selectionCornerOffset = this.wot.selectionManager.getFocusSelection() ? parseInt(CORNER_DEFAULT_STYLE.height, 10) / 2 : 0;\n    this.clone.wtTable.hider.style.width = this.hider.style.width;\n    holder.style.width = holder.parentNode.style.width;\n    // Add selection corner protruding part to the holder total height to make sure that\n    // borders' corner won't be cut after vertical scroll (#6937).\n    holder.style.height = `${parseInt(holder.parentNode.style.height, 10) + selectionCornerOffset}px`;\n  }\n\n  /**\n   * Adjust the overlay dimensions and position.\n   */\n  applyToDOM() {\n    const total = this.wtSettings.getSetting('totalRows');\n    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {\n      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;\n    } else if (total === 0) {\n      // can happen if there are 0 rows\n      this.spreader.style.top = '0';\n    } else {\n      throw new Error('Incorrect value of the rowsRenderCalculator');\n    }\n    this.spreader.style.bottom = '';\n    if (this.needFullRender) {\n      this.syncOverlayOffset();\n    }\n  }\n\n  /**\n   * Synchronize calculated left position to an element.\n   */\n  syncOverlayOffset() {\n    const styleProperty = this.isRtl() ? 'right' : 'left';\n    const {\n      spreader\n    } = this.clone.wtTable;\n    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {\n      spreader.style[styleProperty] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;\n    } else {\n      spreader.style[styleProperty] = '';\n    }\n  }\n\n  /**\n   * Scrolls vertically to a row.\n   *\n   * @param {number} sourceRow Row index which you want to scroll to.\n   * @param {boolean} [bottomEdge] If `true`, scrolls according to the bottom edge (top edge is by default).\n   * @returns {boolean}\n   */\n  scrollTo(sourceRow, bottomEdge) {\n    const {\n      wot,\n      wtSettings\n    } = this;\n    const sourceInstance = wot.cloneSource ? wot.cloneSource : wot;\n    const mainHolder = sourceInstance.wtTable.holder;\n    const columnHeaders = wtSettings.getSetting('columnHeaders');\n    const fixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n    const columnHeaderBorderCompensation = fixedRowsTop === 0 && columnHeaders.length > 0 && !hasClass(mainHolder.parentNode, 'innerBorderTop') ? 1 : 0;\n    let newY = this.getTableParentOffset();\n    let scrollbarCompensation = 0;\n    if (bottomEdge) {\n      const rowHeight = this.wot.wtTable.getRowHeight(sourceRow);\n      const viewportHeight = this.wot.wtViewport.getViewportHeight();\n      if (rowHeight > viewportHeight) {\n        bottomEdge = false;\n      }\n    }\n    if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {\n      scrollbarCompensation = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    if (bottomEdge) {\n      const fixedRowsBottom = wtSettings.getSetting('fixedRowsBottom');\n      const totalRows = wtSettings.getSetting('totalRows');\n      newY += this.sumCellSizes(0, sourceRow + 1);\n      newY -= wot.wtViewport.getViewportHeight() - this.sumCellSizes(totalRows - fixedRowsBottom, totalRows);\n      // Fix 1 pixel offset when cell is selected\n      newY += 1;\n      // Compensate for the bottom header border if scrolled from the absolute top.\n      newY += columnHeaderBorderCompensation;\n    } else {\n      newY += this.sumCellSizes(wtSettings.getSetting('fixedRowsTop'), sourceRow);\n    }\n    newY += scrollbarCompensation;\n\n    // If the table is scrolled all the way up when starting the scroll and going to be scrolled to the bottom,\n    // we need to compensate for the potential header bottom border height.\n    if (getMaximumScrollTop(this.mainTableScrollableElement) === newY - columnHeaderBorderCompensation && columnHeaderBorderCompensation > 0) {\n      this.wot.wtOverlays.expandHiderVerticallyBy(columnHeaderBorderCompensation);\n    }\n    return this.setScrollPosition(newY);\n  }\n\n  /**\n   * Gets table parent top position.\n   *\n   * @returns {number}\n   */\n  getTableParentOffset() {\n    if (this.mainTableScrollableElement === this.domBindings.rootWindow) {\n      return this.wot.wtTable.holderOffset.top;\n    }\n    return 0;\n  }\n\n  /**\n   * Gets the main overlay's vertical scroll position.\n   *\n   * @returns {number} Main table's vertical scroll position.\n   */\n  getScrollPosition() {\n    return getScrollTop(this.mainTableScrollableElement, this.domBindings.rootWindow);\n  }\n\n  /**\n   * Gets the main overlay's vertical overlay offset.\n   *\n   * @returns {number} Main table's vertical overlay offset.\n   */\n  getOverlayOffset() {\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayOffset = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const rootHeight = this.wot.wtTable.getTotalHeight();\n      const overlayRootHeight = this.clone.wtTable.getTotalHeight();\n      const maxOffset = rootHeight - overlayRootHeight;\n      overlayOffset = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0);\n      if (overlayOffset > maxOffset) {\n        overlayOffset = 0;\n      }\n    }\n    return overlayOffset;\n  }\n\n  /**\n   * Adds css classes to hide the header border's header (cell-selection border hiding issue).\n   *\n   * @param {number} position Header Y position if trimming container is window or scroll top if not.\n   * @param {boolean} [skipInnerBorderAdjusting=false] If `true` the inner border adjusting will be skipped.\n   * @returns {boolean}\n   */\n  adjustHeaderBordersPosition(position) {\n    let skipInnerBorderAdjusting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const {\n      wtSettings\n    } = this;\n    const masterParent = this.wot.wtTable.holder.parentNode;\n    const totalColumns = wtSettings.getSetting('totalColumns');\n    const preventHorizontalOverflow = wtSettings.getSetting('preventOverflow') === 'horizontal';\n    if (totalColumns) {\n      removeClass(masterParent, 'emptyColumns');\n    } else {\n      addClass(masterParent, 'emptyColumns');\n    }\n    let positionChanged = false;\n    if (!skipInnerBorderAdjusting && !preventHorizontalOverflow) {\n      const fixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n      const areFixedRowsTopChanged = this.cachedFixedRowsTop !== fixedRowsTop;\n      const columnHeaders = wtSettings.getSetting('columnHeaders');\n      if ((areFixedRowsTopChanged || fixedRowsTop === 0) && columnHeaders.length > 0) {\n        const previousState = hasClass(masterParent, 'innerBorderTop');\n        this.cachedFixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n        if (position || wtSettings.getSetting('totalRows') === 0) {\n          addClass(masterParent, 'innerBorderTop');\n          positionChanged = !previousState;\n        } else {\n          removeClass(masterParent, 'innerBorderTop');\n          positionChanged = previousState;\n        }\n      }\n    }\n    return positionChanged;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
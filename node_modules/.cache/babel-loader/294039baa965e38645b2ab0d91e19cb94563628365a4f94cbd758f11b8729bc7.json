{"ast":null,"code":"import { compareFunctionFactory as defaultSort, COLUMN_DATA_TYPE as DEFAULT_DATA_TYPE } from \"../sortFunction/default.mjs\";\nimport { compareFunctionFactory as numericSort, COLUMN_DATA_TYPE as NUMERIC_DATA_TYPE } from \"../sortFunction/numeric.mjs\";\nimport { compareFunctionFactory as checkboxSort, COLUMN_DATA_TYPE as CHECKBOX_DATA_TYPE } from \"../sortFunction/checkbox.mjs\";\nimport { compareFunctionFactory as dateSort, COLUMN_DATA_TYPE as DATE_DATA_TYPE } from \"../sortFunction/date.mjs\";\nimport { compareFunctionFactory as timeSort, COLUMN_DATA_TYPE as TIME_DATA_TYPE } from \"../sortFunction/time.mjs\";\nimport staticRegister from \"../../../utils/staticRegister.mjs\";\nvar _staticRegister = staticRegister('sorting.compareFunctionFactory'),\n  registerCompareFunctionFactory = _staticRegister.register,\n  getGloballyCompareFunctionFactory = _staticRegister.getItem,\n  hasGloballyCompareFunctionFactory = _staticRegister.hasItem;\nvar _staticRegister2 = staticRegister('sorting.mainSortComparator'),\n  registerRootComparator = _staticRegister2.register,\n  getRootComparator = _staticRegister2.getItem;\n\n/**\n * Gets sort function for the particular column basing on it's data type.\n *\n * @param {string} type The data type.\n * @returns {Function}\n */\nexport function getCompareFunctionFactory(type) {\n  if (hasGloballyCompareFunctionFactory(type)) {\n    return getGloballyCompareFunctionFactory(type);\n  }\n  return getGloballyCompareFunctionFactory(DEFAULT_DATA_TYPE);\n}\nregisterCompareFunctionFactory(CHECKBOX_DATA_TYPE, checkboxSort);\nregisterCompareFunctionFactory(DATE_DATA_TYPE, dateSort);\nregisterCompareFunctionFactory(DEFAULT_DATA_TYPE, defaultSort);\nregisterCompareFunctionFactory(NUMERIC_DATA_TYPE, numericSort);\nregisterCompareFunctionFactory(TIME_DATA_TYPE, timeSort);\nexport { registerRootComparator, getRootComparator };","map":{"version":3,"names":["compareFunctionFactory","defaultSort","COLUMN_DATA_TYPE","DEFAULT_DATA_TYPE","numericSort","NUMERIC_DATA_TYPE","checkboxSort","CHECKBOX_DATA_TYPE","dateSort","DATE_DATA_TYPE","timeSort","TIME_DATA_TYPE","staticRegister","_staticRegister","registerCompareFunctionFactory","register","getGloballyCompareFunctionFactory","getItem","hasGloballyCompareFunctionFactory","hasItem","_staticRegister2","registerRootComparator","getRootComparator","getCompareFunctionFactory","type"],"sources":["/Users/priyadeliwala/node_modules/handsontable/plugins/columnSorting/sortService/registry.mjs"],"sourcesContent":["import { compareFunctionFactory as defaultSort, COLUMN_DATA_TYPE as DEFAULT_DATA_TYPE } from \"../sortFunction/default.mjs\";\nimport { compareFunctionFactory as numericSort, COLUMN_DATA_TYPE as NUMERIC_DATA_TYPE } from \"../sortFunction/numeric.mjs\";\nimport { compareFunctionFactory as checkboxSort, COLUMN_DATA_TYPE as CHECKBOX_DATA_TYPE } from \"../sortFunction/checkbox.mjs\";\nimport { compareFunctionFactory as dateSort, COLUMN_DATA_TYPE as DATE_DATA_TYPE } from \"../sortFunction/date.mjs\";\nimport { compareFunctionFactory as timeSort, COLUMN_DATA_TYPE as TIME_DATA_TYPE } from \"../sortFunction/time.mjs\";\nimport staticRegister from \"../../../utils/staticRegister.mjs\";\nconst {\n  register: registerCompareFunctionFactory,\n  getItem: getGloballyCompareFunctionFactory,\n  hasItem: hasGloballyCompareFunctionFactory\n} = staticRegister('sorting.compareFunctionFactory');\nconst {\n  register: registerRootComparator,\n  getItem: getRootComparator\n} = staticRegister('sorting.mainSortComparator');\n\n/**\n * Gets sort function for the particular column basing on it's data type.\n *\n * @param {string} type The data type.\n * @returns {Function}\n */\nexport function getCompareFunctionFactory(type) {\n  if (hasGloballyCompareFunctionFactory(type)) {\n    return getGloballyCompareFunctionFactory(type);\n  }\n  return getGloballyCompareFunctionFactory(DEFAULT_DATA_TYPE);\n}\nregisterCompareFunctionFactory(CHECKBOX_DATA_TYPE, checkboxSort);\nregisterCompareFunctionFactory(DATE_DATA_TYPE, dateSort);\nregisterCompareFunctionFactory(DEFAULT_DATA_TYPE, defaultSort);\nregisterCompareFunctionFactory(NUMERIC_DATA_TYPE, numericSort);\nregisterCompareFunctionFactory(TIME_DATA_TYPE, timeSort);\nexport { registerRootComparator, getRootComparator };"],"mappings":"AAAA,SAASA,sBAAsB,IAAIC,WAAW,EAAEC,gBAAgB,IAAIC,iBAAiB,QAAQ,6BAA6B;AAC1H,SAASH,sBAAsB,IAAII,WAAW,EAAEF,gBAAgB,IAAIG,iBAAiB,QAAQ,6BAA6B;AAC1H,SAASL,sBAAsB,IAAIM,YAAY,EAAEJ,gBAAgB,IAAIK,kBAAkB,QAAQ,8BAA8B;AAC7H,SAASP,sBAAsB,IAAIQ,QAAQ,EAAEN,gBAAgB,IAAIO,cAAc,QAAQ,0BAA0B;AACjH,SAAST,sBAAsB,IAAIU,QAAQ,EAAER,gBAAgB,IAAIS,cAAc,QAAQ,0BAA0B;AACjH,OAAOC,cAAc,MAAM,mCAAmC;AAC9D,IAAAC,eAAA,GAIID,cAAc,CAAC,gCAAgC,CAAC;EAHxCE,8BAA8B,GAAAD,eAAA,CAAxCE,QAAQ;EACCC,iCAAiC,GAAAH,eAAA,CAA1CI,OAAO;EACEC,iCAAiC,GAAAL,eAAA,CAA1CM,OAAO;AAET,IAAAC,gBAAA,GAGIR,cAAc,CAAC,4BAA4B,CAAC;EAFpCS,sBAAsB,GAAAD,gBAAA,CAAhCL,QAAQ;EACCO,iBAAiB,GAAAF,gBAAA,CAA1BH,OAAO;;AAGT;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,yBAAyBA,CAACC,IAAI,EAAE;EAC9C,IAAIN,iCAAiC,CAACM,IAAI,CAAC,EAAE;IAC3C,OAAOR,iCAAiC,CAACQ,IAAI,CAAC;EAChD;EACA,OAAOR,iCAAiC,CAACb,iBAAiB,CAAC;AAC7D;AACAW,8BAA8B,CAACP,kBAAkB,EAAED,YAAY,CAAC;AAChEQ,8BAA8B,CAACL,cAAc,EAAED,QAAQ,CAAC;AACxDM,8BAA8B,CAACX,iBAAiB,EAAEF,WAAW,CAAC;AAC9Da,8BAA8B,CAACT,iBAAiB,EAAED,WAAW,CAAC;AAC9DU,8BAA8B,CAACH,cAAc,EAAED,QAAQ,CAAC;AACxD,SAASW,sBAAsB,EAAEC,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _excluded = [\"row\"];\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nimport { arrayMap, arrayReduce } from \"../../../helpers/array.mjs\";\nimport SourceSettings from \"./sourceSettings.mjs\";\nimport HeadersTree from \"./headersTree.mjs\";\nimport { triggerNodeModification as _triggerNodeModification } from \"./nodeModifiers/index.mjs\";\nimport { generateMatrix } from \"./matrixGenerator.mjs\";\n/**\n * The state manager is a source of truth for nested headers configuration.\n * The state generation process is divided into three stages.\n *\n *   +---------------------+  1. User-defined configuration normalization;\n *   │                     │  The source settings class normalizes and shares API for\n *   │   SourceSettings    │  raw settings passed by the developer. It is only consumed by\n *   │                     │  the header tree module.\n *   +---------------------+\n *             │\n *            \\│/\n *   +---------------------+  2. Building a tree structure for validation and easier node manipulation;\n *   │                     │  The header tree generates a tree based on source settings for future\n *   │     HeadersTree     │  node manipulation (such as collapsible columns feature). While generating a tree\n *   │                     │  the source settings is checked to see if the configuration has overlapping headers.\n *   +---------------------+  If `true` the colspan matrix generation is skipped, overlapped headers are not supported.\n *             │\n *            \\│/\n *   +---------------------+  3. Matrix generation;\n *   │                     │  Based on built trees the matrix generation is performed. That part of code\n *   │  matrix generation  │  generates an array structure similar to normalized data from the SourceSettings\n *   │                     │  but with the difference that this structure contains column settings which changed\n *   +---------------------+  during runtime (after the tree manipulation) e.q after collapse or expand column.\n *                            That settings describes how the TH element should be modified (colspan attribute,\n *                            CSS classes, etc) for a specific column and layer level.\n *\n * @class StateManager\n */\n\nvar _sourceSettings = /*#__PURE__*/new WeakMap();\nvar _headersTree = /*#__PURE__*/new WeakMap();\nvar _stateMatrix = /*#__PURE__*/new WeakMap();\nvar StateManager = /*#__PURE__*/function () {\n  function StateManager() {\n    _classCallCheck(this, StateManager);\n    _classPrivateFieldInitSpec(this, _sourceSettings, {\n      writable: true,\n      value: new SourceSettings()\n    });\n    _classPrivateFieldInitSpec(this, _headersTree, {\n      writable: true,\n      value: new HeadersTree(_classPrivateFieldGet(this, _sourceSettings))\n    });\n    _classPrivateFieldInitSpec(this, _stateMatrix, {\n      writable: true,\n      value: [[]]\n    });\n  }\n  _createClass(StateManager, [{\n    key: \"setState\",\n    value:\n    /**\n     * Sets a new state for the nested headers plugin based on settings passed\n     * directly to the plugin.\n     *\n     * @param {Array[]} nestedHeadersSettings The user-defined settings.\n     * @returns {boolean} Returns `true` if the settings are processed correctly, `false` otherwise.\n     */\n    function setState(nestedHeadersSettings) {\n      _classPrivateFieldGet(this, _sourceSettings).setData(nestedHeadersSettings);\n      var hasError = false;\n      try {\n        _classPrivateFieldGet(this, _headersTree).buildTree();\n      } catch (ex) {\n        _classPrivateFieldGet(this, _headersTree).clear();\n        _classPrivateFieldGet(this, _sourceSettings).clear();\n        hasError = true;\n      }\n      _classPrivateFieldSet(this, _stateMatrix, generateMatrix(_classPrivateFieldGet(this, _headersTree).getRoots()));\n      return hasError;\n    }\n    /**\n     * Sets columns limit to the state will be trimmed. All headers (colspans) which\n     * overlap the column limit will be reduced to keep the structure solid.\n     *\n     * @param {number} columnsCount The number of columns to limit to.\n     */\n  }, {\n    key: \"setColumnsLimit\",\n    value: function setColumnsLimit(columnsCount) {\n      _classPrivateFieldGet(this, _sourceSettings).setColumnsLimit(columnsCount);\n    }\n    /**\n     * Merges settings with current plugin state.\n     *\n     * By default only foreign keys are merged with source state and passed to the tree. But only\n     * known keys are exported to matrix.\n     *\n     * @param {object[]} settings An array of objects to merge with the current source settings.\n     *                            It is a requirement that every object has `row` and `col` properties\n     *                            which points to the specific header settings object.\n     */\n  }, {\n    key: \"mergeStateWith\",\n    value: function mergeStateWith(settings) {\n      var _this = this;\n      var transformedSettings = arrayMap(settings, function (_ref) {\n        var row = _ref.row,\n          rest = _objectWithoutProperties(_ref, _excluded);\n        return _objectSpread({\n          row: row < 0 ? _this.rowCoordsToLevel(row) : row\n        }, rest);\n      });\n      _classPrivateFieldGet(this, _sourceSettings).mergeWith(transformedSettings);\n      _classPrivateFieldGet(this, _headersTree).buildTree();\n      _classPrivateFieldSet(this, _stateMatrix, generateMatrix(_classPrivateFieldGet(this, _headersTree).getRoots()));\n    }\n    /**\n     * Maps the current state with a callback. For each header settings the callback function\n     * is called. If the function returns value that value is merged with the state.\n     *\n     * By default only foreign keys are merged with source state and passed to the tree. But only\n     * known keys are exported to matrix.\n     *\n     * @param {Function} callback A function that is called for every header source settings.\n     *                            Each time the callback is called, the returned value extends\n     *                            header settings.\n     */\n  }, {\n    key: \"mapState\",\n    value: function mapState(callback) {\n      _classPrivateFieldGet(this, _sourceSettings).map(callback);\n      _classPrivateFieldGet(this, _headersTree).buildTree();\n      _classPrivateFieldSet(this, _stateMatrix, generateMatrix(_classPrivateFieldGet(this, _headersTree).getRoots()));\n    }\n    /**\n     * Maps the current tree nodes with a callback. For each node the callback function\n     * is called. If the function returns value that value is added to returned array.\n     *\n     * @param {Function} callback A function that is called for every tree node.\n     *                            Each time the callback is called, the returned value is\n     *                            added to returned array.\n     * @returns {Array}\n     */\n  }, {\n    key: \"mapNodes\",\n    value: function mapNodes(callback) {\n      return arrayReduce(_classPrivateFieldGet(this, _headersTree).getRoots(), function (acc, rootNode) {\n        rootNode.walkDown(function (node) {\n          var result = callback(node.data);\n          if (result !== void 0) {\n            acc.push(result);\n          }\n        });\n        return acc;\n      }, []);\n    }\n    /**\n     * Triggers an action (e.g. \"collapse\") from the NodeModifiers module. The module\n     * modifies a tree structure in such a way as to obtain the correct structure consistent with the\n     * called action.\n     *\n     * @param {string} action An action name to trigger.\n     * @param {number} headerLevel Header level index (there is support for negative and positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {object|undefined}\n     */\n  }, {\n    key: \"triggerNodeModification\",\n    value: function triggerNodeModification(action, headerLevel, columnIndex) {\n      if (headerLevel < 0) {\n        headerLevel = this.rowCoordsToLevel(headerLevel);\n      }\n      var nodeToProcess = _classPrivateFieldGet(this, _headersTree).getNode(headerLevel, columnIndex);\n      var actionResult;\n      if (nodeToProcess) {\n        actionResult = _triggerNodeModification(action, nodeToProcess, columnIndex); // TODO (perf-tip): Trigger matrix generation once after multiple node modifications.\n\n        _classPrivateFieldSet(this, _stateMatrix, generateMatrix(_classPrivateFieldGet(this, _headersTree).getRoots()));\n      }\n      return actionResult;\n    }\n    /**\n     * Triggers an action (e.g. \"hide-column\") from the NodeModifiers module. The action is\n     * triggered starting from the lowest header. The module modifies a tree structure in\n     * such a way as to obtain the correct structure consistent with the called action.\n     *\n     * @param {string} action An action name to trigger.\n     * @param {number} columnIndex A visual column index.\n     * @returns {object|undefined}\n     */\n  }, {\n    key: \"triggerColumnModification\",\n    value: function triggerColumnModification(action, columnIndex) {\n      return this.triggerNodeModification(action, -1, columnIndex);\n    }\n    /* eslint-disable jsdoc/require-description-complete-sentence */\n\n    /**\n     * @memberof StateManager#\n     * @function rowCoordsToLevel\n     *\n     * Translates row coordinates into header level. The row coordinates counts from -1 to -N\n     * and describes headers counting from most closest to most distant from the table.\n     * The header levels are counted from 0 to N where 0 describes most distant header\n     * from the table.\n     *\n     *  Row coords             Header level\n     *           +--------------+\n     *       -3  │ A1 │ A1      │  0\n     *           +--------------+\n     *       -2  │ B1 │ B2 │ B3 │  1\n     *           +--------------+\n     *       -1  │ C1 │ C2 │ C3 │  2\n     *           +==============+\n     *           │    │    │    │\n     *           +--------------+\n     *           │    │    │    │\n     *\n     * @param {number} rowIndex A visual row index.\n     * @returns {number} Returns unsigned number.\n     */\n\n    /* eslint-enable jsdoc/require-description-complete-sentence */\n  }, {\n    key: \"rowCoordsToLevel\",\n    value: function rowCoordsToLevel(rowIndex) {\n      var layersCount = Math.max(this.getLayersCount(), 1);\n      var highestPossibleLevel = layersCount - 1;\n      var lowestPossibleLevel = 0;\n      return Math.min(Math.max(rowIndex + layersCount, lowestPossibleLevel), highestPossibleLevel);\n    }\n    /* eslint-disable jsdoc/require-description-complete-sentence */\n\n    /**\n     * @memberof StateManager#\n     * @function levelToRowCoords\n     *\n     * Translates header level into row coordinates. The row coordinates counts from -1 to -N\n     * and describes headers counting from most closest to most distant from the table.\n     * The header levels are counted from 0 to N where 0 describes most distant header\n     * from the table.\n     *\n     *  Header level            Row coords\n     *           +--------------+\n     *        0  │ A1 │ A1      │  -3\n     *           +--------------+\n     *        1  │ B1 │ B2 │ B3 │  -2\n     *           +--------------+\n     *        2  │ C1 │ C2 │ C3 │  -1\n     *           +==============+\n     *           │    │    │    │\n     *           +--------------+\n     *           │    │    │    │\n     *\n     * @param {number} headerLevel Header level index.\n     * @returns {number} Returns negative number.\n     */\n\n    /* eslint-enable jsdoc/require-description-complete-sentence */\n  }, {\n    key: \"levelToRowCoords\",\n    value: function levelToRowCoords(headerLevel) {\n      var layersCount = Math.max(this.getLayersCount(), 1);\n      var highestPossibleRow = -1;\n      var lowestPossibleRow = -layersCount;\n      return Math.min(Math.max(headerLevel - layersCount, lowestPossibleRow), highestPossibleRow);\n    }\n    /**\n     * Gets column header settings for a specified column and header index. The returned object contains\n     * all information necessary for header renderers. It contains header label, colspan length, or hidden\n     * flag.\n     *\n     * @param {number} headerLevel Header level (there is support for negative and positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {object|null}\n     */\n  }, {\n    key: \"getHeaderSettings\",\n    value: function getHeaderSettings(headerLevel, columnIndex) {\n      var _classPrivateFieldGet2, _classPrivateFieldGet3;\n      if (headerLevel < 0) {\n        headerLevel = this.rowCoordsToLevel(headerLevel);\n      }\n      if (headerLevel >= this.getLayersCount()) {\n        return null;\n      }\n      return (_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _stateMatrix)[headerLevel]) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3[columnIndex]) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : null;\n    }\n    /**\n     * Gets tree data that is connected to the column header. The returned object contains all information\n     * necessary for modifying tree structure (column collapsing, hiding, etc.). It contains a header\n     * label, colspan length, or visual column index that indicates which column index the node is rendered from.\n     *\n     * @param {number} headerLevel Header level (there is support for negative and positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {object|null}\n     */\n  }, {\n    key: \"getHeaderTreeNodeData\",\n    value: function getHeaderTreeNodeData(headerLevel, columnIndex) {\n      if (headerLevel < 0) {\n        headerLevel = this.rowCoordsToLevel(headerLevel);\n      }\n      var node = _classPrivateFieldGet(this, _headersTree).getNode(headerLevel, columnIndex);\n      if (!node) {\n        return null;\n      }\n      return _objectSpread({}, node.data);\n    }\n    /**\n     * The method is helpful in cases where the column index targets in-between currently\n     * collapsed column. In that case, the method returns the left-most column index\n     * where the nested header begins.\n     *\n     * @param {number} headerLevel Header level (there is support for negative and positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {number}\n     */\n  }, {\n    key: \"findLeftMostColumnIndex\",\n    value: function findLeftMostColumnIndex(headerLevel, columnIndex) {\n      var _this$getHeaderSettin;\n      var _ref2 = (_this$getHeaderSettin = this.getHeaderSettings(headerLevel, columnIndex)) !== null && _this$getHeaderSettin !== void 0 ? _this$getHeaderSettin : {\n          isRoot: true\n        },\n        isRoot = _ref2.isRoot;\n      if (isRoot) {\n        return columnIndex;\n      }\n      var stepBackColumn = columnIndex - 1;\n      while (stepBackColumn >= 0) {\n        var _this$getHeaderSettin2;\n        var _ref3 = (_this$getHeaderSettin2 = this.getHeaderSettings(headerLevel, stepBackColumn)) !== null && _this$getHeaderSettin2 !== void 0 ? _this$getHeaderSettin2 : {\n            isRoot: true\n          },\n          isRootNode = _ref3.isRoot;\n        if (isRootNode) {\n          break;\n        }\n        stepBackColumn -= 1;\n      }\n      return stepBackColumn;\n    }\n    /**\n     * Gets a total number of headers levels.\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"getLayersCount\",\n    value: function getLayersCount() {\n      return _classPrivateFieldGet(this, _sourceSettings).getLayersCount();\n    }\n    /**\n     * Gets a total number of columns count.\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"getColumnsCount\",\n    value: function getColumnsCount() {\n      return _classPrivateFieldGet(this, _sourceSettings).getColumnsCount();\n    }\n    /**\n     * Clears the column state manager to the initial state.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldSet(this, _stateMatrix, []);\n      _classPrivateFieldGet(this, _sourceSettings).clear();\n      _classPrivateFieldGet(this, _headersTree).clear();\n    }\n  }]);\n  return StateManager;\n}();\nexport { StateManager as default };","map":{"version":3,"names":["_excluded","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call","sourceKeys","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","_classPrivateFieldInitSpec","privateMap","_checkPrivateRedeclaration","set","privateCollection","has","_classPrivateFieldSet","receiver","_classExtractFieldDescriptor","_classApplyDescriptorSet","_classPrivateFieldGet","_classApplyDescriptorGet","action","get","arrayMap","arrayReduce","SourceSettings","HeadersTree","triggerNodeModification","_triggerNodeModification","generateMatrix","_sourceSettings","WeakMap","_headersTree","_stateMatrix","StateManager","setState","nestedHeadersSettings","setData","hasError","buildTree","ex","clear","getRoots","setColumnsLimit","columnsCount","mergeStateWith","settings","_this","transformedSettings","_ref","row","rest","rowCoordsToLevel","mergeWith","mapState","callback","map","mapNodes","acc","rootNode","walkDown","node","result","data","headerLevel","columnIndex","nodeToProcess","getNode","actionResult","triggerColumnModification","rowIndex","layersCount","Math","max","getLayersCount","highestPossibleLevel","lowestPossibleLevel","min","levelToRowCoords","highestPossibleRow","lowestPossibleRow","getHeaderSettings","_classPrivateFieldGet2","_classPrivateFieldGet3","getHeaderTreeNodeData","findLeftMostColumnIndex","_this$getHeaderSettin","_ref2","isRoot","stepBackColumn","_this$getHeaderSettin2","_ref3","isRootNode","getColumnsCount","default"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/plugins/nestedHeaders/stateManager/index.mjs"],"sourcesContent":["import \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nvar _excluded = [\"row\"];\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nimport { arrayMap, arrayReduce } from \"../../../helpers/array.mjs\";\nimport SourceSettings from \"./sourceSettings.mjs\";\nimport HeadersTree from \"./headersTree.mjs\";\nimport { triggerNodeModification as _triggerNodeModification } from \"./nodeModifiers/index.mjs\";\nimport { generateMatrix } from \"./matrixGenerator.mjs\";\n/**\n * The state manager is a source of truth for nested headers configuration.\n * The state generation process is divided into three stages.\n *\n *   +---------------------+  1. User-defined configuration normalization;\n *   │                     │  The source settings class normalizes and shares API for\n *   │   SourceSettings    │  raw settings passed by the developer. It is only consumed by\n *   │                     │  the header tree module.\n *   +---------------------+\n *             │\n *            \\│/\n *   +---------------------+  2. Building a tree structure for validation and easier node manipulation;\n *   │                     │  The header tree generates a tree based on source settings for future\n *   │     HeadersTree     │  node manipulation (such as collapsible columns feature). While generating a tree\n *   │                     │  the source settings is checked to see if the configuration has overlapping headers.\n *   +---------------------+  If `true` the colspan matrix generation is skipped, overlapped headers are not supported.\n *             │\n *            \\│/\n *   +---------------------+  3. Matrix generation;\n *   │                     │  Based on built trees the matrix generation is performed. That part of code\n *   │  matrix generation  │  generates an array structure similar to normalized data from the SourceSettings\n *   │                     │  but with the difference that this structure contains column settings which changed\n *   +---------------------+  during runtime (after the tree manipulation) e.q after collapse or expand column.\n *                            That settings describes how the TH element should be modified (colspan attribute,\n *                            CSS classes, etc) for a specific column and layer level.\n *\n * @class StateManager\n */\n\nvar _sourceSettings = /*#__PURE__*/new WeakMap();\n\nvar _headersTree = /*#__PURE__*/new WeakMap();\n\nvar _stateMatrix = /*#__PURE__*/new WeakMap();\n\nvar StateManager = /*#__PURE__*/function () {\n  function StateManager() {\n    _classCallCheck(this, StateManager);\n\n    _classPrivateFieldInitSpec(this, _sourceSettings, {\n      writable: true,\n      value: new SourceSettings()\n    });\n\n    _classPrivateFieldInitSpec(this, _headersTree, {\n      writable: true,\n      value: new HeadersTree(_classPrivateFieldGet(this, _sourceSettings))\n    });\n\n    _classPrivateFieldInitSpec(this, _stateMatrix, {\n      writable: true,\n      value: [[]]\n    });\n  }\n\n  _createClass(StateManager, [{\n    key: \"setState\",\n    value:\n    /**\n     * Sets a new state for the nested headers plugin based on settings passed\n     * directly to the plugin.\n     *\n     * @param {Array[]} nestedHeadersSettings The user-defined settings.\n     * @returns {boolean} Returns `true` if the settings are processed correctly, `false` otherwise.\n     */\n    function setState(nestedHeadersSettings) {\n      _classPrivateFieldGet(this, _sourceSettings).setData(nestedHeadersSettings);\n\n      var hasError = false;\n\n      try {\n        _classPrivateFieldGet(this, _headersTree).buildTree();\n      } catch (ex) {\n        _classPrivateFieldGet(this, _headersTree).clear();\n\n        _classPrivateFieldGet(this, _sourceSettings).clear();\n\n        hasError = true;\n      }\n\n      _classPrivateFieldSet(this, _stateMatrix, generateMatrix(_classPrivateFieldGet(this, _headersTree).getRoots()));\n\n      return hasError;\n    }\n    /**\n     * Sets columns limit to the state will be trimmed. All headers (colspans) which\n     * overlap the column limit will be reduced to keep the structure solid.\n     *\n     * @param {number} columnsCount The number of columns to limit to.\n     */\n\n  }, {\n    key: \"setColumnsLimit\",\n    value: function setColumnsLimit(columnsCount) {\n      _classPrivateFieldGet(this, _sourceSettings).setColumnsLimit(columnsCount);\n    }\n    /**\n     * Merges settings with current plugin state.\n     *\n     * By default only foreign keys are merged with source state and passed to the tree. But only\n     * known keys are exported to matrix.\n     *\n     * @param {object[]} settings An array of objects to merge with the current source settings.\n     *                            It is a requirement that every object has `row` and `col` properties\n     *                            which points to the specific header settings object.\n     */\n\n  }, {\n    key: \"mergeStateWith\",\n    value: function mergeStateWith(settings) {\n      var _this = this;\n\n      var transformedSettings = arrayMap(settings, function (_ref) {\n        var row = _ref.row,\n            rest = _objectWithoutProperties(_ref, _excluded);\n\n        return _objectSpread({\n          row: row < 0 ? _this.rowCoordsToLevel(row) : row\n        }, rest);\n      });\n\n      _classPrivateFieldGet(this, _sourceSettings).mergeWith(transformedSettings);\n\n      _classPrivateFieldGet(this, _headersTree).buildTree();\n\n      _classPrivateFieldSet(this, _stateMatrix, generateMatrix(_classPrivateFieldGet(this, _headersTree).getRoots()));\n    }\n    /**\n     * Maps the current state with a callback. For each header settings the callback function\n     * is called. If the function returns value that value is merged with the state.\n     *\n     * By default only foreign keys are merged with source state and passed to the tree. But only\n     * known keys are exported to matrix.\n     *\n     * @param {Function} callback A function that is called for every header source settings.\n     *                            Each time the callback is called, the returned value extends\n     *                            header settings.\n     */\n\n  }, {\n    key: \"mapState\",\n    value: function mapState(callback) {\n      _classPrivateFieldGet(this, _sourceSettings).map(callback);\n\n      _classPrivateFieldGet(this, _headersTree).buildTree();\n\n      _classPrivateFieldSet(this, _stateMatrix, generateMatrix(_classPrivateFieldGet(this, _headersTree).getRoots()));\n    }\n    /**\n     * Maps the current tree nodes with a callback. For each node the callback function\n     * is called. If the function returns value that value is added to returned array.\n     *\n     * @param {Function} callback A function that is called for every tree node.\n     *                            Each time the callback is called, the returned value is\n     *                            added to returned array.\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"mapNodes\",\n    value: function mapNodes(callback) {\n      return arrayReduce(_classPrivateFieldGet(this, _headersTree).getRoots(), function (acc, rootNode) {\n        rootNode.walkDown(function (node) {\n          var result = callback(node.data);\n\n          if (result !== void 0) {\n            acc.push(result);\n          }\n        });\n        return acc;\n      }, []);\n    }\n    /**\n     * Triggers an action (e.g. \"collapse\") from the NodeModifiers module. The module\n     * modifies a tree structure in such a way as to obtain the correct structure consistent with the\n     * called action.\n     *\n     * @param {string} action An action name to trigger.\n     * @param {number} headerLevel Header level index (there is support for negative and positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {object|undefined}\n     */\n\n  }, {\n    key: \"triggerNodeModification\",\n    value: function triggerNodeModification(action, headerLevel, columnIndex) {\n      if (headerLevel < 0) {\n        headerLevel = this.rowCoordsToLevel(headerLevel);\n      }\n\n      var nodeToProcess = _classPrivateFieldGet(this, _headersTree).getNode(headerLevel, columnIndex);\n\n      var actionResult;\n\n      if (nodeToProcess) {\n        actionResult = _triggerNodeModification(action, nodeToProcess, columnIndex); // TODO (perf-tip): Trigger matrix generation once after multiple node modifications.\n\n        _classPrivateFieldSet(this, _stateMatrix, generateMatrix(_classPrivateFieldGet(this, _headersTree).getRoots()));\n      }\n\n      return actionResult;\n    }\n    /**\n     * Triggers an action (e.g. \"hide-column\") from the NodeModifiers module. The action is\n     * triggered starting from the lowest header. The module modifies a tree structure in\n     * such a way as to obtain the correct structure consistent with the called action.\n     *\n     * @param {string} action An action name to trigger.\n     * @param {number} columnIndex A visual column index.\n     * @returns {object|undefined}\n     */\n\n  }, {\n    key: \"triggerColumnModification\",\n    value: function triggerColumnModification(action, columnIndex) {\n      return this.triggerNodeModification(action, -1, columnIndex);\n    }\n    /* eslint-disable jsdoc/require-description-complete-sentence */\n\n    /**\n     * @memberof StateManager#\n     * @function rowCoordsToLevel\n     *\n     * Translates row coordinates into header level. The row coordinates counts from -1 to -N\n     * and describes headers counting from most closest to most distant from the table.\n     * The header levels are counted from 0 to N where 0 describes most distant header\n     * from the table.\n     *\n     *  Row coords             Header level\n     *           +--------------+\n     *       -3  │ A1 │ A1      │  0\n     *           +--------------+\n     *       -2  │ B1 │ B2 │ B3 │  1\n     *           +--------------+\n     *       -1  │ C1 │ C2 │ C3 │  2\n     *           +==============+\n     *           │    │    │    │\n     *           +--------------+\n     *           │    │    │    │\n     *\n     * @param {number} rowIndex A visual row index.\n     * @returns {number} Returns unsigned number.\n     */\n\n    /* eslint-enable jsdoc/require-description-complete-sentence */\n\n  }, {\n    key: \"rowCoordsToLevel\",\n    value: function rowCoordsToLevel(rowIndex) {\n      var layersCount = Math.max(this.getLayersCount(), 1);\n      var highestPossibleLevel = layersCount - 1;\n      var lowestPossibleLevel = 0;\n      return Math.min(Math.max(rowIndex + layersCount, lowestPossibleLevel), highestPossibleLevel);\n    }\n    /* eslint-disable jsdoc/require-description-complete-sentence */\n\n    /**\n     * @memberof StateManager#\n     * @function levelToRowCoords\n     *\n     * Translates header level into row coordinates. The row coordinates counts from -1 to -N\n     * and describes headers counting from most closest to most distant from the table.\n     * The header levels are counted from 0 to N where 0 describes most distant header\n     * from the table.\n     *\n     *  Header level            Row coords\n     *           +--------------+\n     *        0  │ A1 │ A1      │  -3\n     *           +--------------+\n     *        1  │ B1 │ B2 │ B3 │  -2\n     *           +--------------+\n     *        2  │ C1 │ C2 │ C3 │  -1\n     *           +==============+\n     *           │    │    │    │\n     *           +--------------+\n     *           │    │    │    │\n     *\n     * @param {number} headerLevel Header level index.\n     * @returns {number} Returns negative number.\n     */\n\n    /* eslint-enable jsdoc/require-description-complete-sentence */\n\n  }, {\n    key: \"levelToRowCoords\",\n    value: function levelToRowCoords(headerLevel) {\n      var layersCount = Math.max(this.getLayersCount(), 1);\n      var highestPossibleRow = -1;\n      var lowestPossibleRow = -layersCount;\n      return Math.min(Math.max(headerLevel - layersCount, lowestPossibleRow), highestPossibleRow);\n    }\n    /**\n     * Gets column header settings for a specified column and header index. The returned object contains\n     * all information necessary for header renderers. It contains header label, colspan length, or hidden\n     * flag.\n     *\n     * @param {number} headerLevel Header level (there is support for negative and positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {object|null}\n     */\n\n  }, {\n    key: \"getHeaderSettings\",\n    value: function getHeaderSettings(headerLevel, columnIndex) {\n      var _classPrivateFieldGet2, _classPrivateFieldGet3;\n\n      if (headerLevel < 0) {\n        headerLevel = this.rowCoordsToLevel(headerLevel);\n      }\n\n      if (headerLevel >= this.getLayersCount()) {\n        return null;\n      }\n\n      return (_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _stateMatrix)[headerLevel]) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3[columnIndex]) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : null;\n    }\n    /**\n     * Gets tree data that is connected to the column header. The returned object contains all information\n     * necessary for modifying tree structure (column collapsing, hiding, etc.). It contains a header\n     * label, colspan length, or visual column index that indicates which column index the node is rendered from.\n     *\n     * @param {number} headerLevel Header level (there is support for negative and positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {object|null}\n     */\n\n  }, {\n    key: \"getHeaderTreeNodeData\",\n    value: function getHeaderTreeNodeData(headerLevel, columnIndex) {\n      if (headerLevel < 0) {\n        headerLevel = this.rowCoordsToLevel(headerLevel);\n      }\n\n      var node = _classPrivateFieldGet(this, _headersTree).getNode(headerLevel, columnIndex);\n\n      if (!node) {\n        return null;\n      }\n\n      return _objectSpread({}, node.data);\n    }\n    /**\n     * The method is helpful in cases where the column index targets in-between currently\n     * collapsed column. In that case, the method returns the left-most column index\n     * where the nested header begins.\n     *\n     * @param {number} headerLevel Header level (there is support for negative and positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"findLeftMostColumnIndex\",\n    value: function findLeftMostColumnIndex(headerLevel, columnIndex) {\n      var _this$getHeaderSettin;\n\n      var _ref2 = (_this$getHeaderSettin = this.getHeaderSettings(headerLevel, columnIndex)) !== null && _this$getHeaderSettin !== void 0 ? _this$getHeaderSettin : {\n        isRoot: true\n      },\n          isRoot = _ref2.isRoot;\n\n      if (isRoot) {\n        return columnIndex;\n      }\n\n      var stepBackColumn = columnIndex - 1;\n\n      while (stepBackColumn >= 0) {\n        var _this$getHeaderSettin2;\n\n        var _ref3 = (_this$getHeaderSettin2 = this.getHeaderSettings(headerLevel, stepBackColumn)) !== null && _this$getHeaderSettin2 !== void 0 ? _this$getHeaderSettin2 : {\n          isRoot: true\n        },\n            isRootNode = _ref3.isRoot;\n\n        if (isRootNode) {\n          break;\n        }\n\n        stepBackColumn -= 1;\n      }\n\n      return stepBackColumn;\n    }\n    /**\n     * Gets a total number of headers levels.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getLayersCount\",\n    value: function getLayersCount() {\n      return _classPrivateFieldGet(this, _sourceSettings).getLayersCount();\n    }\n    /**\n     * Gets a total number of columns count.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getColumnsCount\",\n    value: function getColumnsCount() {\n      return _classPrivateFieldGet(this, _sourceSettings).getColumnsCount();\n    }\n    /**\n     * Clears the column state manager to the initial state.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldSet(this, _stateMatrix, []);\n\n      _classPrivateFieldGet(this, _sourceSettings).clear();\n\n      _classPrivateFieldGet(this, _headersTree).clear();\n    }\n  }]);\n\n  return StateManager;\n}();\n\nexport { StateManager as default };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
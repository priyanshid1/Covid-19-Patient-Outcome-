{"ast":null,"code":"import { defineGetter } from \"../../../../../helpers/object.mjs\";\nvar MIXIN_NAME = 'stickyRowsBottom';\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the bottom rows in the vertical axis.\n *\n * @type {object}\n */\n\nvar stickyRowsBottom = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getFirstRenderedRow: function getFirstRenderedRow() {\n    var totalRows = this.wot.getSetting('totalRows');\n    var fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');\n    var index = totalRows - fixedRowsBottom;\n    if (totalRows === 0 || fixedRowsBottom === 0) {\n      return -1;\n    }\n    if (index < 0) {\n      return 0;\n    }\n    return index;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   */\n  getFirstVisibleRow: function getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getLastRenderedRow: function getLastRenderedRow() {\n    return this.wot.getSetting('totalRows') - 1;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   */\n  getLastVisibleRow: function getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   */\n  getRenderedRowsCount: function getRenderedRowsCount() {\n    var totalRows = this.wot.getSetting('totalRows');\n    return Math.min(this.wot.getSetting('fixedRowsBottom'), totalRows);\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   */\n  getVisibleRowsCount: function getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  }\n};\ndefineGetter(stickyRowsBottom, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyRowsBottom;","map":{"version":3,"names":["defineGetter","MIXIN_NAME","stickyRowsBottom","getFirstRenderedRow","totalRows","wot","getSetting","fixedRowsBottom","index","getFirstVisibleRow","getLastRenderedRow","getLastVisibleRow","getRenderedRowsCount","Math","min","getVisibleRowsCount","writable","enumerable"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/3rdparty/walkontable/src/table/mixin/stickyRowsBottom.mjs"],"sourcesContent":["import { defineGetter } from \"../../../../../helpers/object.mjs\";\nvar MIXIN_NAME = 'stickyRowsBottom';\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the bottom rows in the vertical axis.\n *\n * @type {object}\n */\n\nvar stickyRowsBottom = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getFirstRenderedRow: function getFirstRenderedRow() {\n    var totalRows = this.wot.getSetting('totalRows');\n    var fixedRowsBottom = this.wot.getSetting('fixedRowsBottom');\n    var index = totalRows - fixedRowsBottom;\n\n    if (totalRows === 0 || fixedRowsBottom === 0) {\n      return -1;\n    }\n\n    if (index < 0) {\n      return 0;\n    }\n\n    return index;\n  },\n\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   */\n  getFirstVisibleRow: function getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getLastRenderedRow: function getLastRenderedRow() {\n    return this.wot.getSetting('totalRows') - 1;\n  },\n\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   */\n  getLastVisibleRow: function getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   */\n  getRenderedRowsCount: function getRenderedRowsCount() {\n    var totalRows = this.wot.getSetting('totalRows');\n    return Math.min(this.wot.getSetting('fixedRowsBottom'), totalRows);\n  },\n\n  /**\n   * Get the number of fully visible rows in the viewport.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   */\n  getVisibleRowsCount: function getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  }\n};\ndefineGetter(stickyRowsBottom, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyRowsBottom;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mCAAmC;AAChE,IAAIC,UAAU,GAAG,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,gBAAgB,GAAG;EACrB;AACF;AACA;AACA;AACA;EACEC,mBAAmB,EAAE,SAASA,mBAAmBA,CAAA,EAAG;IAClD,IAAIC,SAAS,GAAG,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC,WAAW,CAAC;IAChD,IAAIC,eAAe,GAAG,IAAI,CAACF,GAAG,CAACC,UAAU,CAAC,iBAAiB,CAAC;IAC5D,IAAIE,KAAK,GAAGJ,SAAS,GAAGG,eAAe;IAEvC,IAAIH,SAAS,KAAK,CAAC,IAAIG,eAAe,KAAK,CAAC,EAAE;MAC5C,OAAO,CAAC,CAAC;IACX;IAEA,IAAIC,KAAK,GAAG,CAAC,EAAE;MACb,OAAO,CAAC;IACV;IAEA,OAAOA,KAAK;EACd,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,kBAAkB,EAAE,SAASA,kBAAkBA,CAAA,EAAG;IAChD,OAAO,IAAI,CAACN,mBAAmB,CAAC,CAAC;EACnC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEO,kBAAkB,EAAE,SAASA,kBAAkBA,CAAA,EAAG;IAChD,OAAO,IAAI,CAACL,GAAG,CAACC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC;EAC7C,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEK,iBAAiB,EAAE,SAASA,iBAAiBA,CAAA,EAAG;IAC9C,OAAO,IAAI,CAACD,kBAAkB,CAAC,CAAC;EAClC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEE,oBAAoB,EAAE,SAASA,oBAAoBA,CAAA,EAAG;IACpD,IAAIR,SAAS,GAAG,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC,WAAW,CAAC;IAChD,OAAOO,IAAI,CAACC,GAAG,CAAC,IAAI,CAACT,GAAG,CAACC,UAAU,CAAC,iBAAiB,CAAC,EAAEF,SAAS,CAAC;EACpE,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEW,mBAAmB,EAAE,SAASA,mBAAmBA,CAAA,EAAG;IAClD,OAAO,IAAI,CAACH,oBAAoB,CAAC,CAAC;EACpC;AACF,CAAC;AACDZ,YAAY,CAACE,gBAAgB,EAAE,YAAY,EAAED,UAAU,EAAE;EACvDe,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,eAAef,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
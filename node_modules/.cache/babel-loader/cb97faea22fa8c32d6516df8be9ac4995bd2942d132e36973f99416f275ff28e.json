{"ast":null,"code":"import LinkedList from \"../dataStructures/linkedList.mjs\";\n/**\n * Refactored implementation of mergeSort (part of javascript-algorithms project) by Github users:\n * mgechev, AndriiHeonia and lekkas (part of javascript-algorithms project - all project contributors\n * at repository website).\n *\n * Link to repository: https://github.com/mgechev/javascript-algorithms.\n */\n\n/**\n * Specifies a function that defines the sort order. The array is sorted according to each\n * character's Unicode code point value, according to the string conversion of each element.\n *\n * @param {*} a The first compared element.\n * @param {*} b The second compared element.\n * @returns {number}\n */\n\nvar defaultCompareFunction = function defaultCompareFunction(a, b) {\n  // sort lexically\n  var firstValue = a.toString();\n  var secondValue = b.toString();\n  if (firstValue === secondValue) {\n    return 0;\n  } else if (firstValue < secondValue) {\n    return -1;\n  }\n  return 1;\n};\n/**\n * Mergesort method which is recursively called for sorting the input array.\n *\n * @param {Array} array The array which should be sorted.\n * @param {Function} compareFunction Compares two items in an array. If compareFunction is not supplied,\n * elements are sorted by converting them to strings and comparing strings in Unicode code point order.\n * @param {number} startIndex Left side of the subarray.\n * @param {number} endIndex Right side of the subarray.\n * @returns {Array} Array with sorted subarray.\n */\n\nexport default function mergeSort(array) {\n  var compareFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultCompareFunction;\n  var startIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var endIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : array.length;\n\n  // eslint-disable-line max-len\n  if (Math.abs(endIndex - startIndex) <= 1) {\n    return [];\n  }\n  var middleIndex = Math.ceil((startIndex + endIndex) / 2);\n  mergeSort(array, compareFunction, startIndex, middleIndex);\n  mergeSort(array, compareFunction, middleIndex, endIndex);\n  return merge(array, compareFunction, startIndex, middleIndex, endIndex);\n}\n/**\n * Devides and sort merges two subarrays of given array.\n *\n * @param {Array} array The array which subarrays should be sorted.\n * @param {Function} compareFunction The function with comparision logic.\n * @param {number} startIndex The start of the first subarray.\n * This subarray is with end middle - 1.\n * @param {number} middleIndex The start of the second array.\n * @param {number} endIndex End - 1 is the end of the second array.\n * @returns {Array} The array with sorted subarray.\n */\n\nfunction merge(array, compareFunction, startIndex, middleIndex, endIndex) {\n  var leftElements = new LinkedList();\n  var rightElements = new LinkedList();\n  var leftSize = middleIndex - startIndex;\n  var rightSize = endIndex - middleIndex;\n  var maxSize = Math.max(leftSize, rightSize);\n  var size = endIndex - startIndex;\n  for (var _i = 0; _i < maxSize; _i += 1) {\n    if (_i < leftSize) {\n      leftElements.push(array[startIndex + _i]);\n    }\n    if (_i < rightSize) {\n      rightElements.push(array[middleIndex + _i]);\n    }\n  }\n  var i = 0;\n  while (i < size) {\n    if (leftElements.first && rightElements.first) {\n      if (compareFunction(leftElements.first.data, rightElements.first.data) > 0) {\n        array[startIndex + i] = rightElements.shift().data;\n      } else {\n        array[startIndex + i] = leftElements.shift().data;\n      }\n    } else if (leftElements.first) {\n      array[startIndex + i] = leftElements.shift().data;\n    } else {\n      array[startIndex + i] = rightElements.shift().data;\n    }\n    i += 1;\n  }\n  return array;\n}","map":{"version":3,"names":["LinkedList","defaultCompareFunction","a","b","firstValue","toString","secondValue","mergeSort","array","compareFunction","arguments","length","undefined","startIndex","endIndex","Math","abs","middleIndex","ceil","merge","leftElements","rightElements","leftSize","rightSize","maxSize","max","size","_i","push","i","first","data","shift"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/utils/sortingAlgorithms/mergeSort.mjs"],"sourcesContent":["import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport LinkedList from \"../dataStructures/linkedList.mjs\";\n/**\n * Refactored implementation of mergeSort (part of javascript-algorithms project) by Github users:\n * mgechev, AndriiHeonia and lekkas (part of javascript-algorithms project - all project contributors\n * at repository website).\n *\n * Link to repository: https://github.com/mgechev/javascript-algorithms.\n */\n\n/**\n * Specifies a function that defines the sort order. The array is sorted according to each\n * character's Unicode code point value, according to the string conversion of each element.\n *\n * @param {*} a The first compared element.\n * @param {*} b The second compared element.\n * @returns {number}\n */\n\nvar defaultCompareFunction = function defaultCompareFunction(a, b) {\n  // sort lexically\n  var firstValue = a.toString();\n  var secondValue = b.toString();\n\n  if (firstValue === secondValue) {\n    return 0;\n  } else if (firstValue < secondValue) {\n    return -1;\n  }\n\n  return 1;\n};\n/**\n * Mergesort method which is recursively called for sorting the input array.\n *\n * @param {Array} array The array which should be sorted.\n * @param {Function} compareFunction Compares two items in an array. If compareFunction is not supplied,\n * elements are sorted by converting them to strings and comparing strings in Unicode code point order.\n * @param {number} startIndex Left side of the subarray.\n * @param {number} endIndex Right side of the subarray.\n * @returns {Array} Array with sorted subarray.\n */\n\n\nexport default function mergeSort(array) {\n  var compareFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultCompareFunction;\n  var startIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var endIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : array.length;\n\n  // eslint-disable-line max-len\n  if (Math.abs(endIndex - startIndex) <= 1) {\n    return [];\n  }\n\n  var middleIndex = Math.ceil((startIndex + endIndex) / 2);\n  mergeSort(array, compareFunction, startIndex, middleIndex);\n  mergeSort(array, compareFunction, middleIndex, endIndex);\n  return merge(array, compareFunction, startIndex, middleIndex, endIndex);\n}\n/**\n * Devides and sort merges two subarrays of given array.\n *\n * @param {Array} array The array which subarrays should be sorted.\n * @param {Function} compareFunction The function with comparision logic.\n * @param {number} startIndex The start of the first subarray.\n * This subarray is with end middle - 1.\n * @param {number} middleIndex The start of the second array.\n * @param {number} endIndex End - 1 is the end of the second array.\n * @returns {Array} The array with sorted subarray.\n */\n\nfunction merge(array, compareFunction, startIndex, middleIndex, endIndex) {\n  var leftElements = new LinkedList();\n  var rightElements = new LinkedList();\n  var leftSize = middleIndex - startIndex;\n  var rightSize = endIndex - middleIndex;\n  var maxSize = Math.max(leftSize, rightSize);\n  var size = endIndex - startIndex;\n\n  for (var _i = 0; _i < maxSize; _i += 1) {\n    if (_i < leftSize) {\n      leftElements.push(array[startIndex + _i]);\n    }\n\n    if (_i < rightSize) {\n      rightElements.push(array[middleIndex + _i]);\n    }\n  }\n\n  var i = 0;\n\n  while (i < size) {\n    if (leftElements.first && rightElements.first) {\n      if (compareFunction(leftElements.first.data, rightElements.first.data) > 0) {\n        array[startIndex + i] = rightElements.shift().data;\n      } else {\n        array[startIndex + i] = leftElements.shift().data;\n      }\n    } else if (leftElements.first) {\n      array[startIndex + i] = leftElements.shift().data;\n    } else {\n      array[startIndex + i] = rightElements.shift().data;\n    }\n\n    i += 1;\n  }\n\n  return array;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _classCallCheck from \"/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { getScrollbarWidth } from \"./../../../../helpers/dom/element.mjs\";\nimport { ColumnStretching } from \"./columnStretching.mjs\";\n/**\n * Column utils class contains all necessary information about sizes of the columns.\n *\n * @class {ColumnUtils}\n */\nvar ColumnUtils = /*#__PURE__*/function () {\n  /**\n   * @param {TableDao} dataAccessObject The table Data Access Object.\n   * @param {Settings} wtSettings The walkontable settings.\n   */\n  function ColumnUtils(dataAccessObject, wtSettings) {\n    var _this = this;\n    _classCallCheck(this, ColumnUtils);\n    /**\n     * @type {TableDao}\n     */\n    _defineProperty(this, \"dataAccessObject\", void 0);\n    /**\n     * @type {Settings}\n     */\n    _defineProperty(this, \"wtSettings\", void 0);\n    /**\n     * @type {Map<number, number>}\n     */\n    _defineProperty(this, \"headerWidths\", new Map());\n    /**\n     * @type {ColumnStretching}\n     */\n    _defineProperty(this, \"stretching\", void 0);\n    this.dataAccessObject = dataAccessObject;\n    this.wtSettings = wtSettings;\n    this.stretching = new ColumnStretching({\n      totalColumns: function totalColumns() {\n        return _this.wtSettings.getSetting('totalColumns');\n      },\n      stretchMode: function stretchMode() {\n        return _this.wtSettings.getSetting('stretchH');\n      },\n      stretchingColumnWidthFn: function stretchingColumnWidthFn(stretchedWidth, column) {\n        return _this.wtSettings.getSetting('onBeforeStretchingColumnWidth', stretchedWidth, column);\n      },\n      columnWidthFn: function columnWidthFn(sourceCol) {\n        return _this.dataAccessObject.wtTable.getColumnWidth(sourceCol);\n      }\n    });\n  }\n\n  /**\n   * Returns column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  return _createClass(ColumnUtils, [{\n    key: \"getWidth\",\n    value: function getWidth(sourceIndex) {\n      var width = this.wtSettings.getSetting('columnWidth', sourceIndex) || this.wtSettings.getSetting('defaultColumnWidth');\n      return width;\n    }\n\n    /**\n     * Returns stretched column width based on passed source index.\n     *\n     * @param {number} sourceIndex Column source index.\n     * @returns {number}\n     */\n  }, {\n    key: \"getStretchedColumnWidth\",\n    value: function getStretchedColumnWidth(sourceIndex) {\n      var width = this.getWidth(sourceIndex);\n      var stretchedWidth = this.stretching.getStretchedColumnWidth(sourceIndex, width);\n      if (stretchedWidth) {\n        width = stretchedWidth;\n      }\n      return width;\n    }\n\n    /**\n     * Returns column header height based on passed header level.\n     *\n     * @param {number} level Column header level.\n     * @returns {number}\n     */\n  }, {\n    key: \"getHeaderHeight\",\n    value: function getHeaderHeight(level) {\n      var height = this.wtSettings.getSetting('defaultRowHeight');\n      var oversizedHeight = this.dataAccessObject.wtViewport.oversizedColumnHeaders[level];\n      if (oversizedHeight !== undefined) {\n        height = height ? Math.max(height, oversizedHeight) : oversizedHeight;\n      }\n      return height;\n    }\n\n    /**\n     * Returns column header width based on passed source index.\n     *\n     * @param {number} sourceIndex Column source index.\n     * @returns {number}\n     */\n  }, {\n    key: \"getHeaderWidth\",\n    value: function getHeaderWidth(sourceIndex) {\n      return this.headerWidths.get(this.dataAccessObject.wtTable.columnFilter.sourceToRendered(sourceIndex));\n    }\n\n    /**\n     * Refreshes the stretching column width by recalculating the widths of the columns.\n     */\n  }, {\n    key: \"refreshStretching\",\n    value: function refreshStretching() {\n      var _this$dataAccessObjec = this.dataAccessObject,\n        wtTable = _this$dataAccessObjec.wtTable,\n        wtViewport = _this$dataAccessObjec.wtViewport,\n        cloneSource = _this$dataAccessObjec.cloneSource;\n      var mainHolder = cloneSource ? cloneSource.wtTable.holder : wtTable.holder;\n      var scrollbarCompensation = mainHolder.offsetHeight < mainHolder.scrollHeight ? getScrollbarWidth() : 0;\n      this.stretching.refreshStretching(wtViewport.getViewportWidth() - scrollbarCompensation);\n    }\n\n    /**\n     * Calculates column header widths that can be retrieved from the cache.\n     */\n  }, {\n    key: \"calculateWidths\",\n    value: function calculateWidths() {\n      var wtSettings = this.wtSettings;\n      var rowHeaderWidthSetting = wtSettings.getSetting('rowHeaderWidth');\n      this.refreshStretching();\n      rowHeaderWidthSetting = wtSettings.getSetting('onModifyRowHeaderWidth', rowHeaderWidthSetting);\n      if (rowHeaderWidthSetting !== null && rowHeaderWidthSetting !== undefined) {\n        var rowHeadersCount = wtSettings.getSetting('rowHeaders').length;\n        var defaultColumnWidth = wtSettings.getSetting('defaultColumnWidth');\n        for (var visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n          var width = Array.isArray(rowHeaderWidthSetting) ? rowHeaderWidthSetting[visibleColumnIndex] : rowHeaderWidthSetting;\n          width = width === null || width === undefined ? defaultColumnWidth : width;\n          this.headerWidths.set(visibleColumnIndex, width);\n        }\n      }\n    }\n  }]);\n}();\nexport { ColumnUtils as default };","map":{"version":3,"names":["_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","getScrollbarWidth","ColumnStretching","ColumnUtils","dataAccessObject","wtSettings","_this","_classCallCheck","Map","stretching","totalColumns","getSetting","stretchMode","stretchingColumnWidthFn","stretchedWidth","column","columnWidthFn","sourceCol","wtTable","getColumnWidth","_createClass","key","getWidth","sourceIndex","width","getStretchedColumnWidth","getHeaderHeight","level","height","oversizedHeight","wtViewport","oversizedColumnHeaders","undefined","Math","max","getHeaderWidth","headerWidths","get","columnFilter","sourceToRendered","refreshStretching","_this$dataAccessObjec","cloneSource","mainHolder","holder","scrollbarCompensation","offsetHeight","scrollHeight","getViewportWidth","calculateWidths","rowHeaderWidthSetting","rowHeadersCount","length","defaultColumnWidth","visibleColumnIndex","Array","isArray","set","default"],"sources":["/Users/priyadeliwala/node_modules/handsontable/3rdparty/walkontable/src/utils/column.mjs"],"sourcesContent":["import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nimport { getScrollbarWidth } from \"./../../../../helpers/dom/element.mjs\";\nimport { ColumnStretching } from \"./columnStretching.mjs\";\n/**\n * Column utils class contains all necessary information about sizes of the columns.\n *\n * @class {ColumnUtils}\n */\nexport default class ColumnUtils {\n  /**\n   * @param {TableDao} dataAccessObject The table Data Access Object.\n   * @param {Settings} wtSettings The walkontable settings.\n   */\n  constructor(dataAccessObject, wtSettings) {\n    /**\n     * @type {TableDao}\n     */\n    _defineProperty(this, \"dataAccessObject\", void 0);\n    /**\n     * @type {Settings}\n     */\n    _defineProperty(this, \"wtSettings\", void 0);\n    /**\n     * @type {Map<number, number>}\n     */\n    _defineProperty(this, \"headerWidths\", new Map());\n    /**\n     * @type {ColumnStretching}\n     */\n    _defineProperty(this, \"stretching\", void 0);\n    this.dataAccessObject = dataAccessObject;\n    this.wtSettings = wtSettings;\n    this.stretching = new ColumnStretching({\n      totalColumns: () => this.wtSettings.getSetting('totalColumns'),\n      stretchMode: () => this.wtSettings.getSetting('stretchH'),\n      stretchingColumnWidthFn: (stretchedWidth, column) => this.wtSettings.getSetting('onBeforeStretchingColumnWidth', stretchedWidth, column),\n      columnWidthFn: sourceCol => this.dataAccessObject.wtTable.getColumnWidth(sourceCol)\n    });\n  }\n\n  /**\n   * Returns column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getWidth(sourceIndex) {\n    const width = this.wtSettings.getSetting('columnWidth', sourceIndex) || this.wtSettings.getSetting('defaultColumnWidth');\n    return width;\n  }\n\n  /**\n   * Returns stretched column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getStretchedColumnWidth(sourceIndex) {\n    let width = this.getWidth(sourceIndex);\n    const stretchedWidth = this.stretching.getStretchedColumnWidth(sourceIndex, width);\n    if (stretchedWidth) {\n      width = stretchedWidth;\n    }\n    return width;\n  }\n\n  /**\n   * Returns column header height based on passed header level.\n   *\n   * @param {number} level Column header level.\n   * @returns {number}\n   */\n  getHeaderHeight(level) {\n    let height = this.wtSettings.getSetting('defaultRowHeight');\n    const oversizedHeight = this.dataAccessObject.wtViewport.oversizedColumnHeaders[level];\n    if (oversizedHeight !== undefined) {\n      height = height ? Math.max(height, oversizedHeight) : oversizedHeight;\n    }\n    return height;\n  }\n\n  /**\n   * Returns column header width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getHeaderWidth(sourceIndex) {\n    return this.headerWidths.get(this.dataAccessObject.wtTable.columnFilter.sourceToRendered(sourceIndex));\n  }\n\n  /**\n   * Refreshes the stretching column width by recalculating the widths of the columns.\n   */\n  refreshStretching() {\n    const {\n      wtTable,\n      wtViewport,\n      cloneSource\n    } = this.dataAccessObject;\n    const mainHolder = cloneSource ? cloneSource.wtTable.holder : wtTable.holder;\n    const scrollbarCompensation = mainHolder.offsetHeight < mainHolder.scrollHeight ? getScrollbarWidth() : 0;\n    this.stretching.refreshStretching(wtViewport.getViewportWidth() - scrollbarCompensation);\n  }\n\n  /**\n   * Calculates column header widths that can be retrieved from the cache.\n   */\n  calculateWidths() {\n    const {\n      wtSettings\n    } = this;\n    let rowHeaderWidthSetting = wtSettings.getSetting('rowHeaderWidth');\n    this.refreshStretching();\n    rowHeaderWidthSetting = wtSettings.getSetting('onModifyRowHeaderWidth', rowHeaderWidthSetting);\n    if (rowHeaderWidthSetting !== null && rowHeaderWidthSetting !== undefined) {\n      const rowHeadersCount = wtSettings.getSetting('rowHeaders').length;\n      const defaultColumnWidth = wtSettings.getSetting('defaultColumnWidth');\n      for (let visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n        let width = Array.isArray(rowHeaderWidthSetting) ? rowHeaderWidthSetting[visibleColumnIndex] : rowHeaderWidthSetting;\n        width = width === null || width === undefined ? defaultColumnWidth : width;\n        this.headerWidths.set(visibleColumnIndex, width);\n      }\n    }\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
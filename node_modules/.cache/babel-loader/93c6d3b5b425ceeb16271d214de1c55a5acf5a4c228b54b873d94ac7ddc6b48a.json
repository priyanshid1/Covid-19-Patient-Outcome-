{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\n/**\n * @param {HiddenColumns} hiddenColumnsPlugin The plugin instance.\n * @returns {object}\n */\n\nexport default function showColumnItem(hiddenColumnsPlugin) {\n  var columns = [];\n  return {\n    key: 'hidden_columns_show',\n    name: function name() {\n      var pluralForm = columns.length > 1 ? 1 : 0;\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_SHOW_COLUMN, pluralForm);\n    },\n    callback: function callback() {\n      var _this$columnIndexMapp, _this$columnIndexMapp2;\n      if (columns.length === 0) {\n        return;\n      }\n      var startVisualColumn = columns[0];\n      var endVisualColumn = columns[columns.length - 1]; // Add to the selection one more visual column on the left.\n\n      startVisualColumn = (_this$columnIndexMapp = this.columnIndexMapper.getFirstNotHiddenIndex(startVisualColumn - 1, -1)) !== null && _this$columnIndexMapp !== void 0 ? _this$columnIndexMapp : 0; // Add to the selection one more visual column on the right.\n\n      endVisualColumn = (_this$columnIndexMapp2 = this.columnIndexMapper.getFirstNotHiddenIndex(endVisualColumn + 1, 1)) !== null && _this$columnIndexMapp2 !== void 0 ? _this$columnIndexMapp2 : this.countCols() - 1;\n      hiddenColumnsPlugin.showColumns(columns); // We render columns at first. It was needed for getting fixed columns.\n      // Please take a look at #6864 for broader description.\n\n      this.render();\n      this.view.adjustElementsSize(true);\n      var allColumnsSelected = endVisualColumn - startVisualColumn + 1 === this.countCols(); // When all headers needs to be selected then do nothing. The header selection is\n      // automatically handled by corner click.\n\n      if (!allColumnsSelected) {\n        this.selectColumns(startVisualColumn, endVisualColumn);\n      }\n    },\n    disabled: false,\n    hidden: function hidden() {\n      var _this = this;\n      var hiddenPhysicalColumns = arrayMap(hiddenColumnsPlugin.getHiddenColumns(), function (visualColumnIndex) {\n        return _this.toPhysicalColumn(visualColumnIndex);\n      });\n      if (!(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner()) || hiddenPhysicalColumns.length < 1) {\n        return true;\n      }\n      columns.length = 0;\n      var selectedRangeLast = this.getSelectedRangeLast();\n      var visualStartColumn = selectedRangeLast.getTopLeftCorner().col;\n      var visualEndColumn = selectedRangeLast.getBottomRightCorner().col;\n      var columnIndexMapper = this.columnIndexMapper;\n      var renderableStartColumn = columnIndexMapper.getRenderableFromVisualIndex(visualStartColumn);\n      var renderableEndColumn = columnIndexMapper.getRenderableFromVisualIndex(visualEndColumn);\n      var notTrimmedColumnIndexes = columnIndexMapper.getNotTrimmedIndexes();\n      var physicalColumnIndexes = [];\n      if (visualStartColumn !== visualEndColumn) {\n        var visualColumnsInRange = visualEndColumn - visualStartColumn + 1;\n        var renderedColumnsInRange = renderableEndColumn - renderableStartColumn + 1; // Collect not trimmed columns if there are some hidden columns in the selection range.\n\n        if (visualColumnsInRange > renderedColumnsInRange) {\n          var physicalIndexesInRange = notTrimmedColumnIndexes.slice(visualStartColumn, visualEndColumn + 1);\n          physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(physicalIndexesInRange.filter(function (physicalIndex) {\n            return hiddenPhysicalColumns.includes(physicalIndex);\n          })));\n        } // Handled column is the first rendered index and there are some visual indexes before it.\n      } else if (renderableStartColumn === 0 && renderableStartColumn < visualStartColumn) {\n        // not trimmed indexes -> array of mappings from visual (native array's index) to physical indexes (value).\n        physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(notTrimmedColumnIndexes.slice(0, visualStartColumn))); // physical indexes\n        // When all columns are hidden and the context menu is triggered using top-left corner.\n      } else if (renderableStartColumn === null) {\n        // Show all hidden columns.\n        physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(notTrimmedColumnIndexes.slice(0, this.countCols())));\n      } else {\n        var lastVisualIndex = this.countCols() - 1;\n        var lastRenderableIndex = columnIndexMapper.getRenderableFromVisualIndex(columnIndexMapper.getFirstNotHiddenIndex(lastVisualIndex, -1)); // Handled column is the last rendered index and there are some visual indexes after it.\n\n        if (renderableEndColumn === lastRenderableIndex && lastVisualIndex > visualEndColumn) {\n          physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(notTrimmedColumnIndexes.slice(visualEndColumn + 1)));\n        }\n      }\n      arrayEach(physicalColumnIndexes, function (physicalColumnIndex) {\n        columns.push(_this.toVisualColumn(physicalColumnIndex));\n      });\n      return columns.length === 0;\n    }\n  };\n}","map":{"version":3,"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","arrayEach","arrayMap","C","showColumnItem","hiddenColumnsPlugin","columns","key","pluralForm","getTranslatedPhrase","CONTEXTMENU_ITEMS_SHOW_COLUMN","callback","_this$columnIndexMapp","_this$columnIndexMapp2","startVisualColumn","endVisualColumn","columnIndexMapper","getFirstNotHiddenIndex","countCols","showColumns","render","view","adjustElementsSize","allColumnsSelected","selectColumns","disabled","hidden","_this","hiddenPhysicalColumns","getHiddenColumns","visualColumnIndex","toPhysicalColumn","selection","isSelectedByColumnHeader","isSelectedByCorner","selectedRangeLast","getSelectedRangeLast","visualStartColumn","getTopLeftCorner","col","visualEndColumn","getBottomRightCorner","renderableStartColumn","getRenderableFromVisualIndex","renderableEndColumn","notTrimmedColumnIndexes","getNotTrimmedIndexes","physicalColumnIndexes","visualColumnsInRange","renderedColumnsInRange","physicalIndexesInRange","push","apply","filter","physicalIndex","includes","lastVisualIndex","lastRenderableIndex","physicalColumnIndex","toVisualColumn"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/plugins/hiddenColumns/contextMenuItem/showColumn.mjs"],"sourcesContent":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\n/**\n * @param {HiddenColumns} hiddenColumnsPlugin The plugin instance.\n * @returns {object}\n */\n\nexport default function showColumnItem(hiddenColumnsPlugin) {\n  var columns = [];\n  return {\n    key: 'hidden_columns_show',\n    name: function name() {\n      var pluralForm = columns.length > 1 ? 1 : 0;\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_SHOW_COLUMN, pluralForm);\n    },\n    callback: function callback() {\n      var _this$columnIndexMapp, _this$columnIndexMapp2;\n\n      if (columns.length === 0) {\n        return;\n      }\n\n      var startVisualColumn = columns[0];\n      var endVisualColumn = columns[columns.length - 1]; // Add to the selection one more visual column on the left.\n\n      startVisualColumn = (_this$columnIndexMapp = this.columnIndexMapper.getFirstNotHiddenIndex(startVisualColumn - 1, -1)) !== null && _this$columnIndexMapp !== void 0 ? _this$columnIndexMapp : 0; // Add to the selection one more visual column on the right.\n\n      endVisualColumn = (_this$columnIndexMapp2 = this.columnIndexMapper.getFirstNotHiddenIndex(endVisualColumn + 1, 1)) !== null && _this$columnIndexMapp2 !== void 0 ? _this$columnIndexMapp2 : this.countCols() - 1;\n      hiddenColumnsPlugin.showColumns(columns); // We render columns at first. It was needed for getting fixed columns.\n      // Please take a look at #6864 for broader description.\n\n      this.render();\n      this.view.adjustElementsSize(true);\n      var allColumnsSelected = endVisualColumn - startVisualColumn + 1 === this.countCols(); // When all headers needs to be selected then do nothing. The header selection is\n      // automatically handled by corner click.\n\n      if (!allColumnsSelected) {\n        this.selectColumns(startVisualColumn, endVisualColumn);\n      }\n    },\n    disabled: false,\n    hidden: function hidden() {\n      var _this = this;\n\n      var hiddenPhysicalColumns = arrayMap(hiddenColumnsPlugin.getHiddenColumns(), function (visualColumnIndex) {\n        return _this.toPhysicalColumn(visualColumnIndex);\n      });\n\n      if (!(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner()) || hiddenPhysicalColumns.length < 1) {\n        return true;\n      }\n\n      columns.length = 0;\n      var selectedRangeLast = this.getSelectedRangeLast();\n      var visualStartColumn = selectedRangeLast.getTopLeftCorner().col;\n      var visualEndColumn = selectedRangeLast.getBottomRightCorner().col;\n      var columnIndexMapper = this.columnIndexMapper;\n      var renderableStartColumn = columnIndexMapper.getRenderableFromVisualIndex(visualStartColumn);\n      var renderableEndColumn = columnIndexMapper.getRenderableFromVisualIndex(visualEndColumn);\n      var notTrimmedColumnIndexes = columnIndexMapper.getNotTrimmedIndexes();\n      var physicalColumnIndexes = [];\n\n      if (visualStartColumn !== visualEndColumn) {\n        var visualColumnsInRange = visualEndColumn - visualStartColumn + 1;\n        var renderedColumnsInRange = renderableEndColumn - renderableStartColumn + 1; // Collect not trimmed columns if there are some hidden columns in the selection range.\n\n        if (visualColumnsInRange > renderedColumnsInRange) {\n          var physicalIndexesInRange = notTrimmedColumnIndexes.slice(visualStartColumn, visualEndColumn + 1);\n          physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(physicalIndexesInRange.filter(function (physicalIndex) {\n            return hiddenPhysicalColumns.includes(physicalIndex);\n          })));\n        } // Handled column is the first rendered index and there are some visual indexes before it.\n\n      } else if (renderableStartColumn === 0 && renderableStartColumn < visualStartColumn) {\n        // not trimmed indexes -> array of mappings from visual (native array's index) to physical indexes (value).\n        physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(notTrimmedColumnIndexes.slice(0, visualStartColumn))); // physical indexes\n        // When all columns are hidden and the context menu is triggered using top-left corner.\n      } else if (renderableStartColumn === null) {\n        // Show all hidden columns.\n        physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(notTrimmedColumnIndexes.slice(0, this.countCols())));\n      } else {\n        var lastVisualIndex = this.countCols() - 1;\n        var lastRenderableIndex = columnIndexMapper.getRenderableFromVisualIndex(columnIndexMapper.getFirstNotHiddenIndex(lastVisualIndex, -1)); // Handled column is the last rendered index and there are some visual indexes after it.\n\n        if (renderableEndColumn === lastRenderableIndex && lastVisualIndex > visualEndColumn) {\n          physicalColumnIndexes.push.apply(physicalColumnIndexes, _toConsumableArray(notTrimmedColumnIndexes.slice(visualEndColumn + 1)));\n        }\n      }\n\n      arrayEach(physicalColumnIndexes, function (physicalColumnIndex) {\n        columns.push(_this.toVisualColumn(physicalColumnIndex));\n      });\n      return columns.length === 0;\n    }\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { align, getAlignmentClasses, markLabelAsSelected, hasSelectionAClass } from \"../utils.mjs\";\nimport { KEY as SEPARATOR } from \"./separator.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nexport const KEY = 'alignment';\n\n/**\n * @returns {object}\n */\nexport default function alignmentItem() {\n  return {\n    key: KEY,\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT);\n    },\n    disabled() {\n      if (this.countRows() === 0 || this.countCols() === 0) {\n        return true;\n      }\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader()) {\n        return true;\n      }\n      return !(this.getSelectedRange() && !this.selection.isSelectedByCorner());\n    },\n    submenu: {\n      items: [{\n        key: `${KEY}:left`,\n        checkable: true,\n        ariaLabel() {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_LEFT);\n        },\n        ariaChecked() {\n          return hasSelectionAClass(this, 'htLeft');\n        },\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_LEFT);\n          if (hasSelectionAClass(this, 'htLeft')) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'horizontal';\n          const alignment = 'htLeft';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:center`,\n        checkable: true,\n        ariaLabel() {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_CENTER);\n        },\n        ariaChecked() {\n          return hasSelectionAClass(this, 'htCenter');\n        },\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_CENTER);\n          if (hasSelectionAClass(this, 'htCenter')) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'horizontal';\n          const alignment = 'htCenter';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:right`,\n        checkable: true,\n        ariaLabel() {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT);\n        },\n        ariaChecked() {\n          return hasSelectionAClass(this, 'htRight');\n        },\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT);\n          if (hasSelectionAClass(this, 'htRight')) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'horizontal';\n          const alignment = 'htRight';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:justify`,\n        checkable: true,\n        ariaLabel() {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY);\n        },\n        ariaChecked() {\n          return hasSelectionAClass(this, 'htJustify');\n        },\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY);\n          if (hasSelectionAClass(this, 'htJustify')) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'horizontal';\n          const alignment = 'htJustify';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        name: SEPARATOR\n      }, {\n        key: `${KEY}:top`,\n        checkable: true,\n        ariaLabel() {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_TOP);\n        },\n        ariaChecked() {\n          return hasSelectionAClass(this, 'htTop');\n        },\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_TOP);\n          if (hasSelectionAClass(this, 'htTop')) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'vertical';\n          const alignment = 'htTop';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:middle`,\n        checkable: true,\n        ariaLabel() {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE);\n        },\n        ariaChecked() {\n          return hasSelectionAClass(this, 'htMiddle');\n        },\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE);\n          if (hasSelectionAClass(this, 'htMiddle')) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'vertical';\n          const alignment = 'htMiddle';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:bottom`,\n        checkable: true,\n        ariaLabel() {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM);\n        },\n        ariaChecked() {\n          return hasSelectionAClass(this, 'htBottom');\n        },\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM);\n          if (hasSelectionAClass(this, 'htBottom')) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'vertical';\n          const alignment = 'htBottom';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }]\n    }\n  };\n}","map":{"version":3,"names":["align","getAlignmentClasses","markLabelAsSelected","hasSelectionAClass","KEY","SEPARATOR","C","alignmentItem","key","name","getTranslatedPhrase","CONTEXTMENU_ITEMS_ALIGNMENT","disabled","countRows","countCols","range","getSelectedRangeLast","isSingleHeader","getSelectedRange","selection","isSelectedByCorner","submenu","items","checkable","ariaLabel","CONTEXTMENU_ITEMS_ALIGNMENT_LEFT","ariaChecked","label","callback","selectedRange","stateBefore","row","col","getCellMeta","className","type","alignment","runHooks","value","setCellMeta","render","CONTEXTMENU_ITEMS_ALIGNMENT_CENTER","CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT","CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY","CONTEXTMENU_ITEMS_ALIGNMENT_TOP","CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE","CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM"],"sources":["/Users/priyadeliwala/node_modules/handsontable/plugins/contextMenu/predefinedItems/alignment.mjs"],"sourcesContent":["import { align, getAlignmentClasses, markLabelAsSelected, hasSelectionAClass } from \"../utils.mjs\";\nimport { KEY as SEPARATOR } from \"./separator.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nexport const KEY = 'alignment';\n\n/**\n * @returns {object}\n */\nexport default function alignmentItem() {\n  return {\n    key: KEY,\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT);\n    },\n    disabled() {\n      if (this.countRows() === 0 || this.countCols() === 0) {\n        return true;\n      }\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader()) {\n        return true;\n      }\n      return !(this.getSelectedRange() && !this.selection.isSelectedByCorner());\n    },\n    submenu: {\n      items: [{\n        key: `${KEY}:left`,\n        checkable: true,\n        ariaLabel() {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_LEFT);\n        },\n        ariaChecked() {\n          return hasSelectionAClass(this, 'htLeft');\n        },\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_LEFT);\n          if (hasSelectionAClass(this, 'htLeft')) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'horizontal';\n          const alignment = 'htLeft';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:center`,\n        checkable: true,\n        ariaLabel() {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_CENTER);\n        },\n        ariaChecked() {\n          return hasSelectionAClass(this, 'htCenter');\n        },\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_CENTER);\n          if (hasSelectionAClass(this, 'htCenter')) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'horizontal';\n          const alignment = 'htCenter';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:right`,\n        checkable: true,\n        ariaLabel() {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT);\n        },\n        ariaChecked() {\n          return hasSelectionAClass(this, 'htRight');\n        },\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT);\n          if (hasSelectionAClass(this, 'htRight')) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'horizontal';\n          const alignment = 'htRight';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:justify`,\n        checkable: true,\n        ariaLabel() {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY);\n        },\n        ariaChecked() {\n          return hasSelectionAClass(this, 'htJustify');\n        },\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY);\n          if (hasSelectionAClass(this, 'htJustify')) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'horizontal';\n          const alignment = 'htJustify';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        name: SEPARATOR\n      }, {\n        key: `${KEY}:top`,\n        checkable: true,\n        ariaLabel() {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_TOP);\n        },\n        ariaChecked() {\n          return hasSelectionAClass(this, 'htTop');\n        },\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_TOP);\n          if (hasSelectionAClass(this, 'htTop')) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'vertical';\n          const alignment = 'htTop';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:middle`,\n        checkable: true,\n        ariaLabel() {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE);\n        },\n        ariaChecked() {\n          return hasSelectionAClass(this, 'htMiddle');\n        },\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE);\n          if (hasSelectionAClass(this, 'htMiddle')) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'vertical';\n          const alignment = 'htMiddle';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:bottom`,\n        checkable: true,\n        ariaLabel() {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM);\n        },\n        ariaChecked() {\n          return hasSelectionAClass(this, 'htBottom');\n        },\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM);\n          if (hasSelectionAClass(this, 'htBottom')) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'vertical';\n          const alignment = 'htBottom';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }]\n    }\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
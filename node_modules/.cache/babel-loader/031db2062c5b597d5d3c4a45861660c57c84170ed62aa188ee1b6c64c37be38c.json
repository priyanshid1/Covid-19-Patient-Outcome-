{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { expandMetaType } from \"../utils.mjs\";\n/**\n * The table meta object is a layer that keeps all settings of the Handsontable that was passed in\n * the constructor. That layer contains all default settings inherited from the GlobalMeta layer\n * merged with settings passed by the developer. Adding, removing, or changing property in that\n * object has no direct reflection on any other layers.\n *\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n */\n\nvar TableMeta = /*#__PURE__*/function () {\n  function TableMeta(globalMeta) {\n    _classCallCheck(this, TableMeta);\n    var MetaCtor = globalMeta.getMetaConstructor();\n    /**\n     * Main object (instance of the internal TableMeta class from GlobalMeta), holder for all settings defined in the table scope.\n     *\n     * @type {object}\n     */\n\n    this.meta = new MetaCtor();\n  }\n  /**\n   * Gets settings object for this layer.\n   *\n   * @returns {object}\n   */\n\n  _createClass(TableMeta, [{\n    key: \"getMeta\",\n    value: function getMeta() {\n      return this.meta;\n    }\n    /**\n     * Updates table settings object by merging settings with the current state.\n     *\n     * @param {object} settings An object to merge with.\n     */\n  }, {\n    key: \"updateMeta\",\n    value: function updateMeta(settings) {\n      extend(this.meta, settings);\n      extend(this.meta, expandMetaType(settings.type, settings));\n    }\n  }]);\n  return TableMeta;\n}();\nexport { TableMeta as default };","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","extend","expandMetaType","TableMeta","globalMeta","MetaCtor","getMetaConstructor","meta","value","getMeta","updateMeta","settings","type","default"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/dataMap/metaManager/metaLayers/tableMeta.mjs"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { expandMetaType } from \"../utils.mjs\";\n/**\n * The table meta object is a layer that keeps all settings of the Handsontable that was passed in\n * the constructor. That layer contains all default settings inherited from the GlobalMeta layer\n * merged with settings passed by the developer. Adding, removing, or changing property in that\n * object has no direct reflection on any other layers.\n *\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n */\n\nvar TableMeta = /*#__PURE__*/function () {\n  function TableMeta(globalMeta) {\n    _classCallCheck(this, TableMeta);\n\n    var MetaCtor = globalMeta.getMetaConstructor();\n    /**\n     * Main object (instance of the internal TableMeta class from GlobalMeta), holder for all settings defined in the table scope.\n     *\n     * @type {object}\n     */\n\n    this.meta = new MetaCtor();\n  }\n  /**\n   * Gets settings object for this layer.\n   *\n   * @returns {object}\n   */\n\n\n  _createClass(TableMeta, [{\n    key: \"getMeta\",\n    value: function getMeta() {\n      return this.meta;\n    }\n    /**\n     * Updates table settings object by merging settings with the current state.\n     *\n     * @param {object} settings An object to merge with.\n     */\n\n  }, {\n    key: \"updateMeta\",\n    value: function updateMeta(settings) {\n      extend(this.meta, settings);\n      extend(this.meta, expandMetaType(settings.type, settings));\n    }\n  }]);\n\n  return TableMeta;\n}();\n\nexport { TableMeta as default };"],"mappings":"AAAA,SAASA,eAAeA,CAACC,QAAQ,EAAEC,WAAW,EAAE;EAAE,IAAI,EAAED,QAAQ,YAAYC,WAAW,CAAC,EAAE;IAAE,MAAM,IAAIC,SAAS,CAAC,mCAAmC,CAAC;EAAE;AAAE;AAExJ,SAASC,iBAAiBA,CAACC,MAAM,EAAEC,KAAK,EAAE;EAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IAAE,IAAIE,UAAU,GAAGH,KAAK,CAACC,CAAC,CAAC;IAAEE,UAAU,CAACC,UAAU,GAAGD,UAAU,CAACC,UAAU,IAAI,KAAK;IAAED,UAAU,CAACE,YAAY,GAAG,IAAI;IAAE,IAAI,OAAO,IAAIF,UAAU,EAAEA,UAAU,CAACG,QAAQ,GAAG,IAAI;IAAEC,MAAM,CAACC,cAAc,CAACT,MAAM,EAAEI,UAAU,CAACM,GAAG,EAAEN,UAAU,CAAC;EAAE;AAAE;AAE5T,SAASO,YAAYA,CAACd,WAAW,EAAEe,UAAU,EAAEC,WAAW,EAAE;EAAE,IAAID,UAAU,EAAEb,iBAAiB,CAACF,WAAW,CAACiB,SAAS,EAAEF,UAAU,CAAC;EAAE,IAAIC,WAAW,EAAEd,iBAAiB,CAACF,WAAW,EAAEgB,WAAW,CAAC;EAAEL,MAAM,CAACC,cAAc,CAACZ,WAAW,EAAE,WAAW,EAAE;IAAEU,QAAQ,EAAE;EAAM,CAAC,CAAC;EAAE,OAAOV,WAAW;AAAE;AAE5R,SAASkB,MAAM,QAAQ,6BAA6B;AACpD,SAASC,cAAc,QAAQ,cAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,SAAS,GAAG,aAAa,YAAY;EACvC,SAASA,SAASA,CAACC,UAAU,EAAE;IAC7BvB,eAAe,CAAC,IAAI,EAAEsB,SAAS,CAAC;IAEhC,IAAIE,QAAQ,GAAGD,UAAU,CAACE,kBAAkB,CAAC,CAAC;IAC9C;AACJ;AACA;AACA;AACA;;IAEI,IAAI,CAACC,IAAI,GAAG,IAAIF,QAAQ,CAAC,CAAC;EAC5B;EACA;AACF;AACA;AACA;AACA;;EAGER,YAAY,CAACM,SAAS,EAAE,CAAC;IACvBP,GAAG,EAAE,SAAS;IACdY,KAAK,EAAE,SAASC,OAAOA,CAAA,EAAG;MACxB,OAAO,IAAI,CAACF,IAAI;IAClB;IACA;AACJ;AACA;AACA;AACA;EAEE,CAAC,EAAE;IACDX,GAAG,EAAE,YAAY;IACjBY,KAAK,EAAE,SAASE,UAAUA,CAACC,QAAQ,EAAE;MACnCV,MAAM,CAAC,IAAI,CAACM,IAAI,EAAEI,QAAQ,CAAC;MAC3BV,MAAM,CAAC,IAAI,CAACM,IAAI,EAAEL,cAAc,CAACS,QAAQ,CAACC,IAAI,EAAED,QAAQ,CAAC,CAAC;IAC5D;EACF,CAAC,CAAC,CAAC;EAEH,OAAOR,SAAS;AAClB,CAAC,CAAC,CAAC;AAEH,SAASA,SAAS,IAAIU,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { defineGetter } from \"../../../../../helpers/object.mjs\";\nvar MIXIN_NAME = 'calculatedRows';\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use virtual rendering in the vertical axis.\n *\n * @type {object}\n */\n\nvar calculatedRows = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getFirstRenderedRow: function getFirstRenderedRow() {\n    var startRow = this.wot.wtViewport.rowsRenderCalculator.startRow;\n    if (startRow === null) {\n      return -1;\n    }\n    return startRow;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getFirstVisibleRow: function getFirstVisibleRow() {\n    var startRow = this.wot.wtViewport.rowsVisibleCalculator.startRow;\n    if (startRow === null) {\n      return -1;\n    }\n    return startRow;\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getLastRenderedRow: function getLastRenderedRow() {\n    var endRow = this.wot.wtViewport.rowsRenderCalculator.endRow;\n    if (endRow === null) {\n      return -1;\n    }\n    return endRow;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getLastVisibleRow: function getLastVisibleRow() {\n    var endRow = this.wot.wtViewport.rowsVisibleCalculator.endRow;\n    if (endRow === null) {\n      return -1;\n    }\n    return endRow;\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   */\n  getRenderedRowsCount: function getRenderedRowsCount() {\n    return this.wot.wtViewport.rowsRenderCalculator.count;\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   *\n   * @returns {number}\n   */\n  getVisibleRowsCount: function getVisibleRowsCount() {\n    return this.wot.wtViewport.rowsVisibleCalculator.count;\n  }\n};\ndefineGetter(calculatedRows, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedRows;","map":{"version":3,"names":["defineGetter","MIXIN_NAME","calculatedRows","getFirstRenderedRow","startRow","wot","wtViewport","rowsRenderCalculator","getFirstVisibleRow","rowsVisibleCalculator","getLastRenderedRow","endRow","getLastVisibleRow","getRenderedRowsCount","count","getVisibleRowsCount","writable","enumerable"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/3rdparty/walkontable/src/table/mixin/calculatedRows.mjs"],"sourcesContent":["import { defineGetter } from \"../../../../../helpers/object.mjs\";\nvar MIXIN_NAME = 'calculatedRows';\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use virtual rendering in the vertical axis.\n *\n * @type {object}\n */\n\nvar calculatedRows = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getFirstRenderedRow: function getFirstRenderedRow() {\n    var startRow = this.wot.wtViewport.rowsRenderCalculator.startRow;\n\n    if (startRow === null) {\n      return -1;\n    }\n\n    return startRow;\n  },\n\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getFirstVisibleRow: function getFirstVisibleRow() {\n    var startRow = this.wot.wtViewport.rowsVisibleCalculator.startRow;\n\n    if (startRow === null) {\n      return -1;\n    }\n\n    return startRow;\n  },\n\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getLastRenderedRow: function getLastRenderedRow() {\n    var endRow = this.wot.wtViewport.rowsRenderCalculator.endRow;\n\n    if (endRow === null) {\n      return -1;\n    }\n\n    return endRow;\n  },\n\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getLastVisibleRow: function getLastVisibleRow() {\n    var endRow = this.wot.wtViewport.rowsVisibleCalculator.endRow;\n\n    if (endRow === null) {\n      return -1;\n    }\n\n    return endRow;\n  },\n\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   */\n  getRenderedRowsCount: function getRenderedRowsCount() {\n    return this.wot.wtViewport.rowsRenderCalculator.count;\n  },\n\n  /**\n   * Get the number of fully visible rows in the viewport.\n   *\n   * @returns {number}\n   */\n  getVisibleRowsCount: function getVisibleRowsCount() {\n    return this.wot.wtViewport.rowsVisibleCalculator.count;\n  }\n};\ndefineGetter(calculatedRows, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedRows;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mCAAmC;AAChE,IAAIC,UAAU,GAAG,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,cAAc,GAAG;EACnB;AACF;AACA;AACA;AACA;EACEC,mBAAmB,EAAE,SAASA,mBAAmBA,CAAA,EAAG;IAClD,IAAIC,QAAQ,GAAG,IAAI,CAACC,GAAG,CAACC,UAAU,CAACC,oBAAoB,CAACH,QAAQ;IAEhE,IAAIA,QAAQ,KAAK,IAAI,EAAE;MACrB,OAAO,CAAC,CAAC;IACX;IAEA,OAAOA,QAAQ;EACjB,CAAC;EAED;AACF;AACA;AACA;AACA;EACEI,kBAAkB,EAAE,SAASA,kBAAkBA,CAAA,EAAG;IAChD,IAAIJ,QAAQ,GAAG,IAAI,CAACC,GAAG,CAACC,UAAU,CAACG,qBAAqB,CAACL,QAAQ;IAEjE,IAAIA,QAAQ,KAAK,IAAI,EAAE;MACrB,OAAO,CAAC,CAAC;IACX;IAEA,OAAOA,QAAQ;EACjB,CAAC;EAED;AACF;AACA;AACA;AACA;EACEM,kBAAkB,EAAE,SAASA,kBAAkBA,CAAA,EAAG;IAChD,IAAIC,MAAM,GAAG,IAAI,CAACN,GAAG,CAACC,UAAU,CAACC,oBAAoB,CAACI,MAAM;IAE5D,IAAIA,MAAM,KAAK,IAAI,EAAE;MACnB,OAAO,CAAC,CAAC;IACX;IAEA,OAAOA,MAAM;EACf,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,iBAAiB,EAAE,SAASA,iBAAiBA,CAAA,EAAG;IAC9C,IAAID,MAAM,GAAG,IAAI,CAACN,GAAG,CAACC,UAAU,CAACG,qBAAqB,CAACE,MAAM;IAE7D,IAAIA,MAAM,KAAK,IAAI,EAAE;MACnB,OAAO,CAAC,CAAC;IACX;IAEA,OAAOA,MAAM;EACf,CAAC;EAED;AACF;AACA;AACA;AACA;EACEE,oBAAoB,EAAE,SAASA,oBAAoBA,CAAA,EAAG;IACpD,OAAO,IAAI,CAACR,GAAG,CAACC,UAAU,CAACC,oBAAoB,CAACO,KAAK;EACvD,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,mBAAmB,EAAE,SAASA,mBAAmBA,CAAA,EAAG;IAClD,OAAO,IAAI,CAACV,GAAG,CAACC,UAAU,CAACG,qBAAqB,CAACK,KAAK;EACxD;AACF,CAAC;AACDd,YAAY,CAACE,cAAc,EAAE,YAAY,EAAED,UAAU,EAAE;EACrDe,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,eAAef,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"export var command = {\n  name: 'extendCellsSelectionToMostTop',\n  callback: function callback(hot) {\n    var selection = hot.selection,\n      rowIndexMapper = hot.rowIndexMapper;\n    var _hot$getSelectedRange = hot.getSelectedRangeLast(),\n      highlight = _hot$getSelectedRange.highlight,\n      from = _hot$getSelectedRange.from,\n      to = _hot$getSelectedRange.to;\n    var isFocusHighlightedByHeader = highlight.isHeader() && hot.selection.isSelectedByRowHeader();\n    if (highlight.isCell() || isFocusHighlightedByHeader) {\n      var row = rowIndexMapper.getNearestNotHiddenIndex(0, 1);\n      var newFrom = from.clone();\n      newFrom.row = highlight.row;\n      selection.setRangeStart(newFrom, undefined, false, highlight.clone());\n\n      // Restore the row highlight by header flag after setting up a new selection.\n      if (isFocusHighlightedByHeader) {\n        selection.selectedByRowHeader.add(selection.getLayerLevel());\n      }\n      selection.setRangeEnd(hot._createCellCoords(row, to.col));\n    }\n  }\n};","map":{"version":3,"names":["command","name","callback","hot","selection","rowIndexMapper","_hot$getSelectedRange","getSelectedRangeLast","highlight","from","to","isFocusHighlightedByHeader","isHeader","isSelectedByRowHeader","isCell","row","getNearestNotHiddenIndex","newFrom","clone","setRangeStart","undefined","selectedByRowHeader","add","getLayerLevel","setRangeEnd","_createCellCoords","col"],"sources":["/Users/priyadeliwala/node_modules/handsontable/shortcutContexts/commands/extendCellsSelection/toMostTop.mjs"],"sourcesContent":["export const command = {\n  name: 'extendCellsSelectionToMostTop',\n  callback(hot) {\n    const {\n      selection,\n      rowIndexMapper\n    } = hot;\n    const {\n      highlight,\n      from,\n      to\n    } = hot.getSelectedRangeLast();\n    const isFocusHighlightedByHeader = highlight.isHeader() && hot.selection.isSelectedByRowHeader();\n    if (highlight.isCell() || isFocusHighlightedByHeader) {\n      const row = rowIndexMapper.getNearestNotHiddenIndex(0, 1);\n      const newFrom = from.clone();\n      newFrom.row = highlight.row;\n      selection.setRangeStart(newFrom, undefined, false, highlight.clone());\n\n      // Restore the row highlight by header flag after setting up a new selection.\n      if (isFocusHighlightedByHeader) {\n        selection.selectedByRowHeader.add(selection.getLayerLevel());\n      }\n      selection.setRangeEnd(hot._createCellCoords(row, to.col));\n    }\n  }\n};"],"mappings":"AAAA,OAAO,IAAMA,OAAO,GAAG;EACrBC,IAAI,EAAE,+BAA+B;EACrCC,QAAQ,WAARA,QAAQA,CAACC,GAAG,EAAE;IACZ,IACEC,SAAS,GAEPD,GAAG,CAFLC,SAAS;MACTC,cAAc,GACZF,GAAG,CADLE,cAAc;IAEhB,IAAAC,qBAAA,GAIIH,GAAG,CAACI,oBAAoB,CAAC,CAAC;MAH5BC,SAAS,GAAAF,qBAAA,CAATE,SAAS;MACTC,IAAI,GAAAH,qBAAA,CAAJG,IAAI;MACJC,EAAE,GAAAJ,qBAAA,CAAFI,EAAE;IAEJ,IAAMC,0BAA0B,GAAGH,SAAS,CAACI,QAAQ,CAAC,CAAC,IAAIT,GAAG,CAACC,SAAS,CAACS,qBAAqB,CAAC,CAAC;IAChG,IAAIL,SAAS,CAACM,MAAM,CAAC,CAAC,IAAIH,0BAA0B,EAAE;MACpD,IAAMI,GAAG,GAAGV,cAAc,CAACW,wBAAwB,CAAC,CAAC,EAAE,CAAC,CAAC;MACzD,IAAMC,OAAO,GAAGR,IAAI,CAACS,KAAK,CAAC,CAAC;MAC5BD,OAAO,CAACF,GAAG,GAAGP,SAAS,CAACO,GAAG;MAC3BX,SAAS,CAACe,aAAa,CAACF,OAAO,EAAEG,SAAS,EAAE,KAAK,EAAEZ,SAAS,CAACU,KAAK,CAAC,CAAC,CAAC;;MAErE;MACA,IAAIP,0BAA0B,EAAE;QAC9BP,SAAS,CAACiB,mBAAmB,CAACC,GAAG,CAAClB,SAAS,CAACmB,aAAa,CAAC,CAAC,CAAC;MAC9D;MACAnB,SAAS,CAACoB,WAAW,CAACrB,GAAG,CAACsB,iBAAiB,CAACV,GAAG,EAAEL,EAAE,CAACgB,GAAG,CAAC,CAAC;IAC3D;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
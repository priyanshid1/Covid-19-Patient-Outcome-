{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  _classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport TreeNode from \"../../../utils/dataStructures/tree.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @private\n * @class HeadersTree\n *\n * The header tree class keeps nested header settings in the tree\n * structure for easier node manipulation (e.q collapse or expand column).\n * That trees represent the current state of the nested headers. From the\n * trees, the matrix is generated for nested header renderers.\n *\n * The second role of the module is validation. While building the tree,\n * there is check whether the configuration contains overlapping\n * headers. If true, then the exception is thrown.\n *\n * The tree is static; it means that its column indexing never changes\n * even when a collapsing header is performed. The structure is based\n * on visual column indexes.\n *\n * For example, for that header configuration:\n *   +----+----+----+----+----+\n *   │ A1                │ A2 │\n *   +----+----+----+----+----+\n *   │ B1           │ B2 │ B3 │\n *   +----+----+----+----+----+\n *   │ C1      │ C2 │ C3 │ C4 │\n *   +----+----+----+----+----+\n *\n * The tree structures look like:\n *                (0)                      (4)           // a visual column index\n *                 │                        │\n *        .------(A1)------.              (A2)--.\n *   .--(B1)--.           (B2)--.              (B3)--.\n *  (C1)     (C2)              (C3)                 (C4)\n *\n */\n\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\nvar _rootNodes = /*#__PURE__*/new WeakMap();\nvar _rootsIndex = /*#__PURE__*/new WeakMap();\nvar _sourceSettings = /*#__PURE__*/new WeakMap();\nvar HeadersTree = /*#__PURE__*/function () {\n  /**\n   * The collection of nested headers settings structured into trees. The root trees are stored\n   * under the visual column index.\n   *\n   * @private\n   * @type {Map<number, TreeNode>}\n   */\n\n  /**\n   * A map that translates the visual column indexes that intersect the range\n   * defined by the header colspan width to the root index.\n   *\n   * @private\n   * @type {Map<number, number>}\n   */\n\n  /**\n   * The instance of the SourceSettings class.\n   *\n   * @private\n   * @type {SourceSettings}\n   */\n  function HeadersTree(sourceSettings) {\n    _classCallCheck(this, HeadersTree);\n    _classPrivateFieldInitSpec(this, _rootNodes, {\n      writable: true,\n      value: new Map()\n    });\n    _classPrivateFieldInitSpec(this, _rootsIndex, {\n      writable: true,\n      value: new Map()\n    });\n    _classPrivateFieldInitSpec(this, _sourceSettings, {\n      writable: true,\n      value: null\n    });\n    _classPrivateFieldSet(this, _sourceSettings, sourceSettings);\n  }\n  /**\n   * Gets an array of the all root nodes.\n   *\n   * @returns {TreeNode[]}\n   */\n\n  _createClass(HeadersTree, [{\n    key: \"getRoots\",\n    value: function getRoots() {\n      return Array.from(_classPrivateFieldGet(this, _rootNodes).values());\n    }\n    /**\n     * Gets a root node by specified visual column index.\n     *\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n  }, {\n    key: \"getRootByColumn\",\n    value: function getRootByColumn(columnIndex) {\n      var node;\n      if (_classPrivateFieldGet(this, _rootsIndex).has(columnIndex)) {\n        node = _classPrivateFieldGet(this, _rootNodes).get(_classPrivateFieldGet(this, _rootsIndex).get(columnIndex));\n      }\n      return node;\n    }\n    /**\n     * Gets a tree node by its position in the grid settings.\n     *\n     * @param {number} headerLevel Header level index (there is support only for positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n  }, {\n    key: \"getNode\",\n    value: function getNode(headerLevel, columnIndex) {\n      var rootNode = this.getRootByColumn(columnIndex);\n      if (!rootNode) {\n        return;\n      } // Normalize the visual column index to a 0-based system for a specific \"box\" defined\n      // by root node colspan width.\n\n      var normColumnIndex = columnIndex - _classPrivateFieldGet(this, _rootsIndex).get(columnIndex);\n      var columnCursor = 0;\n      var treeNode; // Collect all parent nodes that depend on the collapsed node.\n\n      rootNode.walkDown(function (node) {\n        var _node$data = node.data,\n          origColspan = _node$data.origColspan,\n          nodeHeaderLevel = _node$data.headerLevel;\n        if (headerLevel === nodeHeaderLevel) {\n          if (normColumnIndex >= columnCursor && normColumnIndex <= columnCursor + origColspan - 1) {\n            treeNode = node;\n            return false; // Cancel tree traversing.\n          }\n          columnCursor += origColspan;\n        }\n      });\n      return treeNode;\n    }\n    /**\n     * Builds (or rebuilds if called again) root nodes indexes.\n     */\n  }, {\n    key: \"rebuildTreeIndex\",\n    value: function rebuildTreeIndex() {\n      var _this = this;\n      var columnIndex = 0;\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n      arrayEach(_classPrivateFieldGet(this, _rootNodes), function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          colspan = _ref2[1].data.colspan;\n\n        // Map tree range (colspan range/width) into visual column index of the root node.\n        for (var i = columnIndex; i < columnIndex + colspan; i++) {\n          _classPrivateFieldGet(_this, _rootsIndex).set(i, columnIndex);\n        }\n        columnIndex += colspan;\n      });\n    }\n    /**\n     * Builds trees based on SourceSettings class. Calling a method causes clearing the tree state built\n     * from the previous call.\n     */\n  }, {\n    key: \"buildTree\",\n    value: function buildTree() {\n      this.clear();\n      var columnsCount = _classPrivateFieldGet(this, _sourceSettings).getColumnsCount();\n      var columnIndex = 0;\n      while (columnIndex < columnsCount) {\n        var columnSettings = _classPrivateFieldGet(this, _sourceSettings).getHeaderSettings(0, columnIndex);\n        var rootNode = new TreeNode();\n        _classPrivateFieldGet(this, _rootNodes).set(columnIndex, rootNode);\n        this.buildLeaves(rootNode, columnIndex, 0, columnSettings.origColspan);\n        columnIndex += columnSettings.origColspan;\n      }\n      this.rebuildTreeIndex();\n    }\n    /**\n     * Builds leaves for specified tree node.\n     *\n     * @param {TreeNode} parentNode A node to which the leaves applies.\n     * @param {number} columnIndex A visual column index.\n     * @param {number} headerLevel Currently processed header level.\n     * @param {number} [extractionLength=1] Determines column extraction length for node children.\n     */\n  }, {\n    key: \"buildLeaves\",\n    value: function buildLeaves(parentNode, columnIndex, headerLevel) {\n      var _this2 = this;\n      var extractionLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      var columnsSettings = _classPrivateFieldGet(this, _sourceSettings).getHeadersSettings(headerLevel, columnIndex, extractionLength);\n      headerLevel += 1;\n      arrayEach(columnsSettings, function (columnSettings) {\n        var nodeData = _objectSpread(_objectSpread({}, columnSettings), {}, {\n          /**\n           * The header level (tree node depth level).\n           *\n           * @type {number}\n           */\n          headerLevel: headerLevel - 1,\n          /**\n           * A visual column index.\n           *\n           * @type {number}\n           */\n          columnIndex: columnIndex\n        });\n        var node;\n        if (headerLevel === 1) {\n          // fill the root node\n          parentNode.data = nodeData;\n          node = parentNode;\n        } else {\n          node = new TreeNode(nodeData);\n          parentNode.addChild(node);\n        }\n        if (headerLevel < _classPrivateFieldGet(_this2, _sourceSettings).getLayersCount()) {\n          _this2.buildLeaves(node, columnIndex, headerLevel, columnSettings.origColspan);\n        }\n        columnIndex += columnSettings.origColspan;\n      });\n    }\n    /**\n     * Clears the tree to the initial state.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldGet(this, _rootNodes).clear();\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n    }\n  }]);\n  return HeadersTree;\n}();\nexport { HeadersTree as default };","map":{"version":3,"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","len","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","err","isArray","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","_classPrivateFieldInitSpec","privateMap","_checkPrivateRedeclaration","set","privateCollection","has","_classPrivateFieldGet","receiver","_classExtractFieldDescriptor","_classApplyDescriptorGet","get","_classPrivateFieldSet","_classApplyDescriptorSet","action","arrayEach","TreeNode","_rootNodes","WeakMap","_rootsIndex","_sourceSettings","HeadersTree","sourceSettings","Map","getRoots","values","getRootByColumn","columnIndex","node","getNode","headerLevel","rootNode","normColumnIndex","columnCursor","treeNode","walkDown","_node$data","data","origColspan","nodeHeaderLevel","rebuildTreeIndex","_this","clear","_ref","_ref2","colspan","buildTree","columnsCount","getColumnsCount","columnSettings","getHeaderSettings","buildLeaves","parentNode","_this2","extractionLength","undefined","columnsSettings","getHeadersSettings","nodeData","addChild","getLayersCount","default"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/plugins/nestedHeaders/stateManager/headersTree.mjs"],"sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\n\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\n\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport TreeNode from \"../../../utils/dataStructures/tree.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @private\n * @class HeadersTree\n *\n * The header tree class keeps nested header settings in the tree\n * structure for easier node manipulation (e.q collapse or expand column).\n * That trees represent the current state of the nested headers. From the\n * trees, the matrix is generated for nested header renderers.\n *\n * The second role of the module is validation. While building the tree,\n * there is check whether the configuration contains overlapping\n * headers. If true, then the exception is thrown.\n *\n * The tree is static; it means that its column indexing never changes\n * even when a collapsing header is performed. The structure is based\n * on visual column indexes.\n *\n * For example, for that header configuration:\n *   +----+----+----+----+----+\n *   │ A1                │ A2 │\n *   +----+----+----+----+----+\n *   │ B1           │ B2 │ B3 │\n *   +----+----+----+----+----+\n *   │ C1      │ C2 │ C3 │ C4 │\n *   +----+----+----+----+----+\n *\n * The tree structures look like:\n *                (0)                      (4)           // a visual column index\n *                 │                        │\n *        .------(A1)------.              (A2)--.\n *   .--(B1)--.           (B2)--.              (B3)--.\n *  (C1)     (C2)              (C3)                 (C4)\n *\n */\n\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\nvar _rootNodes = /*#__PURE__*/new WeakMap();\n\nvar _rootsIndex = /*#__PURE__*/new WeakMap();\n\nvar _sourceSettings = /*#__PURE__*/new WeakMap();\n\nvar HeadersTree = /*#__PURE__*/function () {\n  /**\n   * The collection of nested headers settings structured into trees. The root trees are stored\n   * under the visual column index.\n   *\n   * @private\n   * @type {Map<number, TreeNode>}\n   */\n\n  /**\n   * A map that translates the visual column indexes that intersect the range\n   * defined by the header colspan width to the root index.\n   *\n   * @private\n   * @type {Map<number, number>}\n   */\n\n  /**\n   * The instance of the SourceSettings class.\n   *\n   * @private\n   * @type {SourceSettings}\n   */\n  function HeadersTree(sourceSettings) {\n    _classCallCheck(this, HeadersTree);\n\n    _classPrivateFieldInitSpec(this, _rootNodes, {\n      writable: true,\n      value: new Map()\n    });\n\n    _classPrivateFieldInitSpec(this, _rootsIndex, {\n      writable: true,\n      value: new Map()\n    });\n\n    _classPrivateFieldInitSpec(this, _sourceSettings, {\n      writable: true,\n      value: null\n    });\n\n    _classPrivateFieldSet(this, _sourceSettings, sourceSettings);\n  }\n  /**\n   * Gets an array of the all root nodes.\n   *\n   * @returns {TreeNode[]}\n   */\n\n\n  _createClass(HeadersTree, [{\n    key: \"getRoots\",\n    value: function getRoots() {\n      return Array.from(_classPrivateFieldGet(this, _rootNodes).values());\n    }\n    /**\n     * Gets a root node by specified visual column index.\n     *\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n\n  }, {\n    key: \"getRootByColumn\",\n    value: function getRootByColumn(columnIndex) {\n      var node;\n\n      if (_classPrivateFieldGet(this, _rootsIndex).has(columnIndex)) {\n        node = _classPrivateFieldGet(this, _rootNodes).get(_classPrivateFieldGet(this, _rootsIndex).get(columnIndex));\n      }\n\n      return node;\n    }\n    /**\n     * Gets a tree node by its position in the grid settings.\n     *\n     * @param {number} headerLevel Header level index (there is support only for positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n\n  }, {\n    key: \"getNode\",\n    value: function getNode(headerLevel, columnIndex) {\n      var rootNode = this.getRootByColumn(columnIndex);\n\n      if (!rootNode) {\n        return;\n      } // Normalize the visual column index to a 0-based system for a specific \"box\" defined\n      // by root node colspan width.\n\n\n      var normColumnIndex = columnIndex - _classPrivateFieldGet(this, _rootsIndex).get(columnIndex);\n\n      var columnCursor = 0;\n      var treeNode; // Collect all parent nodes that depend on the collapsed node.\n\n      rootNode.walkDown(function (node) {\n        var _node$data = node.data,\n            origColspan = _node$data.origColspan,\n            nodeHeaderLevel = _node$data.headerLevel;\n\n        if (headerLevel === nodeHeaderLevel) {\n          if (normColumnIndex >= columnCursor && normColumnIndex <= columnCursor + origColspan - 1) {\n            treeNode = node;\n            return false; // Cancel tree traversing.\n          }\n\n          columnCursor += origColspan;\n        }\n      });\n      return treeNode;\n    }\n    /**\n     * Builds (or rebuilds if called again) root nodes indexes.\n     */\n\n  }, {\n    key: \"rebuildTreeIndex\",\n    value: function rebuildTreeIndex() {\n      var _this = this;\n\n      var columnIndex = 0;\n\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n\n      arrayEach(_classPrivateFieldGet(this, _rootNodes), function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            colspan = _ref2[1].data.colspan;\n\n        // Map tree range (colspan range/width) into visual column index of the root node.\n        for (var i = columnIndex; i < columnIndex + colspan; i++) {\n          _classPrivateFieldGet(_this, _rootsIndex).set(i, columnIndex);\n        }\n\n        columnIndex += colspan;\n      });\n    }\n    /**\n     * Builds trees based on SourceSettings class. Calling a method causes clearing the tree state built\n     * from the previous call.\n     */\n\n  }, {\n    key: \"buildTree\",\n    value: function buildTree() {\n      this.clear();\n\n      var columnsCount = _classPrivateFieldGet(this, _sourceSettings).getColumnsCount();\n\n      var columnIndex = 0;\n\n      while (columnIndex < columnsCount) {\n        var columnSettings = _classPrivateFieldGet(this, _sourceSettings).getHeaderSettings(0, columnIndex);\n\n        var rootNode = new TreeNode();\n\n        _classPrivateFieldGet(this, _rootNodes).set(columnIndex, rootNode);\n\n        this.buildLeaves(rootNode, columnIndex, 0, columnSettings.origColspan);\n        columnIndex += columnSettings.origColspan;\n      }\n\n      this.rebuildTreeIndex();\n    }\n    /**\n     * Builds leaves for specified tree node.\n     *\n     * @param {TreeNode} parentNode A node to which the leaves applies.\n     * @param {number} columnIndex A visual column index.\n     * @param {number} headerLevel Currently processed header level.\n     * @param {number} [extractionLength=1] Determines column extraction length for node children.\n     */\n\n  }, {\n    key: \"buildLeaves\",\n    value: function buildLeaves(parentNode, columnIndex, headerLevel) {\n      var _this2 = this;\n\n      var extractionLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n      var columnsSettings = _classPrivateFieldGet(this, _sourceSettings).getHeadersSettings(headerLevel, columnIndex, extractionLength);\n\n      headerLevel += 1;\n      arrayEach(columnsSettings, function (columnSettings) {\n        var nodeData = _objectSpread(_objectSpread({}, columnSettings), {}, {\n          /**\n           * The header level (tree node depth level).\n           *\n           * @type {number}\n           */\n          headerLevel: headerLevel - 1,\n\n          /**\n           * A visual column index.\n           *\n           * @type {number}\n           */\n          columnIndex: columnIndex\n        });\n\n        var node;\n\n        if (headerLevel === 1) {\n          // fill the root node\n          parentNode.data = nodeData;\n          node = parentNode;\n        } else {\n          node = new TreeNode(nodeData);\n          parentNode.addChild(node);\n        }\n\n        if (headerLevel < _classPrivateFieldGet(_this2, _sourceSettings).getLayersCount()) {\n          _this2.buildLeaves(node, columnIndex, headerLevel, columnSettings.origColspan);\n        }\n\n        columnIndex += columnSettings.origColspan;\n      });\n    }\n    /**\n     * Clears the tree to the initial state.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldGet(this, _rootNodes).clear();\n\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n    }\n  }]);\n\n  return HeadersTree;\n}();\n\nexport { HeadersTree as default };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { defineGetter } from \"../../../../../helpers/object.mjs\";\nvar MIXIN_NAME = 'stickyColumnsLeft';\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the first columns in the horizontal axis.\n *\n * @type {object}\n */\n\nvar stickyColumnsLeft = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getFirstRenderedColumn: function getFirstRenderedColumn() {\n    var totalColumns = this.wot.getSetting('totalColumns');\n    if (totalColumns === 0) {\n      return -1;\n    }\n    return 0;\n  },\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   */\n  getFirstVisibleColumn: function getFirstVisibleColumn() {\n    return this.getFirstRenderedColumn();\n  },\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getLastRenderedColumn: function getLastRenderedColumn() {\n    return this.getRenderedColumnsCount() - 1;\n  },\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   */\n  getLastVisibleColumn: function getLastVisibleColumn() {\n    return this.getLastRenderedColumn();\n  },\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {number}\n   */\n  getRenderedColumnsCount: function getRenderedColumnsCount() {\n    var totalColumns = this.wot.getSetting('totalColumns');\n    return Math.min(this.wot.getSetting('fixedColumnsLeft'), totalColumns);\n  },\n  /**\n   * Get the number of fully visible columns in the viewport.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   */\n  getVisibleColumnsCount: function getVisibleColumnsCount() {\n    return this.getRenderedColumnsCount();\n  }\n};\ndefineGetter(stickyColumnsLeft, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyColumnsLeft;","map":{"version":3,"names":["defineGetter","MIXIN_NAME","stickyColumnsLeft","getFirstRenderedColumn","totalColumns","wot","getSetting","getFirstVisibleColumn","getLastRenderedColumn","getRenderedColumnsCount","getLastVisibleColumn","Math","min","getVisibleColumnsCount","writable","enumerable"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/3rdparty/walkontable/src/table/mixin/stickyColumnsLeft.mjs"],"sourcesContent":["import { defineGetter } from \"../../../../../helpers/object.mjs\";\nvar MIXIN_NAME = 'stickyColumnsLeft';\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the first columns in the horizontal axis.\n *\n * @type {object}\n */\n\nvar stickyColumnsLeft = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getFirstRenderedColumn: function getFirstRenderedColumn() {\n    var totalColumns = this.wot.getSetting('totalColumns');\n\n    if (totalColumns === 0) {\n      return -1;\n    }\n\n    return 0;\n  },\n\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   */\n  getFirstVisibleColumn: function getFirstVisibleColumn() {\n    return this.getFirstRenderedColumn();\n  },\n\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getLastRenderedColumn: function getLastRenderedColumn() {\n    return this.getRenderedColumnsCount() - 1;\n  },\n\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   */\n  getLastVisibleColumn: function getLastVisibleColumn() {\n    return this.getLastRenderedColumn();\n  },\n\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {number}\n   */\n  getRenderedColumnsCount: function getRenderedColumnsCount() {\n    var totalColumns = this.wot.getSetting('totalColumns');\n    return Math.min(this.wot.getSetting('fixedColumnsLeft'), totalColumns);\n  },\n\n  /**\n   * Get the number of fully visible columns in the viewport.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   */\n  getVisibleColumnsCount: function getVisibleColumnsCount() {\n    return this.getRenderedColumnsCount();\n  }\n};\ndefineGetter(stickyColumnsLeft, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyColumnsLeft;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mCAAmC;AAChE,IAAIC,UAAU,GAAG,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,iBAAiB,GAAG;EACtB;AACF;AACA;AACA;AACA;EACEC,sBAAsB,EAAE,SAASA,sBAAsBA,CAAA,EAAG;IACxD,IAAIC,YAAY,GAAG,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC,cAAc,CAAC;IAEtD,IAAIF,YAAY,KAAK,CAAC,EAAE;MACtB,OAAO,CAAC,CAAC;IACX;IAEA,OAAO,CAAC;EACV,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEG,qBAAqB,EAAE,SAASA,qBAAqBA,CAAA,EAAG;IACtD,OAAO,IAAI,CAACJ,sBAAsB,CAAC,CAAC;EACtC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEK,qBAAqB,EAAE,SAASA,qBAAqBA,CAAA,EAAG;IACtD,OAAO,IAAI,CAACC,uBAAuB,CAAC,CAAC,GAAG,CAAC;EAC3C,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,oBAAoB,EAAE,SAASA,oBAAoBA,CAAA,EAAG;IACpD,OAAO,IAAI,CAACF,qBAAqB,CAAC,CAAC;EACrC,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,uBAAuB,EAAE,SAASA,uBAAuBA,CAAA,EAAG;IAC1D,IAAIL,YAAY,GAAG,IAAI,CAACC,GAAG,CAACC,UAAU,CAAC,cAAc,CAAC;IACtD,OAAOK,IAAI,CAACC,GAAG,CAAC,IAAI,CAACP,GAAG,CAACC,UAAU,CAAC,kBAAkB,CAAC,EAAEF,YAAY,CAAC;EACxE,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACES,sBAAsB,EAAE,SAASA,sBAAsBA,CAAA,EAAG;IACxD,OAAO,IAAI,CAACJ,uBAAuB,CAAC,CAAC;EACvC;AACF,CAAC;AACDT,YAAY,CAACE,iBAAiB,EAAE,YAAY,EAAED,UAAU,EAAE;EACxDa,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,eAAeb,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport { CellCoords } from \"../../3rdparty/walkontable/src/index.mjs\";\nimport { stringify } from \"../../helpers/mixed.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport hooksRefRegisterer from \"../../mixins/hooksRefRegisterer.mjs\";\nexport var EDITOR_TYPE = 'base';\nexport var EDITOR_STATE = Object.freeze({\n  VIRGIN: 'STATE_VIRGIN',\n  // before editing\n  EDITING: 'STATE_EDITING',\n  WAITING: 'STATE_WAITING',\n  // waiting for async validation\n  FINISHED: 'STATE_FINISHED'\n});\n/**\n * @class BaseEditor\n */\n\nexport var BaseEditor = /*#__PURE__*/function () {\n  /**\n   * @param {Handsontable} instance A reference to the source instance of the Handsontable.\n   */\n  function BaseEditor(instance) {\n    _classCallCheck(this, BaseEditor);\n\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = instance;\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @deprecated\n     *\n     * @type {Handsontable}\n     */\n\n    this.instance = instance;\n    /**\n     * Editor's state.\n     *\n     * @type {string}\n     */\n\n    this.state = EDITOR_STATE.VIRGIN;\n    /**\n     * Flag to store information about editor's opening status.\n     *\n     * @private\n     *\n     * @type {boolean}\n     */\n\n    this._opened = false;\n    /**\n     * Defines the editor's editing mode. When false, then an editor works in fast editing mode.\n     *\n     * @private\n     *\n     * @type {boolean}\n     */\n\n    this._fullEditMode = false;\n    /**\n     * Callback to call after closing editor.\n     *\n     * @type {Function}\n     */\n\n    this._closeCallback = null;\n    /**\n     * Currently rendered cell's TD element.\n     *\n     * @type {HTMLTableCellElement}\n     */\n\n    this.TD = null;\n    /**\n     * Visual row index.\n     *\n     * @type {number}\n     */\n\n    this.row = null;\n    /**\n     * Visual column index.\n     *\n     * @type {number}\n     */\n\n    this.col = null;\n    /**\n     * Column property name or a column index, if datasource is an array of arrays.\n     *\n     * @type {number|string}\n     */\n\n    this.prop = null;\n    /**\n     * Original cell's value.\n     *\n     * @type {*}\n     */\n\n    this.originalValue = null;\n    /**\n     * Object containing the cell's properties.\n     *\n     * @type {object}\n     */\n\n    this.cellProperties = null;\n    this.init();\n  }\n  /**\n   * Fires callback after closing editor.\n   *\n   * @private\n   * @param {boolean} result The editor value.\n   */\n\n  _createClass(BaseEditor, [{\n    key: \"_fireCallbacks\",\n    value: function _fireCallbacks(result) {\n      if (this._closeCallback) {\n        this._closeCallback(result);\n        this._closeCallback = null;\n      }\n    }\n    /**\n     * Initializes an editor's intance.\n     */\n  }, {\n    key: \"init\",\n    value: function init() {}\n    /**\n     * Required method to get current value from editable element.\n     */\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      throw Error('Editor getValue() method unimplemented');\n    }\n    /**\n     * Required method to set new value into editable element.\n     */\n  }, {\n    key: \"setValue\",\n    value: function setValue() {\n      throw Error('Editor setValue() method unimplemented');\n    }\n    /**\n     * Required method to open editor.\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      throw Error('Editor open() method unimplemented');\n    }\n    /**\n     * Required method to close editor.\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      throw Error('Editor close() method unimplemented');\n    }\n    /**\n     * Prepares editor's meta data.\n     *\n     * @param {number} row The visual row index.\n     * @param {number} col The visual column index.\n     * @param {number|string} prop The column property (passed when datasource is an array of objects).\n     * @param {HTMLTableCellElement} td The rendered cell element.\n     * @param {*} value The rendered value.\n     * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n     */\n  }, {\n    key: \"prepare\",\n    value: function prepare(row, col, prop, td, value, cellProperties) {\n      this.TD = td;\n      this.row = row;\n      this.col = col;\n      this.prop = prop;\n      this.originalValue = value;\n      this.cellProperties = cellProperties;\n      this.state = EDITOR_STATE.VIRGIN;\n    }\n    /**\n     * Fallback method to provide extendable editors in ES5.\n     *\n     * @returns {Function}\n     */\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      return /*#__PURE__*/function (_this$constructor) {\n        _inherits(Editor, _this$constructor);\n        var _super = _createSuper(Editor);\n        function Editor() {\n          _classCallCheck(this, Editor);\n          return _super.apply(this, arguments);\n        }\n        return _createClass(Editor);\n      }(this.constructor);\n    }\n    /**\n     * Saves value from editor into data storage.\n     *\n     * @param {*} value The editor value.\n     * @param {boolean} ctrlDown If `true`, applies value to each cell in the last selected range.\n     */\n  }, {\n    key: \"saveValue\",\n    value: function saveValue(value, ctrlDown) {\n      var visualRowFrom;\n      var visualColumnFrom;\n      var visualRowTo;\n      var visualColumnTo; // if ctrl+enter and multiple cells selected, behave like Excel (finish editing and apply to all cells)\n\n      if (ctrlDown) {\n        var selectedLast = this.hot.getSelectedLast();\n        visualRowFrom = Math.max(Math.min(selectedLast[0], selectedLast[2]), 0); // Math.max eliminate headers coords.\n\n        visualColumnFrom = Math.max(Math.min(selectedLast[1], selectedLast[3]), 0); // Math.max eliminate headers coords.\n\n        visualRowTo = Math.max(selectedLast[0], selectedLast[2]);\n        visualColumnTo = Math.max(selectedLast[1], selectedLast[3]);\n      } else {\n        var _ref = [this.row, this.col, null, null];\n        visualRowFrom = _ref[0];\n        visualColumnFrom = _ref[1];\n        visualRowTo = _ref[2];\n        visualColumnTo = _ref[3];\n      }\n      var modifiedCellCoords = this.hot.runHooks('modifyGetCellCoords', visualRowFrom, visualColumnFrom);\n      if (Array.isArray(modifiedCellCoords)) {\n        var _modifiedCellCoords = _slicedToArray(modifiedCellCoords, 2);\n        visualRowFrom = _modifiedCellCoords[0];\n        visualColumnFrom = _modifiedCellCoords[1];\n      } // Saving values using the modified coordinates.\n\n      this.hot.populateFromArray(visualRowFrom, visualColumnFrom, value, visualRowTo, visualColumnTo, 'edit');\n    }\n    /**\n     * Begins editing on a highlighted cell and hides fillHandle corner if was present.\n     *\n     * @param {*} newInitialValue The initial editor value.\n     * @param {Event} event The keyboard event object.\n     */\n  }, {\n    key: \"beginEditing\",\n    value: function beginEditing(newInitialValue, event) {\n      if (this.state !== EDITOR_STATE.VIRGIN) {\n        return;\n      }\n      var hotInstance = this.hot; // We have to convert visual indexes into renderable indexes\n      // due to hidden columns don't participate in the rendering process\n\n      var renderableRowIndex = hotInstance.rowIndexMapper.getRenderableFromVisualIndex(this.row);\n      var renderableColumnIndex = hotInstance.columnIndexMapper.getRenderableFromVisualIndex(this.col);\n      hotInstance.view.scrollViewport(new CellCoords(renderableRowIndex, renderableColumnIndex));\n      this.state = EDITOR_STATE.EDITING; // Set the editor value only in the full edit mode. In other mode the focusable element has to be empty,\n      // otherwise IME (editor for Asia users) doesn't work.\n\n      if (this.isInFullEditMode()) {\n        var stringifiedInitialValue = typeof newInitialValue === 'string' ? newInitialValue : stringify(this.originalValue);\n        this.setValue(stringifiedInitialValue);\n      }\n      this.open(event);\n      this._opened = true;\n      this.focus(); // only rerender the selections (FillHandle should disappear when beginEditing is triggered)\n\n      hotInstance.view.render();\n      hotInstance.runHooks('afterBeginEditing', this.row, this.col);\n    }\n    /**\n     * Finishes editing and start saving or restoring process for editing cell or last selected range.\n     *\n     * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.\n     * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.\n     * @param {Function} callback The callback function, fired after editor closing.\n     */\n  }, {\n    key: \"finishEditing\",\n    value: function finishEditing(restoreOriginalValue, ctrlDown, callback) {\n      var _this = this;\n      var val;\n      if (callback) {\n        var previousCloseCallback = this._closeCallback;\n        this._closeCallback = function (result) {\n          if (previousCloseCallback) {\n            previousCloseCallback(result);\n          }\n          callback(result);\n          _this.hot.view.render();\n        };\n      }\n      if (this.isWaiting()) {\n        return;\n      }\n      if (this.state === EDITOR_STATE.VIRGIN) {\n        this.hot._registerTimeout(function () {\n          _this._fireCallbacks(true);\n        });\n        return;\n      }\n      if (this.state === EDITOR_STATE.EDITING) {\n        if (restoreOriginalValue) {\n          this.cancelChanges();\n          this.hot.view.render();\n          return;\n        }\n        var value = this.getValue();\n        if (this.hot.getSettings().trimWhitespace) {\n          // We trim only string values\n          val = [[typeof value === 'string' ? String.prototype.trim.call(value || '') : value]];\n        } else {\n          val = [[value]];\n        }\n        this.state = EDITOR_STATE.WAITING;\n        this.saveValue(val, ctrlDown);\n        if (this.hot.getCellValidator(this.cellProperties)) {\n          this.hot.addHookOnce('postAfterValidate', function (result) {\n            _this.state = EDITOR_STATE.FINISHED;\n            _this.discardEditor(result);\n          });\n        } else {\n          this.state = EDITOR_STATE.FINISHED;\n          this.discardEditor(true);\n        }\n      }\n    }\n    /**\n     * Finishes editing without singout saving value.\n     */\n  }, {\n    key: \"cancelChanges\",\n    value: function cancelChanges() {\n      this.state = EDITOR_STATE.FINISHED;\n      this.discardEditor();\n    }\n    /**\n     * Verifies result of validation or closes editor if user's cancelled changes.\n     *\n     * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,\n     *                                   then an editor won't be closed until validation is passed.\n     */\n  }, {\n    key: \"discardEditor\",\n    value: function discardEditor(result) {\n      if (this.state !== EDITOR_STATE.FINISHED) {\n        return;\n      } // validator was defined and failed\n\n      if (result === false && this.cellProperties.allowInvalid !== true) {\n        this.hot.selectCell(this.row, this.col);\n        this.focus();\n        this.state = EDITOR_STATE.EDITING;\n        this._fireCallbacks(false);\n      } else {\n        this.close();\n        this._opened = false;\n        this._fullEditMode = false;\n        this.state = EDITOR_STATE.VIRGIN;\n        this._fireCallbacks(true);\n      }\n    }\n    /**\n     * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated\n     * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.\n     */\n  }, {\n    key: \"enableFullEditMode\",\n    value: function enableFullEditMode() {\n      this._fullEditMode = true;\n    }\n    /**\n     * Checks if editor is in full edit mode.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isInFullEditMode\",\n    value: function isInFullEditMode() {\n      return this._fullEditMode;\n    }\n    /**\n     * Returns information whether the editor is open.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isOpened\",\n    value: function isOpened() {\n      return this._opened;\n    }\n    /**\n     * Returns information whether the editor is waiting, eg.: for async validation.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isWaiting\",\n    value: function isWaiting() {\n      return this.state === EDITOR_STATE.WAITING;\n    }\n    /**\n     * Gets className of the edited cell if exist.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: \"getEditedCellsLayerClass\",\n    value: function getEditedCellsLayerClass() {\n      var editorSection = this.checkEditorSection();\n      switch (editorSection) {\n        case 'right':\n          return 'ht_clone_right';\n        case 'left':\n          return 'ht_clone_left';\n        case 'bottom':\n          return 'ht_clone_bottom';\n        case 'bottom-right-corner':\n          return 'ht_clone_bottom_right_corner';\n        case 'bottom-left-corner':\n          return 'ht_clone_bottom_left_corner';\n        case 'top':\n          return 'ht_clone_top';\n        case 'top-right-corner':\n          return 'ht_clone_top_right_corner';\n        case 'top-left-corner':\n          return 'ht_clone_top_left_corner';\n        default:\n          return 'ht_clone_master';\n      }\n    }\n    /**\n     * Gets HTMLTableCellElement of the edited cell if exist.\n     *\n     * @returns {HTMLTableCellElement|null}\n     */\n  }, {\n    key: \"getEditedCell\",\n    value: function getEditedCell() {\n      return this.hot.getCell(this.row, this.col, true);\n    }\n    /**\n     * Returns name of the overlay, where editor is placed.\n     *\n     * @private\n     * @returns {string}\n     */\n  }, {\n    key: \"checkEditorSection\",\n    value: function checkEditorSection() {\n      var totalRows = this.hot.countRows();\n      var section = '';\n      if (this.row < this.hot.getSettings().fixedRowsTop) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'top-left-corner';\n        } else {\n          section = 'top';\n        }\n      } else if (this.hot.getSettings().fixedRowsBottom && this.row >= totalRows - this.hot.getSettings().fixedRowsBottom) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'bottom-left-corner';\n        } else {\n          section = 'bottom';\n        }\n      } else if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n        section = 'left';\n      }\n      return section;\n    }\n  }], [{\n    key: \"EDITOR_TYPE\",\n    get: function get() {\n      return EDITOR_TYPE;\n    }\n  }]);\n  return BaseEditor;\n}();\nmixin(BaseEditor, hooksRefRegisterer);","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","len","length","arr2","_i","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_inherits","subClass","superClass","create","writable","configurable","defineProperty","_setPrototypeOf","p","setPrototypeOf","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","key","_createClass","protoProps","staticProps","CellCoords","stringify","mixin","hooksRefRegisterer","EDITOR_TYPE","EDITOR_STATE","freeze","VIRGIN","EDITING","WAITING","FINISHED","BaseEditor","hot","state","_opened","_fullEditMode","_closeCallback","TD","row","col","prop","originalValue","cellProperties","init","_fireCallbacks","getValue","Error","setValue","open","close","prepare","td","extend","_this$constructor","Editor","_super","saveValue","ctrlDown","visualRowFrom","visualColumnFrom","visualRowTo","visualColumnTo","selectedLast","getSelectedLast","Math","max","min","_ref","modifiedCellCoords","runHooks","_modifiedCellCoords","populateFromArray","beginEditing","newInitialValue","event","hotInstance","renderableRowIndex","rowIndexMapper","getRenderableFromVisualIndex","renderableColumnIndex","columnIndexMapper","view","scrollViewport","isInFullEditMode","stringifiedInitialValue","focus","render","finishEditing","restoreOriginalValue","callback","_this","val","previousCloseCallback","isWaiting","_registerTimeout","cancelChanges","getSettings","trimWhitespace","String","trim","getCellValidator","addHookOnce","discardEditor","allowInvalid","selectCell","enableFullEditMode","isOpened","getEditedCellsLayerClass","editorSection","checkEditorSection","getEditedCell","getCell","totalRows","countRows","section","fixedRowsTop","fixedColumnsLeft","fixedRowsBottom","get"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/editors/baseEditor/baseEditor.mjs"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \"prototype\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } else if (call !== void 0) { throw new TypeError(\"Derived constructors may only return object or undefined\"); } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport \"core-js/modules/es.object.freeze.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.object.set-prototype-of.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.reflect.construct.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport { CellCoords } from \"../../3rdparty/walkontable/src/index.mjs\";\nimport { stringify } from \"../../helpers/mixed.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport hooksRefRegisterer from \"../../mixins/hooksRefRegisterer.mjs\";\nexport var EDITOR_TYPE = 'base';\nexport var EDITOR_STATE = Object.freeze({\n  VIRGIN: 'STATE_VIRGIN',\n  // before editing\n  EDITING: 'STATE_EDITING',\n  WAITING: 'STATE_WAITING',\n  // waiting for async validation\n  FINISHED: 'STATE_FINISHED'\n});\n/**\n * @class BaseEditor\n */\n\nexport var BaseEditor = /*#__PURE__*/function () {\n  /**\n   * @param {Handsontable} instance A reference to the source instance of the Handsontable.\n   */\n  function BaseEditor(instance) {\n    _classCallCheck(this, BaseEditor);\n\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = instance;\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @deprecated\n     *\n     * @type {Handsontable}\n     */\n\n    this.instance = instance;\n    /**\n     * Editor's state.\n     *\n     * @type {string}\n     */\n\n    this.state = EDITOR_STATE.VIRGIN;\n    /**\n     * Flag to store information about editor's opening status.\n     *\n     * @private\n     *\n     * @type {boolean}\n     */\n\n    this._opened = false;\n    /**\n     * Defines the editor's editing mode. When false, then an editor works in fast editing mode.\n     *\n     * @private\n     *\n     * @type {boolean}\n     */\n\n    this._fullEditMode = false;\n    /**\n     * Callback to call after closing editor.\n     *\n     * @type {Function}\n     */\n\n    this._closeCallback = null;\n    /**\n     * Currently rendered cell's TD element.\n     *\n     * @type {HTMLTableCellElement}\n     */\n\n    this.TD = null;\n    /**\n     * Visual row index.\n     *\n     * @type {number}\n     */\n\n    this.row = null;\n    /**\n     * Visual column index.\n     *\n     * @type {number}\n     */\n\n    this.col = null;\n    /**\n     * Column property name or a column index, if datasource is an array of arrays.\n     *\n     * @type {number|string}\n     */\n\n    this.prop = null;\n    /**\n     * Original cell's value.\n     *\n     * @type {*}\n     */\n\n    this.originalValue = null;\n    /**\n     * Object containing the cell's properties.\n     *\n     * @type {object}\n     */\n\n    this.cellProperties = null;\n    this.init();\n  }\n  /**\n   * Fires callback after closing editor.\n   *\n   * @private\n   * @param {boolean} result The editor value.\n   */\n\n\n  _createClass(BaseEditor, [{\n    key: \"_fireCallbacks\",\n    value: function _fireCallbacks(result) {\n      if (this._closeCallback) {\n        this._closeCallback(result);\n\n        this._closeCallback = null;\n      }\n    }\n    /**\n     * Initializes an editor's intance.\n     */\n\n  }, {\n    key: \"init\",\n    value: function init() {}\n    /**\n     * Required method to get current value from editable element.\n     */\n\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      throw Error('Editor getValue() method unimplemented');\n    }\n    /**\n     * Required method to set new value into editable element.\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue() {\n      throw Error('Editor setValue() method unimplemented');\n    }\n    /**\n     * Required method to open editor.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      throw Error('Editor open() method unimplemented');\n    }\n    /**\n     * Required method to close editor.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      throw Error('Editor close() method unimplemented');\n    }\n    /**\n     * Prepares editor's meta data.\n     *\n     * @param {number} row The visual row index.\n     * @param {number} col The visual column index.\n     * @param {number|string} prop The column property (passed when datasource is an array of objects).\n     * @param {HTMLTableCellElement} td The rendered cell element.\n     * @param {*} value The rendered value.\n     * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n     */\n\n  }, {\n    key: \"prepare\",\n    value: function prepare(row, col, prop, td, value, cellProperties) {\n      this.TD = td;\n      this.row = row;\n      this.col = col;\n      this.prop = prop;\n      this.originalValue = value;\n      this.cellProperties = cellProperties;\n      this.state = EDITOR_STATE.VIRGIN;\n    }\n    /**\n     * Fallback method to provide extendable editors in ES5.\n     *\n     * @returns {Function}\n     */\n\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      return /*#__PURE__*/function (_this$constructor) {\n        _inherits(Editor, _this$constructor);\n\n        var _super = _createSuper(Editor);\n\n        function Editor() {\n          _classCallCheck(this, Editor);\n\n          return _super.apply(this, arguments);\n        }\n\n        return _createClass(Editor);\n      }(this.constructor);\n    }\n    /**\n     * Saves value from editor into data storage.\n     *\n     * @param {*} value The editor value.\n     * @param {boolean} ctrlDown If `true`, applies value to each cell in the last selected range.\n     */\n\n  }, {\n    key: \"saveValue\",\n    value: function saveValue(value, ctrlDown) {\n      var visualRowFrom;\n      var visualColumnFrom;\n      var visualRowTo;\n      var visualColumnTo; // if ctrl+enter and multiple cells selected, behave like Excel (finish editing and apply to all cells)\n\n      if (ctrlDown) {\n        var selectedLast = this.hot.getSelectedLast();\n        visualRowFrom = Math.max(Math.min(selectedLast[0], selectedLast[2]), 0); // Math.max eliminate headers coords.\n\n        visualColumnFrom = Math.max(Math.min(selectedLast[1], selectedLast[3]), 0); // Math.max eliminate headers coords.\n\n        visualRowTo = Math.max(selectedLast[0], selectedLast[2]);\n        visualColumnTo = Math.max(selectedLast[1], selectedLast[3]);\n      } else {\n        var _ref = [this.row, this.col, null, null];\n        visualRowFrom = _ref[0];\n        visualColumnFrom = _ref[1];\n        visualRowTo = _ref[2];\n        visualColumnTo = _ref[3];\n      }\n\n      var modifiedCellCoords = this.hot.runHooks('modifyGetCellCoords', visualRowFrom, visualColumnFrom);\n\n      if (Array.isArray(modifiedCellCoords)) {\n        var _modifiedCellCoords = _slicedToArray(modifiedCellCoords, 2);\n\n        visualRowFrom = _modifiedCellCoords[0];\n        visualColumnFrom = _modifiedCellCoords[1];\n      } // Saving values using the modified coordinates.\n\n\n      this.hot.populateFromArray(visualRowFrom, visualColumnFrom, value, visualRowTo, visualColumnTo, 'edit');\n    }\n    /**\n     * Begins editing on a highlighted cell and hides fillHandle corner if was present.\n     *\n     * @param {*} newInitialValue The initial editor value.\n     * @param {Event} event The keyboard event object.\n     */\n\n  }, {\n    key: \"beginEditing\",\n    value: function beginEditing(newInitialValue, event) {\n      if (this.state !== EDITOR_STATE.VIRGIN) {\n        return;\n      }\n\n      var hotInstance = this.hot; // We have to convert visual indexes into renderable indexes\n      // due to hidden columns don't participate in the rendering process\n\n      var renderableRowIndex = hotInstance.rowIndexMapper.getRenderableFromVisualIndex(this.row);\n      var renderableColumnIndex = hotInstance.columnIndexMapper.getRenderableFromVisualIndex(this.col);\n      hotInstance.view.scrollViewport(new CellCoords(renderableRowIndex, renderableColumnIndex));\n      this.state = EDITOR_STATE.EDITING; // Set the editor value only in the full edit mode. In other mode the focusable element has to be empty,\n      // otherwise IME (editor for Asia users) doesn't work.\n\n      if (this.isInFullEditMode()) {\n        var stringifiedInitialValue = typeof newInitialValue === 'string' ? newInitialValue : stringify(this.originalValue);\n        this.setValue(stringifiedInitialValue);\n      }\n\n      this.open(event);\n      this._opened = true;\n      this.focus(); // only rerender the selections (FillHandle should disappear when beginEditing is triggered)\n\n      hotInstance.view.render();\n      hotInstance.runHooks('afterBeginEditing', this.row, this.col);\n    }\n    /**\n     * Finishes editing and start saving or restoring process for editing cell or last selected range.\n     *\n     * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.\n     * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.\n     * @param {Function} callback The callback function, fired after editor closing.\n     */\n\n  }, {\n    key: \"finishEditing\",\n    value: function finishEditing(restoreOriginalValue, ctrlDown, callback) {\n      var _this = this;\n\n      var val;\n\n      if (callback) {\n        var previousCloseCallback = this._closeCallback;\n\n        this._closeCallback = function (result) {\n          if (previousCloseCallback) {\n            previousCloseCallback(result);\n          }\n\n          callback(result);\n\n          _this.hot.view.render();\n        };\n      }\n\n      if (this.isWaiting()) {\n        return;\n      }\n\n      if (this.state === EDITOR_STATE.VIRGIN) {\n        this.hot._registerTimeout(function () {\n          _this._fireCallbacks(true);\n        });\n\n        return;\n      }\n\n      if (this.state === EDITOR_STATE.EDITING) {\n        if (restoreOriginalValue) {\n          this.cancelChanges();\n          this.hot.view.render();\n          return;\n        }\n\n        var value = this.getValue();\n\n        if (this.hot.getSettings().trimWhitespace) {\n          // We trim only string values\n          val = [[typeof value === 'string' ? String.prototype.trim.call(value || '') : value]];\n        } else {\n          val = [[value]];\n        }\n\n        this.state = EDITOR_STATE.WAITING;\n        this.saveValue(val, ctrlDown);\n\n        if (this.hot.getCellValidator(this.cellProperties)) {\n          this.hot.addHookOnce('postAfterValidate', function (result) {\n            _this.state = EDITOR_STATE.FINISHED;\n\n            _this.discardEditor(result);\n          });\n        } else {\n          this.state = EDITOR_STATE.FINISHED;\n          this.discardEditor(true);\n        }\n      }\n    }\n    /**\n     * Finishes editing without singout saving value.\n     */\n\n  }, {\n    key: \"cancelChanges\",\n    value: function cancelChanges() {\n      this.state = EDITOR_STATE.FINISHED;\n      this.discardEditor();\n    }\n    /**\n     * Verifies result of validation or closes editor if user's cancelled changes.\n     *\n     * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,\n     *                                   then an editor won't be closed until validation is passed.\n     */\n\n  }, {\n    key: \"discardEditor\",\n    value: function discardEditor(result) {\n      if (this.state !== EDITOR_STATE.FINISHED) {\n        return;\n      } // validator was defined and failed\n\n\n      if (result === false && this.cellProperties.allowInvalid !== true) {\n        this.hot.selectCell(this.row, this.col);\n        this.focus();\n        this.state = EDITOR_STATE.EDITING;\n\n        this._fireCallbacks(false);\n      } else {\n        this.close();\n        this._opened = false;\n        this._fullEditMode = false;\n        this.state = EDITOR_STATE.VIRGIN;\n\n        this._fireCallbacks(true);\n      }\n    }\n    /**\n     * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated\n     * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.\n     */\n\n  }, {\n    key: \"enableFullEditMode\",\n    value: function enableFullEditMode() {\n      this._fullEditMode = true;\n    }\n    /**\n     * Checks if editor is in full edit mode.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isInFullEditMode\",\n    value: function isInFullEditMode() {\n      return this._fullEditMode;\n    }\n    /**\n     * Returns information whether the editor is open.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isOpened\",\n    value: function isOpened() {\n      return this._opened;\n    }\n    /**\n     * Returns information whether the editor is waiting, eg.: for async validation.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isWaiting\",\n    value: function isWaiting() {\n      return this.state === EDITOR_STATE.WAITING;\n    }\n    /**\n     * Gets className of the edited cell if exist.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getEditedCellsLayerClass\",\n    value: function getEditedCellsLayerClass() {\n      var editorSection = this.checkEditorSection();\n\n      switch (editorSection) {\n        case 'right':\n          return 'ht_clone_right';\n\n        case 'left':\n          return 'ht_clone_left';\n\n        case 'bottom':\n          return 'ht_clone_bottom';\n\n        case 'bottom-right-corner':\n          return 'ht_clone_bottom_right_corner';\n\n        case 'bottom-left-corner':\n          return 'ht_clone_bottom_left_corner';\n\n        case 'top':\n          return 'ht_clone_top';\n\n        case 'top-right-corner':\n          return 'ht_clone_top_right_corner';\n\n        case 'top-left-corner':\n          return 'ht_clone_top_left_corner';\n\n        default:\n          return 'ht_clone_master';\n      }\n    }\n    /**\n     * Gets HTMLTableCellElement of the edited cell if exist.\n     *\n     * @returns {HTMLTableCellElement|null}\n     */\n\n  }, {\n    key: \"getEditedCell\",\n    value: function getEditedCell() {\n      return this.hot.getCell(this.row, this.col, true);\n    }\n    /**\n     * Returns name of the overlay, where editor is placed.\n     *\n     * @private\n     * @returns {string}\n     */\n\n  }, {\n    key: \"checkEditorSection\",\n    value: function checkEditorSection() {\n      var totalRows = this.hot.countRows();\n      var section = '';\n\n      if (this.row < this.hot.getSettings().fixedRowsTop) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'top-left-corner';\n        } else {\n          section = 'top';\n        }\n      } else if (this.hot.getSettings().fixedRowsBottom && this.row >= totalRows - this.hot.getSettings().fixedRowsBottom) {\n        if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n          section = 'bottom-left-corner';\n        } else {\n          section = 'bottom';\n        }\n      } else if (this.col < this.hot.getSettings().fixedColumnsLeft) {\n        section = 'left';\n      }\n\n      return section;\n    }\n  }], [{\n    key: \"EDITOR_TYPE\",\n    get: function get() {\n      return EDITOR_TYPE;\n    }\n  }]);\n\n  return BaseEditor;\n}();\nmixin(BaseEditor, hooksRefRegisterer);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
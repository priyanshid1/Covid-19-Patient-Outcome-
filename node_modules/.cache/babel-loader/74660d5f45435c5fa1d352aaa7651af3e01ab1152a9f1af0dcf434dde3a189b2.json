{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport { isUndefined, isDefined } from \"../../helpers/mixed.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\"; // Counter for checking if there is a memory leak.\n\nvar registeredMaps = 0;\n/**\n * Collection of index maps having unique names. It allow us to perform bulk operations such as init, remove, insert on all index maps that have been registered in the collection.\n */\n\nexport var MapCollection = /*#__PURE__*/function () {\n  function MapCollection() {\n    _classCallCheck(this, MapCollection);\n\n    /**\n     * Collection of index maps.\n     *\n     * @type {Map<string, IndexMap>}\n     */\n    this.collection = new Map();\n  }\n  /**\n   * Register custom index map.\n   *\n   * @param {string} uniqueName Unique name of the index map.\n   * @param {IndexMap} indexMap Index map containing miscellaneous (i.e. Meta data, indexes sequence), updated after remove and insert data actions.\n   */\n\n  _createClass(MapCollection, [{\n    key: \"register\",\n    value: function register(uniqueName, indexMap) {\n      var _this = this;\n      if (this.collection.has(uniqueName) === false) {\n        this.collection.set(uniqueName, indexMap);\n        indexMap.addLocalHook('change', function () {\n          return _this.runLocalHooks('change', indexMap);\n        });\n        registeredMaps += 1;\n      }\n    }\n    /**\n     * Unregister custom index map.\n     *\n     * @param {string} name Name of the index map.\n     */\n  }, {\n    key: \"unregister\",\n    value: function unregister(name) {\n      var indexMap = this.collection.get(name);\n      if (isDefined(indexMap)) {\n        indexMap.destroy();\n        this.collection.delete(name);\n        this.runLocalHooks('change', indexMap);\n        registeredMaps -= 1;\n      }\n    }\n    /**\n     * Unregisters and destroys all collected index map instances.\n     */\n  }, {\n    key: \"unregisterAll\",\n    value: function unregisterAll() {\n      var _this2 = this;\n      this.collection.forEach(function (indexMap, name) {\n        return _this2.unregister(name);\n      });\n      this.collection.clear();\n    }\n    /**\n     * Get index map for the provided name.\n     *\n     * @param {string} [name] Name of the index map.\n     * @returns {Array|IndexMap}\n     */\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      if (isUndefined(name)) {\n        return Array.from(this.collection.values());\n      }\n      return this.collection.get(name);\n    }\n    /**\n     * Get collection size.\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.collection.size;\n    }\n    /**\n     * Remove some indexes and corresponding mappings and update values of the others within all collection's index maps.\n     *\n     * @private\n     * @param {Array} removedIndexes List of removed indexes.\n     */\n  }, {\n    key: \"removeFromEvery\",\n    value: function removeFromEvery(removedIndexes) {\n      this.collection.forEach(function (indexMap) {\n        indexMap.remove(removedIndexes);\n      });\n    }\n    /**\n     * Insert new indexes and corresponding mapping and update values of the others all collection's index maps.\n     *\n     * @private\n     * @param {number} insertionIndex Position inside the actual list.\n     * @param {Array} insertedIndexes List of inserted indexes.\n     */\n  }, {\n    key: \"insertToEvery\",\n    value: function insertToEvery(insertionIndex, insertedIndexes) {\n      this.collection.forEach(function (indexMap) {\n        indexMap.insert(insertionIndex, insertedIndexes);\n      });\n    }\n    /**\n     * Set default values to index maps within collection.\n     *\n     * @param {number} length Destination length for all stored maps.\n     */\n  }, {\n    key: \"initEvery\",\n    value: function initEvery(length) {\n      this.collection.forEach(function (indexMap) {\n        indexMap.init(length);\n      });\n    }\n  }]);\n  return MapCollection;\n}();\nmixin(MapCollection, localHooks);\n/**\n * @returns {number}\n */\n\nexport function getRegisteredMapsCounter() {\n  return registeredMaps;\n}","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","isUndefined","isDefined","mixin","localHooks","registeredMaps","MapCollection","collection","Map","value","register","uniqueName","indexMap","_this","has","set","addLocalHook","runLocalHooks","unregister","name","get","destroy","delete","unregisterAll","_this2","forEach","clear","Array","from","values","getLength","size","removeFromEvery","removedIndexes","remove","insertToEvery","insertionIndex","insertedIndexes","insert","initEvery","init","getRegisteredMapsCounter"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/translations/mapCollections/mapCollection.mjs"],"sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.from.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { isUndefined, isDefined } from \"../../helpers/mixed.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\"; // Counter for checking if there is a memory leak.\n\nvar registeredMaps = 0;\n/**\n * Collection of index maps having unique names. It allow us to perform bulk operations such as init, remove, insert on all index maps that have been registered in the collection.\n */\n\nexport var MapCollection = /*#__PURE__*/function () {\n  function MapCollection() {\n    _classCallCheck(this, MapCollection);\n\n    /**\n     * Collection of index maps.\n     *\n     * @type {Map<string, IndexMap>}\n     */\n    this.collection = new Map();\n  }\n  /**\n   * Register custom index map.\n   *\n   * @param {string} uniqueName Unique name of the index map.\n   * @param {IndexMap} indexMap Index map containing miscellaneous (i.e. Meta data, indexes sequence), updated after remove and insert data actions.\n   */\n\n\n  _createClass(MapCollection, [{\n    key: \"register\",\n    value: function register(uniqueName, indexMap) {\n      var _this = this;\n\n      if (this.collection.has(uniqueName) === false) {\n        this.collection.set(uniqueName, indexMap);\n        indexMap.addLocalHook('change', function () {\n          return _this.runLocalHooks('change', indexMap);\n        });\n        registeredMaps += 1;\n      }\n    }\n    /**\n     * Unregister custom index map.\n     *\n     * @param {string} name Name of the index map.\n     */\n\n  }, {\n    key: \"unregister\",\n    value: function unregister(name) {\n      var indexMap = this.collection.get(name);\n\n      if (isDefined(indexMap)) {\n        indexMap.destroy();\n        this.collection.delete(name);\n        this.runLocalHooks('change', indexMap);\n        registeredMaps -= 1;\n      }\n    }\n    /**\n     * Unregisters and destroys all collected index map instances.\n     */\n\n  }, {\n    key: \"unregisterAll\",\n    value: function unregisterAll() {\n      var _this2 = this;\n\n      this.collection.forEach(function (indexMap, name) {\n        return _this2.unregister(name);\n      });\n      this.collection.clear();\n    }\n    /**\n     * Get index map for the provided name.\n     *\n     * @param {string} [name] Name of the index map.\n     * @returns {Array|IndexMap}\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      if (isUndefined(name)) {\n        return Array.from(this.collection.values());\n      }\n\n      return this.collection.get(name);\n    }\n    /**\n     * Get collection size.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getLength\",\n    value: function getLength() {\n      return this.collection.size;\n    }\n    /**\n     * Remove some indexes and corresponding mappings and update values of the others within all collection's index maps.\n     *\n     * @private\n     * @param {Array} removedIndexes List of removed indexes.\n     */\n\n  }, {\n    key: \"removeFromEvery\",\n    value: function removeFromEvery(removedIndexes) {\n      this.collection.forEach(function (indexMap) {\n        indexMap.remove(removedIndexes);\n      });\n    }\n    /**\n     * Insert new indexes and corresponding mapping and update values of the others all collection's index maps.\n     *\n     * @private\n     * @param {number} insertionIndex Position inside the actual list.\n     * @param {Array} insertedIndexes List of inserted indexes.\n     */\n\n  }, {\n    key: \"insertToEvery\",\n    value: function insertToEvery(insertionIndex, insertedIndexes) {\n      this.collection.forEach(function (indexMap) {\n        indexMap.insert(insertionIndex, insertedIndexes);\n      });\n    }\n    /**\n     * Set default values to index maps within collection.\n     *\n     * @param {number} length Destination length for all stored maps.\n     */\n\n  }, {\n    key: \"initEvery\",\n    value: function initEvery(length) {\n      this.collection.forEach(function (indexMap) {\n        indexMap.init(length);\n      });\n    }\n  }]);\n\n  return MapCollection;\n}();\nmixin(MapCollection, localHooks);\n/**\n * @returns {number}\n */\n\nexport function getRegisteredMapsCounter() {\n  return registeredMaps;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
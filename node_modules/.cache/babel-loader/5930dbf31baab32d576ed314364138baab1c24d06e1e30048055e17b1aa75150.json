{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport { addClass, fastInnerText, removeClass } from \"./../../../helpers/dom/element.mjs\";\nimport { objectEach } from \"./../../../helpers/object.mjs\";\nimport { randomString } from \"./../../../helpers/string.mjs\";\nimport Event from \"./event.mjs\";\nimport Overlays from \"./overlays.mjs\";\nimport Scroll from \"./scroll.mjs\";\nimport Settings from \"./settings.mjs\";\nimport MasterTable from \"./table/master.mjs\";\nimport Viewport from \"./viewport.mjs\";\n/**\n * @class Walkontable\n */\n\nvar Walkontable = /*#__PURE__*/function () {\n  /**\n   * @param {object} settings The Walkontable settings.\n   */\n  function Walkontable(settings) {\n    _classCallCheck(this, Walkontable);\n    var originalHeaders = []; // this is the namespace for global events\n\n    this.guid = \"wt_\".concat(randomString());\n    this.rootDocument = settings.table.ownerDocument;\n    this.rootWindow = this.rootDocument.defaultView; // bootstrap from settings\n\n    if (settings.cloneSource) {\n      this.cloneSource = settings.cloneSource;\n      this.cloneOverlay = settings.cloneOverlay;\n      this.wtSettings = settings.cloneSource.wtSettings;\n      this.wtTable = this.cloneOverlay.createTable(this, settings.table);\n      this.wtScroll = new Scroll(this);\n      this.wtViewport = settings.cloneSource.wtViewport;\n      this.wtEvent = new Event(this);\n      this.selections = this.cloneSource.selections;\n    } else {\n      this.wtSettings = new Settings(this, settings);\n      this.wtTable = new MasterTable(this, settings.table);\n      this.wtScroll = new Scroll(this);\n      this.wtViewport = new Viewport(this);\n      this.wtEvent = new Event(this);\n      this.selections = this.getSetting('selections');\n      this.wtOverlays = new Overlays(this);\n      this.exportSettingsAsClassNames();\n    } // find original headers\n\n    if (this.wtTable.THEAD.childNodes.length && this.wtTable.THEAD.childNodes[0].childNodes.length) {\n      for (var c = 0, clen = this.wtTable.THEAD.childNodes[0].childNodes.length; c < clen; c++) {\n        originalHeaders.push(this.wtTable.THEAD.childNodes[0].childNodes[c].innerHTML);\n      }\n      if (!this.getSetting('columnHeaders').length) {\n        this.update('columnHeaders', [function (column, TH) {\n          fastInnerText(TH, originalHeaders[column]);\n        }]);\n      }\n    }\n    this.drawn = false;\n    this.drawInterrupted = false;\n  }\n  /**\n   * Force rerender of Walkontable.\n   *\n   * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering\n   *                                   the data. It will only work if Table.draw() does not force\n   *                                   rendering anyway.\n   * @returns {Walkontable}\n   */\n\n  _createClass(Walkontable, [{\n    key: \"draw\",\n    value: function draw() {\n      var fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.drawInterrupted = false;\n      if (!fastDraw && !this.wtTable.isVisible()) {\n        // draw interrupted because TABLE is not visible\n        this.drawInterrupted = true;\n      } else {\n        this.wtTable.draw(fastDraw);\n      }\n      return this;\n    }\n    /**\n     * Returns the TD at coords. If topmost is set to true, returns TD from the topmost overlay layer,\n     * if not set or set to false, returns TD from the master table.\n     *\n     * @param {CellCoords} coords The cell coordinates.\n     * @param {boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,\n     *                                  if the wanted cell is in the range of fixed rows, it will return a TD element\n     *                                  from the top overlay.\n     * @returns {HTMLElement}\n     */\n  }, {\n    key: \"getCell\",\n    value: function getCell(coords) {\n      var topmost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (!topmost) {\n        return this.wtTable.getCell(coords);\n      }\n      var totalRows = this.wtSettings.getSetting('totalRows');\n      var fixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n      var fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n      var fixedColumns = this.wtSettings.getSetting('fixedColumnsLeft');\n      if (coords.row < fixedRowsTop && coords.col < fixedColumns) {\n        return this.wtOverlays.topLeftCornerOverlay.clone.wtTable.getCell(coords);\n      } else if (coords.row < fixedRowsTop) {\n        return this.wtOverlays.topOverlay.clone.wtTable.getCell(coords);\n      } else if (coords.col < fixedColumns && coords.row >= totalRows - fixedRowsBottom) {\n        if (this.wtOverlays.bottomLeftCornerOverlay && this.wtOverlays.bottomLeftCornerOverlay.clone) {\n          return this.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.getCell(coords);\n        }\n      } else if (coords.col < fixedColumns) {\n        return this.wtOverlays.leftOverlay.clone.wtTable.getCell(coords);\n      } else if (coords.row < totalRows && coords.row >= totalRows - fixedRowsBottom) {\n        if (this.wtOverlays.bottomOverlay && this.wtOverlays.bottomOverlay.clone) {\n          return this.wtOverlays.bottomOverlay.clone.wtTable.getCell(coords);\n        }\n      }\n      return this.wtTable.getCell(coords);\n    }\n    /**\n     * @param {object} settings The singular settings to update or if passed as object to merge with.\n     * @param {*} value The value to set if the first argument is passed as string.\n     * @returns {Walkontable}\n     */\n  }, {\n    key: \"update\",\n    value: function update(settings, value) {\n      return this.wtSettings.update(settings, value);\n    }\n    /**\n     * Scrolls the viewport to a cell (rerenders if needed).\n     *\n     * @param {CellCoords} coords The cell coordinates to scroll to.\n     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.\n     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.\n     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"scrollViewport\",\n    value: function scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft) {\n      if (coords.col < 0 || coords.row < 0) {\n        return false;\n      }\n      return this.wtScroll.scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft);\n    }\n    /**\n     * Scrolls the viewport to a column (rerenders if needed).\n     *\n     * @param {number} column Visual column index.\n     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.\n     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"scrollViewportHorizontally\",\n    value: function scrollViewportHorizontally(column, snapToRight, snapToLeft) {\n      if (column < 0) {\n        return false;\n      }\n      return this.wtScroll.scrollViewportHorizontally(column, snapToRight, snapToLeft);\n    }\n    /**\n     * Scrolls the viewport to a row (rerenders if needed).\n     *\n     * @param {number} row Visual row index.\n     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"scrollViewportVertically\",\n    value: function scrollViewportVertically(row, snapToTop, snapToBottom) {\n      if (row < 0) {\n        return false;\n      }\n      return this.wtScroll.scrollViewportVertically(row, snapToTop, snapToBottom);\n    }\n    /**\n     * @returns {Array}\n     */\n  }, {\n    key: \"getViewport\",\n    value: function getViewport() {\n      return [this.wtTable.getFirstVisibleRow(), this.wtTable.getFirstVisibleColumn(), this.wtTable.getLastVisibleRow(), this.wtTable.getLastVisibleColumn()];\n    }\n    /**\n     * Get overlay name.\n     *\n     * @returns {string}\n     */\n  }, {\n    key: \"getOverlayName\",\n    value: function getOverlayName() {\n      return this.cloneOverlay ? this.cloneOverlay.type : 'master';\n    }\n    /**\n     * Export settings as class names added to the parent element of the table.\n     */\n  }, {\n    key: \"exportSettingsAsClassNames\",\n    value: function exportSettingsAsClassNames() {\n      var _this = this;\n      var toExport = {\n        rowHeaders: 'htRowHeaders',\n        columnHeaders: 'htColumnHeaders'\n      };\n      var allClassNames = [];\n      var newClassNames = [];\n      objectEach(toExport, function (className, key) {\n        if (_this.getSetting(key).length) {\n          newClassNames.push(className);\n        }\n        allClassNames.push(className);\n      });\n      removeClass(this.wtTable.wtRootElement.parentNode, allClassNames);\n      addClass(this.wtTable.wtRootElement.parentNode, newClassNames);\n    }\n    /**\n     * Get/Set Walkontable instance setting.\n     *\n     * @param {string} key The settings key to retrieve.\n     * @param {*} [param1] Additional parameter passed to the options defined as function.\n     * @param {*} [param2] Additional parameter passed to the options defined as function.\n     * @param {*} [param3] Additional parameter passed to the options defined as function.\n     * @param {*} [param4] Additional parameter passed to the options defined as function.\n     * @returns {*}\n     */\n  }, {\n    key: \"getSetting\",\n    value: function getSetting(key, param1, param2, param3, param4) {\n      // this is faster than .apply - https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n      return this.wtSettings.getSetting(key, param1, param2, param3, param4);\n    }\n    /**\n     * Checks if setting exists.\n     *\n     * @param {string} key The settings key to check.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"hasSetting\",\n    value: function hasSetting(key) {\n      return this.wtSettings.has(key);\n    }\n    /**\n     * Destroy instance.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.wtOverlays.destroy();\n      this.wtEvent.destroy();\n    }\n  }]);\n  return Walkontable;\n}();\nexport default Walkontable;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","addClass","fastInnerText","removeClass","objectEach","randomString","Event","Overlays","Scroll","Settings","MasterTable","Viewport","Walkontable","settings","originalHeaders","guid","concat","rootDocument","table","ownerDocument","rootWindow","defaultView","cloneSource","cloneOverlay","wtSettings","wtTable","createTable","wtScroll","wtViewport","wtEvent","selections","getSetting","wtOverlays","exportSettingsAsClassNames","THEAD","childNodes","c","clen","push","innerHTML","update","column","TH","drawn","drawInterrupted","value","draw","fastDraw","arguments","undefined","isVisible","getCell","coords","topmost","totalRows","fixedRowsTop","fixedRowsBottom","fixedColumns","row","col","topLeftCornerOverlay","clone","topOverlay","bottomLeftCornerOverlay","leftOverlay","bottomOverlay","scrollViewport","snapToTop","snapToRight","snapToBottom","snapToLeft","scrollViewportHorizontally","scrollViewportVertically","getViewport","getFirstVisibleRow","getFirstVisibleColumn","getLastVisibleRow","getLastVisibleColumn","getOverlayName","type","_this","toExport","rowHeaders","columnHeaders","allClassNames","newClassNames","className","wtRootElement","parentNode","param1","param2","param3","param4","hasSetting","has","destroy"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/3rdparty/walkontable/src/core.mjs"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { addClass, fastInnerText, removeClass } from \"./../../../helpers/dom/element.mjs\";\nimport { objectEach } from \"./../../../helpers/object.mjs\";\nimport { randomString } from \"./../../../helpers/string.mjs\";\nimport Event from \"./event.mjs\";\nimport Overlays from \"./overlays.mjs\";\nimport Scroll from \"./scroll.mjs\";\nimport Settings from \"./settings.mjs\";\nimport MasterTable from \"./table/master.mjs\";\nimport Viewport from \"./viewport.mjs\";\n/**\n * @class Walkontable\n */\n\nvar Walkontable = /*#__PURE__*/function () {\n  /**\n   * @param {object} settings The Walkontable settings.\n   */\n  function Walkontable(settings) {\n    _classCallCheck(this, Walkontable);\n\n    var originalHeaders = []; // this is the namespace for global events\n\n    this.guid = \"wt_\".concat(randomString());\n    this.rootDocument = settings.table.ownerDocument;\n    this.rootWindow = this.rootDocument.defaultView; // bootstrap from settings\n\n    if (settings.cloneSource) {\n      this.cloneSource = settings.cloneSource;\n      this.cloneOverlay = settings.cloneOverlay;\n      this.wtSettings = settings.cloneSource.wtSettings;\n      this.wtTable = this.cloneOverlay.createTable(this, settings.table);\n      this.wtScroll = new Scroll(this);\n      this.wtViewport = settings.cloneSource.wtViewport;\n      this.wtEvent = new Event(this);\n      this.selections = this.cloneSource.selections;\n    } else {\n      this.wtSettings = new Settings(this, settings);\n      this.wtTable = new MasterTable(this, settings.table);\n      this.wtScroll = new Scroll(this);\n      this.wtViewport = new Viewport(this);\n      this.wtEvent = new Event(this);\n      this.selections = this.getSetting('selections');\n      this.wtOverlays = new Overlays(this);\n      this.exportSettingsAsClassNames();\n    } // find original headers\n\n\n    if (this.wtTable.THEAD.childNodes.length && this.wtTable.THEAD.childNodes[0].childNodes.length) {\n      for (var c = 0, clen = this.wtTable.THEAD.childNodes[0].childNodes.length; c < clen; c++) {\n        originalHeaders.push(this.wtTable.THEAD.childNodes[0].childNodes[c].innerHTML);\n      }\n\n      if (!this.getSetting('columnHeaders').length) {\n        this.update('columnHeaders', [function (column, TH) {\n          fastInnerText(TH, originalHeaders[column]);\n        }]);\n      }\n    }\n\n    this.drawn = false;\n    this.drawInterrupted = false;\n  }\n  /**\n   * Force rerender of Walkontable.\n   *\n   * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering\n   *                                   the data. It will only work if Table.draw() does not force\n   *                                   rendering anyway.\n   * @returns {Walkontable}\n   */\n\n\n  _createClass(Walkontable, [{\n    key: \"draw\",\n    value: function draw() {\n      var fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.drawInterrupted = false;\n\n      if (!fastDraw && !this.wtTable.isVisible()) {\n        // draw interrupted because TABLE is not visible\n        this.drawInterrupted = true;\n      } else {\n        this.wtTable.draw(fastDraw);\n      }\n\n      return this;\n    }\n    /**\n     * Returns the TD at coords. If topmost is set to true, returns TD from the topmost overlay layer,\n     * if not set or set to false, returns TD from the master table.\n     *\n     * @param {CellCoords} coords The cell coordinates.\n     * @param {boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,\n     *                                  if the wanted cell is in the range of fixed rows, it will return a TD element\n     *                                  from the top overlay.\n     * @returns {HTMLElement}\n     */\n\n  }, {\n    key: \"getCell\",\n    value: function getCell(coords) {\n      var topmost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (!topmost) {\n        return this.wtTable.getCell(coords);\n      }\n\n      var totalRows = this.wtSettings.getSetting('totalRows');\n      var fixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n      var fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n      var fixedColumns = this.wtSettings.getSetting('fixedColumnsLeft');\n\n      if (coords.row < fixedRowsTop && coords.col < fixedColumns) {\n        return this.wtOverlays.topLeftCornerOverlay.clone.wtTable.getCell(coords);\n      } else if (coords.row < fixedRowsTop) {\n        return this.wtOverlays.topOverlay.clone.wtTable.getCell(coords);\n      } else if (coords.col < fixedColumns && coords.row >= totalRows - fixedRowsBottom) {\n        if (this.wtOverlays.bottomLeftCornerOverlay && this.wtOverlays.bottomLeftCornerOverlay.clone) {\n          return this.wtOverlays.bottomLeftCornerOverlay.clone.wtTable.getCell(coords);\n        }\n      } else if (coords.col < fixedColumns) {\n        return this.wtOverlays.leftOverlay.clone.wtTable.getCell(coords);\n      } else if (coords.row < totalRows && coords.row >= totalRows - fixedRowsBottom) {\n        if (this.wtOverlays.bottomOverlay && this.wtOverlays.bottomOverlay.clone) {\n          return this.wtOverlays.bottomOverlay.clone.wtTable.getCell(coords);\n        }\n      }\n\n      return this.wtTable.getCell(coords);\n    }\n    /**\n     * @param {object} settings The singular settings to update or if passed as object to merge with.\n     * @param {*} value The value to set if the first argument is passed as string.\n     * @returns {Walkontable}\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(settings, value) {\n      return this.wtSettings.update(settings, value);\n    }\n    /**\n     * Scrolls the viewport to a cell (rerenders if needed).\n     *\n     * @param {CellCoords} coords The cell coordinates to scroll to.\n     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.\n     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.\n     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"scrollViewport\",\n    value: function scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft) {\n      if (coords.col < 0 || coords.row < 0) {\n        return false;\n      }\n\n      return this.wtScroll.scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft);\n    }\n    /**\n     * Scrolls the viewport to a column (rerenders if needed).\n     *\n     * @param {number} column Visual column index.\n     * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.\n     * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"scrollViewportHorizontally\",\n    value: function scrollViewportHorizontally(column, snapToRight, snapToLeft) {\n      if (column < 0) {\n        return false;\n      }\n\n      return this.wtScroll.scrollViewportHorizontally(column, snapToRight, snapToLeft);\n    }\n    /**\n     * Scrolls the viewport to a row (rerenders if needed).\n     *\n     * @param {number} row Visual row index.\n     * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n     * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"scrollViewportVertically\",\n    value: function scrollViewportVertically(row, snapToTop, snapToBottom) {\n      if (row < 0) {\n        return false;\n      }\n\n      return this.wtScroll.scrollViewportVertically(row, snapToTop, snapToBottom);\n    }\n    /**\n     * @returns {Array}\n     */\n\n  }, {\n    key: \"getViewport\",\n    value: function getViewport() {\n      return [this.wtTable.getFirstVisibleRow(), this.wtTable.getFirstVisibleColumn(), this.wtTable.getLastVisibleRow(), this.wtTable.getLastVisibleColumn()];\n    }\n    /**\n     * Get overlay name.\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getOverlayName\",\n    value: function getOverlayName() {\n      return this.cloneOverlay ? this.cloneOverlay.type : 'master';\n    }\n    /**\n     * Export settings as class names added to the parent element of the table.\n     */\n\n  }, {\n    key: \"exportSettingsAsClassNames\",\n    value: function exportSettingsAsClassNames() {\n      var _this = this;\n\n      var toExport = {\n        rowHeaders: 'htRowHeaders',\n        columnHeaders: 'htColumnHeaders'\n      };\n      var allClassNames = [];\n      var newClassNames = [];\n      objectEach(toExport, function (className, key) {\n        if (_this.getSetting(key).length) {\n          newClassNames.push(className);\n        }\n\n        allClassNames.push(className);\n      });\n      removeClass(this.wtTable.wtRootElement.parentNode, allClassNames);\n      addClass(this.wtTable.wtRootElement.parentNode, newClassNames);\n    }\n    /**\n     * Get/Set Walkontable instance setting.\n     *\n     * @param {string} key The settings key to retrieve.\n     * @param {*} [param1] Additional parameter passed to the options defined as function.\n     * @param {*} [param2] Additional parameter passed to the options defined as function.\n     * @param {*} [param3] Additional parameter passed to the options defined as function.\n     * @param {*} [param4] Additional parameter passed to the options defined as function.\n     * @returns {*}\n     */\n\n  }, {\n    key: \"getSetting\",\n    value: function getSetting(key, param1, param2, param3, param4) {\n      // this is faster than .apply - https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n      return this.wtSettings.getSetting(key, param1, param2, param3, param4);\n    }\n    /**\n     * Checks if setting exists.\n     *\n     * @param {string} key The settings key to check.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"hasSetting\",\n    value: function hasSetting(key) {\n      return this.wtSettings.has(key);\n    }\n    /**\n     * Destroy instance.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.wtOverlays.destroy();\n      this.wtEvent.destroy();\n    }\n  }]);\n\n  return Walkontable;\n}();\n\nexport default Walkontable;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
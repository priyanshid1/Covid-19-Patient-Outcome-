{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport { isObject, objectEach } from \"../../helpers/object.mjs\";\nimport { LinkedPhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nvar inheritedColumnProperties = ['sortEmptyCells', 'indicator', 'headerAction', 'compareFunctionFactory'];\nvar SORT_EMPTY_CELLS_DEFAULT = false;\nvar SHOW_SORT_INDICATOR_DEFAULT = true;\nvar HEADER_ACTION_DEFAULT = true;\n/**\n * Store and manages states of sorted columns.\n *\n * @private\n * @class ColumnStatesManager\n */\n\nexport var ColumnStatesManager = /*#__PURE__*/function () {\n  function ColumnStatesManager(hot, mapName) {\n    _classCallCheck(this, ColumnStatesManager);\n\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    this.hot = hot;\n    /**\n     * Index map storing sorting states for every column. ColumnStatesManager write and read to/from this element.\n     *\n     * @type {LinkedPhysicalIndexToValueMap}\n     */\n\n    this.sortingStates = new IndexToValueMap();\n    /**\n     * Determines whether we should sort empty cells.\n     *\n     * @type {boolean}\n     */\n\n    this.sortEmptyCells = SORT_EMPTY_CELLS_DEFAULT;\n    /**\n     * Determines whether indicator should be visible (for sorted columns).\n     *\n     * @type {boolean}\n     */\n\n    this.indicator = SHOW_SORT_INDICATOR_DEFAULT;\n    /**\n     * Determines whether click on the header perform sorting.\n     *\n     * @type {boolean}\n     */\n\n    this.headerAction = HEADER_ACTION_DEFAULT;\n    /**\n     * Determines compare function factory. Method get as parameters `sortOder` and `columnMeta` and return compare function.\n     */\n\n    this.compareFunctionFactory = void 0;\n    /**\n     * Name of map storing sorting states. Required for unique name (PR #7440 introduced it). It's needed as\n     * both ColumnSorting and MultiColumnSorting plugins create state manager and as a consequence register maps.\n     * Objects are destroyed in strange order as the updateSettings doesn't work well.\n     */\n\n    this.mapName = mapName;\n    this.hot.columnIndexMapper.registerMap(mapName, this.sortingStates);\n  }\n  /**\n   * Update column properties which affect the sorting result.\n   *\n   * **Note**: All column properties can be overwritten by {@link Options#columns} option.\n   *\n   * @param {object} allSortSettings Column sorting plugin's configuration object.\n   */\n\n  _createClass(ColumnStatesManager, [{\n    key: \"updateAllColumnsProperties\",\n    value: function updateAllColumnsProperties(allSortSettings) {\n      var _this = this;\n      if (!isObject(allSortSettings)) {\n        return;\n      }\n      objectEach(allSortSettings, function (newValue, propertyName) {\n        if (inheritedColumnProperties.includes(propertyName)) {\n          _this[propertyName] = newValue;\n        }\n      });\n    }\n    /**\n     * Get all column properties which affect the sorting result.\n     *\n     * @returns {object}\n     */\n  }, {\n    key: \"getAllColumnsProperties\",\n    value: function getAllColumnsProperties() {\n      var columnProperties = {\n        sortEmptyCells: this.sortEmptyCells,\n        indicator: this.indicator,\n        headerAction: this.headerAction\n      };\n      if (typeof this.compareFunctionFactory === 'function') {\n        columnProperties.compareFunctionFactory = this.compareFunctionFactory;\n      }\n      return columnProperties;\n    }\n    /**\n     * Get sort order of column.\n     *\n     * @param {number} searchedColumn Visual column index.\n     * @returns {string|undefined} Sort order (`asc` for ascending, `desc` for descending and undefined for not sorted).\n     */\n  }, {\n    key: \"getSortOrderOfColumn\",\n    value: function getSortOrderOfColumn(searchedColumn) {\n      var _this$sortingStates$g;\n      return (_this$sortingStates$g = this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(searchedColumn))) === null || _this$sortingStates$g === void 0 ? void 0 : _this$sortingStates$g.sortOrder;\n    }\n    /**\n     * Get order of particular column in the states queue.\n     *\n     * @param {number} column Visual column index.\n     * @returns {number}\n     */\n  }, {\n    key: \"getIndexOfColumnInSortQueue\",\n    value: function getIndexOfColumnInSortQueue(column) {\n      column = this.hot.toPhysicalColumn(column);\n      return this.sortingStates.getEntries().findIndex(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n          physicalColumn = _ref2[0];\n        return physicalColumn === column;\n      });\n    }\n    /**\n     * Get number of sorted columns.\n     *\n     * @returns {number}\n     */\n  }, {\n    key: \"getNumberOfSortedColumns\",\n    value: function getNumberOfSortedColumns() {\n      return this.sortingStates.getLength();\n    }\n    /**\n     * Get if list of sorted columns is empty.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isListOfSortedColumnsEmpty\",\n    value: function isListOfSortedColumnsEmpty() {\n      return this.getNumberOfSortedColumns() === 0;\n    }\n    /**\n     * Get if particular column is sorted.\n     *\n     * @param {number} column Visual column index.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isColumnSorted\",\n    value: function isColumnSorted(column) {\n      return isObject(this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(column)));\n    }\n    /**\n     * Queue of sort states containing sorted columns and their orders (Array of objects containing `column` and `sortOrder` properties).\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @returns {Array<object>}\n     */\n  }, {\n    key: \"getSortStates\",\n    value: function getSortStates() {\n      var _this2 = this;\n      if (this.sortingStates === null) {\n        return [];\n      }\n      var sortingStatesQueue = this.sortingStates.getEntries();\n      return sortingStatesQueue.map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          physicalColumn = _ref4[0],\n          value = _ref4[1];\n        return _objectSpread({\n          column: _this2.hot.toVisualColumn(physicalColumn)\n        }, value);\n      });\n    }\n    /**\n     * Get sort state for particular column. Object contains `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @param {number} column Visual column index.\n     * @returns {object|undefined}\n     */\n  }, {\n    key: \"getColumnSortState\",\n    value: function getColumnSortState(column) {\n      var sortOrder = this.getSortOrderOfColumn(column);\n      if (isDefined(sortOrder)) {\n        return {\n          column: column,\n          sortOrder: sortOrder\n        };\n      }\n    }\n    /**\n     * Set all column states.\n     *\n     * @param {Array} sortStates Sort states.\n     */\n  }, {\n    key: \"setSortStates\",\n    value: function setSortStates(sortStates) {\n      this.sortingStates.clear();\n      for (var i = 0; i < sortStates.length; i += 1) {\n        this.sortingStates.setValueAtIndex(this.hot.toPhysicalColumn(sortStates[i].column), {\n          sortOrder: sortStates[i].sortOrder\n        });\n      }\n    }\n    /**\n     * Destroy the state manager.\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.hot.columnIndexMapper.unregisterMap(this.mapName);\n      this.sortingStates = null;\n    }\n  }]);\n  return ColumnStatesManager;\n}();","map":{"version":3,"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","len","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","err","isArray","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","isObject","objectEach","LinkedPhysicalIndexToValueMap","IndexToValueMap","isDefined","inheritedColumnProperties","SORT_EMPTY_CELLS_DEFAULT","SHOW_SORT_INDICATOR_DEFAULT","HEADER_ACTION_DEFAULT","ColumnStatesManager","hot","mapName","sortingStates","sortEmptyCells","indicator","headerAction","compareFunctionFactory","columnIndexMapper","registerMap","updateAllColumnsProperties","allSortSettings","_this","newValue","propertyName","includes","getAllColumnsProperties","columnProperties","getSortOrderOfColumn","searchedColumn","_this$sortingStates$g","getValueAtIndex","toPhysicalColumn","sortOrder","getIndexOfColumnInSortQueue","column","getEntries","findIndex","_ref","_ref2","physicalColumn","getNumberOfSortedColumns","getLength","isListOfSortedColumnsEmpty","isColumnSorted","getSortStates","_this2","sortingStatesQueue","map","_ref3","_ref4","toVisualColumn","getColumnSortState","setSortStates","sortStates","clear","setValueAtIndex","destroy","unregisterMap"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/plugins/columnSorting/columnStatesManager.mjs"],"sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { isObject, objectEach } from \"../../helpers/object.mjs\";\nimport { LinkedPhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nvar inheritedColumnProperties = ['sortEmptyCells', 'indicator', 'headerAction', 'compareFunctionFactory'];\nvar SORT_EMPTY_CELLS_DEFAULT = false;\nvar SHOW_SORT_INDICATOR_DEFAULT = true;\nvar HEADER_ACTION_DEFAULT = true;\n/**\n * Store and manages states of sorted columns.\n *\n * @private\n * @class ColumnStatesManager\n */\n\nexport var ColumnStatesManager = /*#__PURE__*/function () {\n  function ColumnStatesManager(hot, mapName) {\n    _classCallCheck(this, ColumnStatesManager);\n\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    this.hot = hot;\n    /**\n     * Index map storing sorting states for every column. ColumnStatesManager write and read to/from this element.\n     *\n     * @type {LinkedPhysicalIndexToValueMap}\n     */\n\n    this.sortingStates = new IndexToValueMap();\n    /**\n     * Determines whether we should sort empty cells.\n     *\n     * @type {boolean}\n     */\n\n    this.sortEmptyCells = SORT_EMPTY_CELLS_DEFAULT;\n    /**\n     * Determines whether indicator should be visible (for sorted columns).\n     *\n     * @type {boolean}\n     */\n\n    this.indicator = SHOW_SORT_INDICATOR_DEFAULT;\n    /**\n     * Determines whether click on the header perform sorting.\n     *\n     * @type {boolean}\n     */\n\n    this.headerAction = HEADER_ACTION_DEFAULT;\n    /**\n     * Determines compare function factory. Method get as parameters `sortOder` and `columnMeta` and return compare function.\n     */\n\n    this.compareFunctionFactory = void 0;\n    /**\n     * Name of map storing sorting states. Required for unique name (PR #7440 introduced it). It's needed as\n     * both ColumnSorting and MultiColumnSorting plugins create state manager and as a consequence register maps.\n     * Objects are destroyed in strange order as the updateSettings doesn't work well.\n     */\n\n    this.mapName = mapName;\n    this.hot.columnIndexMapper.registerMap(mapName, this.sortingStates);\n  }\n  /**\n   * Update column properties which affect the sorting result.\n   *\n   * **Note**: All column properties can be overwritten by {@link Options#columns} option.\n   *\n   * @param {object} allSortSettings Column sorting plugin's configuration object.\n   */\n\n\n  _createClass(ColumnStatesManager, [{\n    key: \"updateAllColumnsProperties\",\n    value: function updateAllColumnsProperties(allSortSettings) {\n      var _this = this;\n\n      if (!isObject(allSortSettings)) {\n        return;\n      }\n\n      objectEach(allSortSettings, function (newValue, propertyName) {\n        if (inheritedColumnProperties.includes(propertyName)) {\n          _this[propertyName] = newValue;\n        }\n      });\n    }\n    /**\n     * Get all column properties which affect the sorting result.\n     *\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getAllColumnsProperties\",\n    value: function getAllColumnsProperties() {\n      var columnProperties = {\n        sortEmptyCells: this.sortEmptyCells,\n        indicator: this.indicator,\n        headerAction: this.headerAction\n      };\n\n      if (typeof this.compareFunctionFactory === 'function') {\n        columnProperties.compareFunctionFactory = this.compareFunctionFactory;\n      }\n\n      return columnProperties;\n    }\n    /**\n     * Get sort order of column.\n     *\n     * @param {number} searchedColumn Visual column index.\n     * @returns {string|undefined} Sort order (`asc` for ascending, `desc` for descending and undefined for not sorted).\n     */\n\n  }, {\n    key: \"getSortOrderOfColumn\",\n    value: function getSortOrderOfColumn(searchedColumn) {\n      var _this$sortingStates$g;\n\n      return (_this$sortingStates$g = this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(searchedColumn))) === null || _this$sortingStates$g === void 0 ? void 0 : _this$sortingStates$g.sortOrder;\n    }\n    /**\n     * Get order of particular column in the states queue.\n     *\n     * @param {number} column Visual column index.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getIndexOfColumnInSortQueue\",\n    value: function getIndexOfColumnInSortQueue(column) {\n      column = this.hot.toPhysicalColumn(column);\n      return this.sortingStates.getEntries().findIndex(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            physicalColumn = _ref2[0];\n\n        return physicalColumn === column;\n      });\n    }\n    /**\n     * Get number of sorted columns.\n     *\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getNumberOfSortedColumns\",\n    value: function getNumberOfSortedColumns() {\n      return this.sortingStates.getLength();\n    }\n    /**\n     * Get if list of sorted columns is empty.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isListOfSortedColumnsEmpty\",\n    value: function isListOfSortedColumnsEmpty() {\n      return this.getNumberOfSortedColumns() === 0;\n    }\n    /**\n     * Get if particular column is sorted.\n     *\n     * @param {number} column Visual column index.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isColumnSorted\",\n    value: function isColumnSorted(column) {\n      return isObject(this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(column)));\n    }\n    /**\n     * Queue of sort states containing sorted columns and their orders (Array of objects containing `column` and `sortOrder` properties).\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @returns {Array<object>}\n     */\n\n  }, {\n    key: \"getSortStates\",\n    value: function getSortStates() {\n      var _this2 = this;\n\n      if (this.sortingStates === null) {\n        return [];\n      }\n\n      var sortingStatesQueue = this.sortingStates.getEntries();\n      return sortingStatesQueue.map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            physicalColumn = _ref4[0],\n            value = _ref4[1];\n\n        return _objectSpread({\n          column: _this2.hot.toVisualColumn(physicalColumn)\n        }, value);\n      });\n    }\n    /**\n     * Get sort state for particular column. Object contains `column` and `sortOrder` properties.\n     *\n     * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n     *\n     * @param {number} column Visual column index.\n     * @returns {object|undefined}\n     */\n\n  }, {\n    key: \"getColumnSortState\",\n    value: function getColumnSortState(column) {\n      var sortOrder = this.getSortOrderOfColumn(column);\n\n      if (isDefined(sortOrder)) {\n        return {\n          column: column,\n          sortOrder: sortOrder\n        };\n      }\n    }\n    /**\n     * Set all column states.\n     *\n     * @param {Array} sortStates Sort states.\n     */\n\n  }, {\n    key: \"setSortStates\",\n    value: function setSortStates(sortStates) {\n      this.sortingStates.clear();\n\n      for (var i = 0; i < sortStates.length; i += 1) {\n        this.sortingStates.setValueAtIndex(this.hot.toPhysicalColumn(sortStates[i].column), {\n          sortOrder: sortStates[i].sortOrder\n        });\n      }\n    }\n    /**\n     * Destroy the state manager.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.hot.columnIndexMapper.unregisterMap(this.mapName);\n      this.sortingStates = null;\n    }\n  }]);\n\n  return ColumnStatesManager;\n}();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
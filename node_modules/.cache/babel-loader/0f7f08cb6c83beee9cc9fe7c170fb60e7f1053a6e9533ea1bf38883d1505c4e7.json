{"ast":null,"code":"import staticRegister from \"./../../utils/staticRegister.mjs\";\nimport pluralizeFn from \"./pluralize.mjs\";\nvar _staticRegister = staticRegister('phraseFormatters'),\n  registerGloballyPhraseFormatter = _staticRegister.register,\n  getGlobalPhraseFormatters = _staticRegister.getValues;\n/**\n * Register phrase formatter.\n *\n * @param {string} name Name of formatter.\n * @param {Function} formatterFn Function which will be applied on phrase propositions. It will transform them if it's possible.\n */\n\nexport function register(name, formatterFn) {\n  registerGloballyPhraseFormatter(name, formatterFn);\n}\n/**\n * Get all registered previously formatters.\n *\n * @returns {Array}\n */\n\nexport function getAll() {\n  return getGlobalPhraseFormatters();\n}\nexport { register as registerPhraseFormatter, getAll as getPhraseFormatters };\nregister('pluralize', pluralizeFn);","map":{"version":3,"names":["staticRegister","pluralizeFn","_staticRegister","registerGloballyPhraseFormatter","register","getGlobalPhraseFormatters","getValues","name","formatterFn","getAll","registerPhraseFormatter","getPhraseFormatters"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/i18n/phraseFormatters/index.mjs"],"sourcesContent":["import staticRegister from \"./../../utils/staticRegister.mjs\";\nimport pluralizeFn from \"./pluralize.mjs\";\n\nvar _staticRegister = staticRegister('phraseFormatters'),\n    registerGloballyPhraseFormatter = _staticRegister.register,\n    getGlobalPhraseFormatters = _staticRegister.getValues;\n/**\n * Register phrase formatter.\n *\n * @param {string} name Name of formatter.\n * @param {Function} formatterFn Function which will be applied on phrase propositions. It will transform them if it's possible.\n */\n\n\nexport function register(name, formatterFn) {\n  registerGloballyPhraseFormatter(name, formatterFn);\n}\n/**\n * Get all registered previously formatters.\n *\n * @returns {Array}\n */\n\nexport function getAll() {\n  return getGlobalPhraseFormatters();\n}\nexport { register as registerPhraseFormatter, getAll as getPhraseFormatters };\nregister('pluralize', pluralizeFn);"],"mappings":"AAAA,OAAOA,cAAc,MAAM,kCAAkC;AAC7D,OAAOC,WAAW,MAAM,iBAAiB;AAEzC,IAAIC,eAAe,GAAGF,cAAc,CAAC,kBAAkB,CAAC;EACpDG,+BAA+B,GAAGD,eAAe,CAACE,QAAQ;EAC1DC,yBAAyB,GAAGH,eAAe,CAACI,SAAS;AACzD;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,SAASF,QAAQA,CAACG,IAAI,EAAEC,WAAW,EAAE;EAC1CL,+BAA+B,CAACI,IAAI,EAAEC,WAAW,CAAC;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,MAAMA,CAAA,EAAG;EACvB,OAAOJ,yBAAyB,CAAC,CAAC;AACpC;AACA,SAASD,QAAQ,IAAIM,uBAAuB,EAAED,MAAM,IAAIE,mBAAmB;AAC3EP,QAAQ,CAAC,WAAW,EAAEH,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { defineGetter } from \"../../../../../helpers/object.mjs\";\nvar MIXIN_NAME = 'stickyColumnsStart';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the first columns in the horizontal axis.\n *\n * @type {object}\n */\nvar stickyColumnsStart = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedColumn: function getFirstRenderedColumn() {\n    var totalColumns = this.wtSettings.getSetting('totalColumns');\n    if (totalColumns === 0) {\n      return -1;\n    }\n    return 0;\n  },\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleColumn: function getFirstVisibleColumn() {\n    return this.getFirstRenderedColumn();\n  },\n  /**\n   * Get the source index of the first column partially visible in the viewport. If no columns are partially visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstPartiallyVisibleColumn: function getFirstPartiallyVisibleColumn() {\n    return this.getFirstRenderedColumn();\n  },\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedColumn: function getLastRenderedColumn() {\n    return this.getRenderedColumnsCount() - 1;\n  },\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleColumn: function getLastVisibleColumn() {\n    return this.getLastRenderedColumn();\n  },\n  /**\n   * Get the source index of the last column partially visible in the viewport. If no columns are partially visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastPartiallyVisibleColumn: function getLastPartiallyVisibleColumn() {\n    return this.getLastRenderedColumn();\n  },\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedColumnsCount: function getRenderedColumnsCount() {\n    var totalColumns = this.wtSettings.getSetting('totalColumns');\n    return Math.min(this.wtSettings.getSetting('fixedColumnsStart'), totalColumns);\n  },\n  /**\n   * Get the number of fully visible columns in the viewport.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleColumnsCount: function getVisibleColumnsCount() {\n    return this.getRenderedColumnsCount();\n  },\n  /**\n   * Get the number of rendered row headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRowHeadersCount: function getRowHeadersCount() {\n    return this.dataAccessObject.rowHeaders.length;\n  }\n};\ndefineGetter(stickyColumnsStart, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyColumnsStart;","map":{"version":3,"names":["defineGetter","MIXIN_NAME","stickyColumnsStart","getFirstRenderedColumn","totalColumns","wtSettings","getSetting","getFirstVisibleColumn","getFirstPartiallyVisibleColumn","getLastRenderedColumn","getRenderedColumnsCount","getLastVisibleColumn","getLastPartiallyVisibleColumn","Math","min","getVisibleColumnsCount","getRowHeadersCount","dataAccessObject","rowHeaders","length","writable","enumerable"],"sources":["/Users/priyadeliwala/node_modules/handsontable/3rdparty/walkontable/src/table/mixin/stickyColumnsStart.mjs"],"sourcesContent":["import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'stickyColumnsStart';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the first columns in the horizontal axis.\n *\n * @type {object}\n */\nconst stickyColumnsStart = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedColumn() {\n    const totalColumns = this.wtSettings.getSetting('totalColumns');\n    if (totalColumns === 0) {\n      return -1;\n    }\n    return 0;\n  },\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleColumn() {\n    return this.getFirstRenderedColumn();\n  },\n  /**\n   * Get the source index of the first column partially visible in the viewport. If no columns are partially visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstPartiallyVisibleColumn() {\n    return this.getFirstRenderedColumn();\n  },\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedColumn() {\n    return this.getRenderedColumnsCount() - 1;\n  },\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleColumn() {\n    return this.getLastRenderedColumn();\n  },\n  /**\n   * Get the source index of the last column partially visible in the viewport. If no columns are partially visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastPartiallyVisibleColumn() {\n    return this.getLastRenderedColumn();\n  },\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedColumnsCount() {\n    const totalColumns = this.wtSettings.getSetting('totalColumns');\n    return Math.min(this.wtSettings.getSetting('fixedColumnsStart'), totalColumns);\n  },\n  /**\n   * Get the number of fully visible columns in the viewport.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleColumnsCount() {\n    return this.getRenderedColumnsCount();\n  },\n  /**\n   * Get the number of rendered row headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRowHeadersCount() {\n    return this.dataAccessObject.rowHeaders.length;\n  }\n};\ndefineGetter(stickyColumnsStart, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyColumnsStart;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mCAAmC;AAChE,IAAMC,UAAU,GAAG,oBAAoB;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,kBAAkB,GAAG;EACzB;AACF;AACA;AACA;AACA;AACA;EACEC,sBAAsB,WAAtBA,sBAAsBA,CAAA,EAAG;IACvB,IAAMC,YAAY,GAAG,IAAI,CAACC,UAAU,CAACC,UAAU,CAAC,cAAc,CAAC;IAC/D,IAAIF,YAAY,KAAK,CAAC,EAAE;MACtB,OAAO,CAAC,CAAC;IACX;IACA,OAAO,CAAC;EACV,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,qBAAqB,WAArBA,qBAAqBA,CAAA,EAAG;IACtB,OAAO,IAAI,CAACJ,sBAAsB,CAAC,CAAC;EACtC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEK,8BAA8B,WAA9BA,8BAA8BA,CAAA,EAAG;IAC/B,OAAO,IAAI,CAACL,sBAAsB,CAAC,CAAC;EACtC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEM,qBAAqB,WAArBA,qBAAqBA,CAAA,EAAG;IACtB,OAAO,IAAI,CAACC,uBAAuB,CAAC,CAAC,GAAG,CAAC;EAC3C,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,oBAAoB,WAApBA,oBAAoBA,CAAA,EAAG;IACrB,OAAO,IAAI,CAACF,qBAAqB,CAAC,CAAC;EACrC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,6BAA6B,WAA7BA,6BAA6BA,CAAA,EAAG;IAC9B,OAAO,IAAI,CAACH,qBAAqB,CAAC,CAAC;EACrC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEC,uBAAuB,WAAvBA,uBAAuBA,CAAA,EAAG;IACxB,IAAMN,YAAY,GAAG,IAAI,CAACC,UAAU,CAACC,UAAU,CAAC,cAAc,CAAC;IAC/D,OAAOO,IAAI,CAACC,GAAG,CAAC,IAAI,CAACT,UAAU,CAACC,UAAU,CAAC,mBAAmB,CAAC,EAAEF,YAAY,CAAC;EAChF,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;AACA;EACEW,sBAAsB,WAAtBA,sBAAsBA,CAAA,EAAG;IACvB,OAAO,IAAI,CAACL,uBAAuB,CAAC,CAAC;EACvC,CAAC;EACD;AACF;AACA;AACA;AACA;AACA;EACEM,kBAAkB,WAAlBA,kBAAkBA,CAAA,EAAG;IACnB,OAAO,IAAI,CAACC,gBAAgB,CAACC,UAAU,CAACC,MAAM;EAChD;AACF,CAAC;AACDnB,YAAY,CAACE,kBAAkB,EAAE,YAAY,EAAED,UAAU,EAAE;EACzDmB,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,eAAenB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
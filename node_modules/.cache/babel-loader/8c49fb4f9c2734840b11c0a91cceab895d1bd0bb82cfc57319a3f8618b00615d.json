{"ast":null,"code":"import { clamp } from \"../helpers/number.mjs\";\n/**\n * @typedef Paginator\n * @property {function(number): void} setCurrentPage Sets the current index to the specific page.\n * @property {function(): number} getCurrentPage Gets the current page.\n * @property {function(): number} getSize Gets the total number of pages.\n * @property {function(): void} toFirstItem Move the index to the first page.\n * @property {function(): void} toLastItem Move the index to the last page.\n * @property {function(): void} toNextItem Move the index to the next page.\n * @property {function(): void} toPreviousItem Move the index to the previous page.\n * @property {function(): void} clear Clear the internal state of the paginator.\n */\n/**\n * @param {object} options Paginator options.\n * @param {number} [options.initialPage] Initial index from which paging starts. Also, after clearing the paginator\n * the page is cleared to the initial page.\n * @param {function(): number} [options.size] Sets the max size of the pages.\n * @param {function(number): boolean | void} [options.onItemSelect] Fires the function on each page change.\n * @param {function(): void} [options.onClear] Fires the function after clearing the state.\n * @returns {Paginator}\n */\nexport function createPaginator(_ref) {\n  var _ref$initialPage = _ref.initialPage,\n    initialPage = _ref$initialPage === void 0 ? -1 : _ref$initialPage,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? function () {\n      return 0;\n    } : _ref$size,\n    _ref$onItemSelect = _ref.onItemSelect,\n    onItemSelect = _ref$onItemSelect === void 0 ? function () {} : _ref$onItemSelect,\n    _ref$onClear = _ref.onClear,\n    onClear = _ref$onClear === void 0 ? function () {} : _ref$onClear;\n  var visitedPages = new Set();\n  var currentIndex = clamp(initialPage, -1, getSize() - 1);\n\n  /**\n   * Updates the internal state of the paginator.\n   *\n   * @param {number} newIndex The page index to switch.\n   * @param {-1|1} direction The direction of traversing the pages in case when they are disabled.\n   * @returns {number} Returns the final index of the page.\n   */\n  function _updateState(newIndex, direction) {\n    var lastIndex = getSize() - 1;\n    if (newIndex < 0) {\n      newIndex = lastIndex;\n    }\n    if (newIndex > lastIndex) {\n      newIndex = 0;\n    }\n    if (visitedPages.has(newIndex)) {\n      return -1;\n    }\n    visitedPages.add(newIndex);\n    var changeProceed = onItemSelect(newIndex, false);\n    if (changeProceed === false) {\n      newIndex = _updateState(direction === 1 ? ++newIndex : --newIndex,\n      // eslint-disable-line no-plusplus\n      direction);\n    }\n    return newIndex;\n  }\n\n  /**\n   * Sets the page index as current one.\n   *\n   * @param {number} index The index to set.\n   */\n  function setCurrentPage(index) {\n    if (index > -1 && index < getSize() && onItemSelect(index, true) !== false) {\n      currentIndex = index;\n    }\n  }\n\n  /**\n   * Gets the current page.\n   *\n   * @returns {number}\n   */\n  function getCurrentPage() {\n    return currentIndex;\n  }\n\n  /**\n   * Moves the index to the first page.\n   */\n  function toFirstItem() {\n    if (getSize() > 0) {\n      visitedPages.clear();\n      currentIndex = _updateState(0, 1);\n    }\n  }\n\n  /**\n   * Moves the index to the last page.\n   */\n  function toLastItem() {\n    if (getSize() > 0) {\n      visitedPages.clear();\n      currentIndex = _updateState(getSize() - 1, -1);\n    }\n  }\n\n  /**\n   * Moves the index to the next page.\n   */\n  function toNextItem() {\n    if (getSize() > 0) {\n      visitedPages.clear();\n      currentIndex = _updateState(++currentIndex, 1); // eslint-disable-line no-plusplus\n    }\n  }\n\n  /**\n   * Moves the index to the previous page.\n   */\n  function toPreviousItem() {\n    if (getSize() > 0) {\n      visitedPages.clear();\n      currentIndex = _updateState(--currentIndex, -1); // eslint-disable-line no-plusplus\n    }\n  }\n\n  /**\n   * Gets the total number of pages.\n   *\n   * @returns {number}\n   */\n  function getSize() {\n    return Math.max(size(), 0);\n  }\n\n  /**\n   * Clears the internal state of the paginator.\n   */\n  function clear() {\n    visitedPages.clear();\n    currentIndex = initialPage;\n    onClear();\n  }\n  return {\n    setCurrentPage: setCurrentPage,\n    getCurrentPage: getCurrentPage,\n    toFirstItem: toFirstItem,\n    toLastItem: toLastItem,\n    toNextItem: toNextItem,\n    toPreviousItem: toPreviousItem,\n    getSize: getSize,\n    clear: clear\n  };\n}","map":{"version":3,"names":["clamp","createPaginator","_ref","_ref$initialPage","initialPage","_ref$size","size","_ref$onItemSelect","onItemSelect","_ref$onClear","onClear","visitedPages","Set","currentIndex","getSize","_updateState","newIndex","direction","lastIndex","has","add","changeProceed","setCurrentPage","index","getCurrentPage","toFirstItem","clear","toLastItem","toNextItem","toPreviousItem","Math","max"],"sources":["/Users/priyadeliwala/node_modules/handsontable/utils/paginator.mjs"],"sourcesContent":["import \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { clamp } from \"../helpers/number.mjs\";\n/**\n * @typedef Paginator\n * @property {function(number): void} setCurrentPage Sets the current index to the specific page.\n * @property {function(): number} getCurrentPage Gets the current page.\n * @property {function(): number} getSize Gets the total number of pages.\n * @property {function(): void} toFirstItem Move the index to the first page.\n * @property {function(): void} toLastItem Move the index to the last page.\n * @property {function(): void} toNextItem Move the index to the next page.\n * @property {function(): void} toPreviousItem Move the index to the previous page.\n * @property {function(): void} clear Clear the internal state of the paginator.\n */\n/**\n * @param {object} options Paginator options.\n * @param {number} [options.initialPage] Initial index from which paging starts. Also, after clearing the paginator\n * the page is cleared to the initial page.\n * @param {function(): number} [options.size] Sets the max size of the pages.\n * @param {function(number): boolean | void} [options.onItemSelect] Fires the function on each page change.\n * @param {function(): void} [options.onClear] Fires the function after clearing the state.\n * @returns {Paginator}\n */\nexport function createPaginator(_ref) {\n  let {\n    initialPage = -1,\n    size = () => 0,\n    onItemSelect = () => {},\n    onClear = () => {}\n  } = _ref;\n  const visitedPages = new Set();\n  let currentIndex = clamp(initialPage, -1, getSize() - 1);\n\n  /**\n   * Updates the internal state of the paginator.\n   *\n   * @param {number} newIndex The page index to switch.\n   * @param {-1|1} direction The direction of traversing the pages in case when they are disabled.\n   * @returns {number} Returns the final index of the page.\n   */\n  function _updateState(newIndex, direction) {\n    const lastIndex = getSize() - 1;\n    if (newIndex < 0) {\n      newIndex = lastIndex;\n    }\n    if (newIndex > lastIndex) {\n      newIndex = 0;\n    }\n    if (visitedPages.has(newIndex)) {\n      return -1;\n    }\n    visitedPages.add(newIndex);\n    const changeProceed = onItemSelect(newIndex, false);\n    if (changeProceed === false) {\n      newIndex = _updateState(direction === 1 ? ++newIndex : --newIndex,\n      // eslint-disable-line no-plusplus\n      direction);\n    }\n    return newIndex;\n  }\n\n  /**\n   * Sets the page index as current one.\n   *\n   * @param {number} index The index to set.\n   */\n  function setCurrentPage(index) {\n    if (index > -1 && index < getSize() && onItemSelect(index, true) !== false) {\n      currentIndex = index;\n    }\n  }\n\n  /**\n   * Gets the current page.\n   *\n   * @returns {number}\n   */\n  function getCurrentPage() {\n    return currentIndex;\n  }\n\n  /**\n   * Moves the index to the first page.\n   */\n  function toFirstItem() {\n    if (getSize() > 0) {\n      visitedPages.clear();\n      currentIndex = _updateState(0, 1);\n    }\n  }\n\n  /**\n   * Moves the index to the last page.\n   */\n  function toLastItem() {\n    if (getSize() > 0) {\n      visitedPages.clear();\n      currentIndex = _updateState(getSize() - 1, -1);\n    }\n  }\n\n  /**\n   * Moves the index to the next page.\n   */\n  function toNextItem() {\n    if (getSize() > 0) {\n      visitedPages.clear();\n      currentIndex = _updateState(++currentIndex, 1); // eslint-disable-line no-plusplus\n    }\n  }\n\n  /**\n   * Moves the index to the previous page.\n   */\n  function toPreviousItem() {\n    if (getSize() > 0) {\n      visitedPages.clear();\n      currentIndex = _updateState(--currentIndex, -1); // eslint-disable-line no-plusplus\n    }\n  }\n\n  /**\n   * Gets the total number of pages.\n   *\n   * @returns {number}\n   */\n  function getSize() {\n    return Math.max(size(), 0);\n  }\n\n  /**\n   * Clears the internal state of the paginator.\n   */\n  function clear() {\n    visitedPages.clear();\n    currentIndex = initialPage;\n    onClear();\n  }\n  return {\n    setCurrentPage,\n    getCurrentPage,\n    toFirstItem,\n    toLastItem,\n    toNextItem,\n    toPreviousItem,\n    getSize,\n    clear\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
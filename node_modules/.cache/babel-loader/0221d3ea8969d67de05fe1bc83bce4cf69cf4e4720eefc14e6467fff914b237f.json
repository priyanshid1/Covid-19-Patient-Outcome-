{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { columnFactory, expandMetaType } from \"../utils.mjs\";\nimport LazyFactoryMap from \"../lazyFactoryMap.mjs\";\n/**\n * List of props which have to be cleared in the column meta-layer. That props have a\n * different meaning when using in column meta.\n *\n * @type {string[]}\n */\n\nvar COLUMNS_PROPS_CONFLICTS = ['data', 'width'];\n/**\n * The column meta object is a root of all settings defined in the column property of the Handsontable\n * settings. Each column in the Handsontable is associated with a unique meta object which is managed by\n * this layer. Adding, removing, or changing property in that object has a direct reflection only for\n * the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower\n * layers (prototype lookup).\n *\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n */\n\nvar ColumnMeta = /*#__PURE__*/function () {\n  function ColumnMeta(globalMeta) {\n    var _this = this;\n    _classCallCheck(this, ColumnMeta);\n\n    /**\n     * Reference to the GlobalMeta layer. While creating new column meta objects, all new objects\n     * inherit properties from the GlobalMeta layer.\n     *\n     * @type {GlobalMeta}\n     */\n    this.globalMeta = globalMeta;\n    /**\n     * The LazyFactoryMap structure, holder for column meta objects where each column meta is\n     * stored under the physical column index.\n     *\n     * @type {LazyFactoryMap}\n     */\n\n    this.metas = new LazyFactoryMap(function () {\n      return _this._createMeta();\n    });\n  }\n  /**\n   * Updates column meta object by merging settings with the current state.\n   *\n   * @param {number} physicalColumn The physical column index which points what column meta object is updated.\n   * @param {object} settings An object to merge with.\n   */\n\n  _createClass(ColumnMeta, [{\n    key: \"updateMeta\",\n    value: function updateMeta(physicalColumn, settings) {\n      var meta = this.getMeta(physicalColumn);\n      extend(meta, settings);\n      extend(meta, expandMetaType(settings.type, meta));\n    }\n    /**\n     * Creates one or more columns at specific position.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is added.\n     * @param {number} amount An amount of columns to add.\n     */\n  }, {\n    key: \"createColumn\",\n    value: function createColumn(physicalColumn, amount) {\n      this.metas.insert(physicalColumn, amount);\n    }\n    /**\n     * Removes one or more columns from the collection.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is removed.\n     * @param {number} amount An amount columns to remove.\n     */\n  }, {\n    key: \"removeColumn\",\n    value: function removeColumn(physicalColumn, amount) {\n      this.metas.remove(physicalColumn, amount);\n    }\n    /**\n     * Gets settings object for this layer.\n     *\n     * @param {number} physicalColumn The physical column index.\n     * @returns {object}\n     */\n  }, {\n    key: \"getMeta\",\n    value: function getMeta(physicalColumn) {\n      return this.metas.obtain(physicalColumn);\n    }\n    /**\n     * Gets constructor of the column meta object. Necessary for inheritance - creating the next meta layers.\n     *\n     * @param {number} physicalColumn The physical column index.\n     * @returns {Function}\n     */\n  }, {\n    key: \"getMetaConstructor\",\n    value: function getMetaConstructor(physicalColumn) {\n      return this.metas.obtain(physicalColumn).constructor;\n    }\n    /**\n     * Clears all saved column meta objects.\n     */\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.metas.clear();\n    }\n    /**\n     * Creates and returns new column meta object with properties inherited from the global meta layer.\n     *\n     * @private\n     * @returns {object}\n     */\n  }, {\n    key: \"_createMeta\",\n    value: function _createMeta() {\n      return columnFactory(this.globalMeta.getMetaConstructor(), COLUMNS_PROPS_CONFLICTS).prototype;\n    }\n  }]);\n  return ColumnMeta;\n}();\nexport { ColumnMeta as default };","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","extend","columnFactory","expandMetaType","LazyFactoryMap","COLUMNS_PROPS_CONFLICTS","ColumnMeta","globalMeta","_this","metas","_createMeta","value","updateMeta","physicalColumn","settings","meta","getMeta","type","createColumn","amount","insert","removeColumn","remove","obtain","getMetaConstructor","constructor","clearCache","clear","default"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/dataMap/metaManager/metaLayers/columnMeta.mjs"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { columnFactory, expandMetaType } from \"../utils.mjs\";\nimport LazyFactoryMap from \"../lazyFactoryMap.mjs\";\n/**\n * List of props which have to be cleared in the column meta-layer. That props have a\n * different meaning when using in column meta.\n *\n * @type {string[]}\n */\n\nvar COLUMNS_PROPS_CONFLICTS = ['data', 'width'];\n/**\n * The column meta object is a root of all settings defined in the column property of the Handsontable\n * settings. Each column in the Handsontable is associated with a unique meta object which is managed by\n * this layer. Adding, removing, or changing property in that object has a direct reflection only for\n * the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower\n * layers (prototype lookup).\n *\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n */\n\nvar ColumnMeta = /*#__PURE__*/function () {\n  function ColumnMeta(globalMeta) {\n    var _this = this;\n\n    _classCallCheck(this, ColumnMeta);\n\n    /**\n     * Reference to the GlobalMeta layer. While creating new column meta objects, all new objects\n     * inherit properties from the GlobalMeta layer.\n     *\n     * @type {GlobalMeta}\n     */\n    this.globalMeta = globalMeta;\n    /**\n     * The LazyFactoryMap structure, holder for column meta objects where each column meta is\n     * stored under the physical column index.\n     *\n     * @type {LazyFactoryMap}\n     */\n\n    this.metas = new LazyFactoryMap(function () {\n      return _this._createMeta();\n    });\n  }\n  /**\n   * Updates column meta object by merging settings with the current state.\n   *\n   * @param {number} physicalColumn The physical column index which points what column meta object is updated.\n   * @param {object} settings An object to merge with.\n   */\n\n\n  _createClass(ColumnMeta, [{\n    key: \"updateMeta\",\n    value: function updateMeta(physicalColumn, settings) {\n      var meta = this.getMeta(physicalColumn);\n      extend(meta, settings);\n      extend(meta, expandMetaType(settings.type, meta));\n    }\n    /**\n     * Creates one or more columns at specific position.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is added.\n     * @param {number} amount An amount of columns to add.\n     */\n\n  }, {\n    key: \"createColumn\",\n    value: function createColumn(physicalColumn, amount) {\n      this.metas.insert(physicalColumn, amount);\n    }\n    /**\n     * Removes one or more columns from the collection.\n     *\n     * @param {number} physicalColumn The physical column index which points from what position the column is removed.\n     * @param {number} amount An amount columns to remove.\n     */\n\n  }, {\n    key: \"removeColumn\",\n    value: function removeColumn(physicalColumn, amount) {\n      this.metas.remove(physicalColumn, amount);\n    }\n    /**\n     * Gets settings object for this layer.\n     *\n     * @param {number} physicalColumn The physical column index.\n     * @returns {object}\n     */\n\n  }, {\n    key: \"getMeta\",\n    value: function getMeta(physicalColumn) {\n      return this.metas.obtain(physicalColumn);\n    }\n    /**\n     * Gets constructor of the column meta object. Necessary for inheritance - creating the next meta layers.\n     *\n     * @param {number} physicalColumn The physical column index.\n     * @returns {Function}\n     */\n\n  }, {\n    key: \"getMetaConstructor\",\n    value: function getMetaConstructor(physicalColumn) {\n      return this.metas.obtain(physicalColumn).constructor;\n    }\n    /**\n     * Clears all saved column meta objects.\n     */\n\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this.metas.clear();\n    }\n    /**\n     * Creates and returns new column meta object with properties inherited from the global meta layer.\n     *\n     * @private\n     * @returns {object}\n     */\n\n  }, {\n    key: \"_createMeta\",\n    value: function _createMeta() {\n      return columnFactory(this.globalMeta.getMetaConstructor(), COLUMNS_PROPS_CONFLICTS).prototype;\n    }\n  }]);\n\n  return ColumnMeta;\n}();\n\nexport { ColumnMeta as default };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _slicedToArray from \"/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport moment from 'moment';\nimport * as C from \"../../../../i18n/constants.mjs\";\nimport { registerCondition } from \"../../conditionRegisterer.mjs\";\nexport var CONDITION_NAME = 'date_before';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {*} inputValues.\"0\" Maximum date of a range.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  var _ref2 = _slicedToArray(_ref, 1),\n    value = _ref2[0];\n  var date = moment(dataRow.value, dataRow.meta.dateFormat);\n  var inputDate = moment(value, dataRow.meta.dateFormat);\n  if (!date.isValid() || !inputDate.isValid()) {\n    return false;\n  }\n  return date.diff(inputDate) <= 0;\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_BEFORE,\n  inputsCount: 1,\n  showOperators: true\n});","map":{"version":3,"names":["moment","C","registerCondition","CONDITION_NAME","condition","dataRow","_ref","_ref2","_slicedToArray","value","date","meta","dateFormat","inputDate","isValid","diff","name","FILTERS_CONDITIONS_BEFORE","inputsCount","showOperators"],"sources":["/Users/priyadeliwala/node_modules/handsontable/plugins/filters/condition/date/before.mjs"],"sourcesContent":["import moment from 'moment';\nimport * as C from \"../../../../i18n/constants.mjs\";\nimport { registerCondition } from \"../../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'date_before';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {*} inputValues.\"0\" Maximum date of a range.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [value] = _ref;\n  const date = moment(dataRow.value, dataRow.meta.dateFormat);\n  const inputDate = moment(value, dataRow.meta.dateFormat);\n  if (!date.isValid() || !inputDate.isValid()) {\n    return false;\n  }\n  return date.diff(inputDate) <= 0;\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_BEFORE,\n  inputsCount: 1,\n  showOperators: true\n});"],"mappings":";AAAA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,OAAO,KAAKC,CAAC,MAAM,gCAAgC;AACnD,SAASC,iBAAiB,QAAQ,+BAA+B;AACjE,OAAO,IAAMC,cAAc,GAAG,aAAa;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAACC,OAAO,EAAEC,IAAI,EAAE;EACvC,IAAAC,KAAA,GAAAC,cAAA,CAAcF,IAAI;IAAbG,KAAK,GAAAF,KAAA;EACV,IAAMG,IAAI,GAAGV,MAAM,CAACK,OAAO,CAACI,KAAK,EAAEJ,OAAO,CAACM,IAAI,CAACC,UAAU,CAAC;EAC3D,IAAMC,SAAS,GAAGb,MAAM,CAACS,KAAK,EAAEJ,OAAO,CAACM,IAAI,CAACC,UAAU,CAAC;EACxD,IAAI,CAACF,IAAI,CAACI,OAAO,CAAC,CAAC,IAAI,CAACD,SAAS,CAACC,OAAO,CAAC,CAAC,EAAE;IAC3C,OAAO,KAAK;EACd;EACA,OAAOJ,IAAI,CAACK,IAAI,CAACF,SAAS,CAAC,IAAI,CAAC;AAClC;AACAX,iBAAiB,CAACC,cAAc,EAAEC,SAAS,EAAE;EAC3CY,IAAI,EAAEf,CAAC,CAACgB,yBAAyB;EACjCC,WAAW,EAAE,CAAC;EACdC,aAAa,EAAE;AACjB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
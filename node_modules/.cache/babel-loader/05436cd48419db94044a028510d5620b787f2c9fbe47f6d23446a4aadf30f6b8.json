{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nimport Hooks from \"../../../pluginHooks.mjs\";\nimport { hasOwnProperty } from \"../../../helpers/object.mjs\";\nimport { isFunction } from \"../../../helpers/function.mjs\";\n/**\n * @class DynamicCellMetaMod\n *\n * The `DynamicCellMetaMod` modifier allows for extending cell meta objects\n * (returned by `getCellMeta()` from `MetaManager`)\n * by user-specific properties.\n *\n * The user-specific properties can be added and changed dynamically,\n * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),\n * or by Handsontable's `cells` option.\n *\n * The `getCellMeta()` method is used widely throughout the source code.\n * To boost the method's execution time,\n * the logic is triggered only once per one Handsontable slow render cycle.\n */\n\nexport var DynamicCellMetaMod = /*#__PURE__*/function () {\n  function DynamicCellMetaMod(metaManager) {\n    var _this = this;\n    _classCallCheck(this, DynamicCellMetaMod);\n\n    /**\n     * @type {MetaManager}\n     */\n    this.metaManager = metaManager;\n    /**\n     * @type {Map}\n     */\n\n    this.metaSyncMemo = new Map();\n    metaManager.addLocalHook('afterGetCellMeta', function (cellMeta) {\n      return _this.extendCellMeta(cellMeta);\n    });\n    Hooks.getSingleton().add('beforeRender', function (forceFullRender) {\n      if (forceFullRender) {\n        _this.metaSyncMemo.clear();\n      }\n    }, this.metaManager.hot);\n  }\n  /**\n   * Extends the cell meta object by user-specific properties.\n   *\n   * The cell meta object can be extended dynamically,\n   * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),\n   * or by Handsontable's `cells` option.\n   *\n   * To boost performance, the extending process is triggered only once per one slow Handsontable render cycle.\n   *\n   * @param {object} cellMeta The cell meta object.\n   */\n\n  _createClass(DynamicCellMetaMod, [{\n    key: \"extendCellMeta\",\n    value: function extendCellMeta(cellMeta) {\n      var _this$metaSyncMemo$ge;\n      var physicalRow = cellMeta.row,\n        physicalColumn = cellMeta.col;\n      if ((_this$metaSyncMemo$ge = this.metaSyncMemo.get(physicalRow)) !== null && _this$metaSyncMemo$ge !== void 0 && _this$metaSyncMemo$ge.has(physicalColumn)) {\n        return;\n      }\n      var visualRow = cellMeta.visualRow,\n        visualCol = cellMeta.visualCol;\n      var hot = this.metaManager.hot;\n      var prop = hot.colToProp(visualCol);\n      cellMeta.prop = prop;\n      hot.runHooks('beforeGetCellMeta', visualRow, visualCol, cellMeta); // extend a `type` value, added or changed in the `beforeGetCellMeta` hook\n\n      var cellType = hasOwnProperty(cellMeta, 'type') ? cellMeta.type : null;\n      var cellSettings = isFunction(cellMeta.cells) ? cellMeta.cells(physicalRow, physicalColumn, prop) : null;\n      if (cellType) {\n        if (cellSettings) {\n          var _cellSettings$type;\n          cellSettings.type = (_cellSettings$type = cellSettings.type) !== null && _cellSettings$type !== void 0 ? _cellSettings$type : cellType;\n        } else {\n          cellSettings = {\n            type: cellType\n          };\n        }\n      }\n      if (cellSettings) {\n        this.metaManager.updateCellMeta(physicalRow, physicalColumn, cellSettings);\n      }\n      hot.runHooks('afterGetCellMeta', visualRow, visualCol, cellMeta);\n      if (!this.metaSyncMemo.has(physicalRow)) {\n        this.metaSyncMemo.set(physicalRow, new Set());\n      }\n      this.metaSyncMemo.get(physicalRow).add(physicalColumn);\n    }\n  }]);\n  return DynamicCellMetaMod;\n}();","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","Hooks","hasOwnProperty","isFunction","DynamicCellMetaMod","metaManager","_this","metaSyncMemo","Map","addLocalHook","cellMeta","extendCellMeta","getSingleton","add","forceFullRender","clear","hot","value","_this$metaSyncMemo$ge","physicalRow","row","physicalColumn","col","get","has","visualRow","visualCol","prop","colToProp","runHooks","cellType","type","cellSettings","cells","_cellSettings$type","updateCellMeta","set","Set"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/dataMap/metaManager/mods/dynamicCellMeta.mjs"],"sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.set.js\";\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\n\nimport Hooks from \"../../../pluginHooks.mjs\";\nimport { hasOwnProperty } from \"../../../helpers/object.mjs\";\nimport { isFunction } from \"../../../helpers/function.mjs\";\n/**\n * @class DynamicCellMetaMod\n *\n * The `DynamicCellMetaMod` modifier allows for extending cell meta objects\n * (returned by `getCellMeta()` from `MetaManager`)\n * by user-specific properties.\n *\n * The user-specific properties can be added and changed dynamically,\n * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),\n * or by Handsontable's `cells` option.\n *\n * The `getCellMeta()` method is used widely throughout the source code.\n * To boost the method's execution time,\n * the logic is triggered only once per one Handsontable slow render cycle.\n */\n\nexport var DynamicCellMetaMod = /*#__PURE__*/function () {\n  function DynamicCellMetaMod(metaManager) {\n    var _this = this;\n\n    _classCallCheck(this, DynamicCellMetaMod);\n\n    /**\n     * @type {MetaManager}\n     */\n    this.metaManager = metaManager;\n    /**\n     * @type {Map}\n     */\n\n    this.metaSyncMemo = new Map();\n    metaManager.addLocalHook('afterGetCellMeta', function (cellMeta) {\n      return _this.extendCellMeta(cellMeta);\n    });\n    Hooks.getSingleton().add('beforeRender', function (forceFullRender) {\n      if (forceFullRender) {\n        _this.metaSyncMemo.clear();\n      }\n    }, this.metaManager.hot);\n  }\n  /**\n   * Extends the cell meta object by user-specific properties.\n   *\n   * The cell meta object can be extended dynamically,\n   * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),\n   * or by Handsontable's `cells` option.\n   *\n   * To boost performance, the extending process is triggered only once per one slow Handsontable render cycle.\n   *\n   * @param {object} cellMeta The cell meta object.\n   */\n\n\n  _createClass(DynamicCellMetaMod, [{\n    key: \"extendCellMeta\",\n    value: function extendCellMeta(cellMeta) {\n      var _this$metaSyncMemo$ge;\n\n      var physicalRow = cellMeta.row,\n          physicalColumn = cellMeta.col;\n\n      if ((_this$metaSyncMemo$ge = this.metaSyncMemo.get(physicalRow)) !== null && _this$metaSyncMemo$ge !== void 0 && _this$metaSyncMemo$ge.has(physicalColumn)) {\n        return;\n      }\n\n      var visualRow = cellMeta.visualRow,\n          visualCol = cellMeta.visualCol;\n      var hot = this.metaManager.hot;\n      var prop = hot.colToProp(visualCol);\n      cellMeta.prop = prop;\n      hot.runHooks('beforeGetCellMeta', visualRow, visualCol, cellMeta); // extend a `type` value, added or changed in the `beforeGetCellMeta` hook\n\n      var cellType = hasOwnProperty(cellMeta, 'type') ? cellMeta.type : null;\n      var cellSettings = isFunction(cellMeta.cells) ? cellMeta.cells(physicalRow, physicalColumn, prop) : null;\n\n      if (cellType) {\n        if (cellSettings) {\n          var _cellSettings$type;\n\n          cellSettings.type = (_cellSettings$type = cellSettings.type) !== null && _cellSettings$type !== void 0 ? _cellSettings$type : cellType;\n        } else {\n          cellSettings = {\n            type: cellType\n          };\n        }\n      }\n\n      if (cellSettings) {\n        this.metaManager.updateCellMeta(physicalRow, physicalColumn, cellSettings);\n      }\n\n      hot.runHooks('afterGetCellMeta', visualRow, visualCol, cellMeta);\n\n      if (!this.metaSyncMemo.has(physicalRow)) {\n        this.metaSyncMemo.set(physicalRow, new Set());\n      }\n\n      this.metaSyncMemo.get(physicalRow).add(physicalColumn);\n    }\n  }]);\n\n  return DynamicCellMetaMod;\n}();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
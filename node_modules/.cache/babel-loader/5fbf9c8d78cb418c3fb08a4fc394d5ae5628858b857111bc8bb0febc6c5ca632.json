{"ast":null,"code":"import { hasOwnProperty, isObject, objectEach, inherit } from \"../../helpers/object.mjs\";\nimport { getCellType } from \"../../cellTypes/registry.mjs\";\n/**\n * Expands \"type\" property of the meta object to single values. For example `type: 'numeric'` sets\n * \"renderer\", \"editor\", \"validator\" properties to specific functions designed for numeric values.\n * If \"type\" is passed as an object that object will be returned, excluding properties that\n * already exist in the \"metaObject\" if passed.\n *\n * @param {object|string} type Type to expand;.\n * @param {object|undefined} [metaObject] Source meta object.\n * @returns {object|undefined}\n */\n\nexport function expandMetaType(type, metaObject) {\n  var validType = typeof type === 'string' ? getCellType(type) : type;\n  if (!isObject(validType)) {\n    return;\n  }\n  var preventSourceOverwrite = isObject(metaObject);\n  var expandedType = {};\n  objectEach(validType, function (value, property) {\n    if (property !== 'CELL_TYPE' && (!preventSourceOverwrite || preventSourceOverwrite && !hasOwnProperty(metaObject, property))) {\n      expandedType[property] = value;\n    }\n  });\n  return expandedType;\n}\n/**\n * Creates new class which extends properties from TableMeta layer class.\n *\n * @param {TableMeta} TableMeta The TableMeta which the new ColumnMeta is created from.\n * @param {string[]} [conflictList] List of the properties which are conflicted with the column meta layer.\n *                                  Conflicted properties are overwritten by `undefined` value, to separate them\n *                                  from the TableMeta layer.\n * @returns {ColumnMeta} Returns constructor ready to initialize with `new` operator.\n */\n\nexport function columnFactory(TableMeta) {\n  var conflictList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  // Do not use ES6 \"class extends\" syntax here. It seems that the babel produces code\n  // which drastically decreases the performance of the ColumnMeta class creation.\n\n  /**\n   * Base \"class\" for column meta.\n   */\n  function ColumnMeta() {}\n  inherit(ColumnMeta, TableMeta); // Clear conflict settings\n\n  for (var i = 0; i < conflictList.length; i++) {\n    ColumnMeta.prototype[conflictList[i]] = void 0;\n  }\n  return ColumnMeta;\n}\n/**\n * Helper which checks if the provided argument is an unsigned number.\n *\n * @param {*} value Value to check.\n * @returns {boolean}\n */\n\nexport function isUnsignedNumber(value) {\n  return Number.isInteger(value) && value >= 0;\n}\n/**\n * Function which makes assertion by custom condition. Function throws an error when assertion doesn't meet the spec.\n *\n * @param {Function} condition Function with custom logic. The condition has to return boolean values.\n * @param {string} errorMessage String which describes assertion error.\n */\n\nexport function assert(condition, errorMessage) {\n  if (!condition()) {\n    throw new Error(\"Assertion failed: \".concat(errorMessage));\n  }\n}\n/**\n * Check if given variable is null or undefined.\n *\n * @param {*} variable Variable to check.\n * @returns {boolean}\n */\n\nexport function isNullish(variable) {\n  return variable === null || variable === void 0;\n}","map":{"version":3,"names":["hasOwnProperty","isObject","objectEach","inherit","getCellType","expandMetaType","type","metaObject","validType","preventSourceOverwrite","expandedType","value","property","columnFactory","TableMeta","conflictList","arguments","length","undefined","ColumnMeta","i","prototype","isUnsignedNumber","Number","isInteger","assert","condition","errorMessage","Error","concat","isNullish","variable"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/dataMap/metaManager/utils.mjs"],"sourcesContent":["import \"core-js/modules/es.number.is-integer.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { hasOwnProperty, isObject, objectEach, inherit } from \"../../helpers/object.mjs\";\nimport { getCellType } from \"../../cellTypes/registry.mjs\";\n/**\n * Expands \"type\" property of the meta object to single values. For example `type: 'numeric'` sets\n * \"renderer\", \"editor\", \"validator\" properties to specific functions designed for numeric values.\n * If \"type\" is passed as an object that object will be returned, excluding properties that\n * already exist in the \"metaObject\" if passed.\n *\n * @param {object|string} type Type to expand;.\n * @param {object|undefined} [metaObject] Source meta object.\n * @returns {object|undefined}\n */\n\nexport function expandMetaType(type, metaObject) {\n  var validType = typeof type === 'string' ? getCellType(type) : type;\n\n  if (!isObject(validType)) {\n    return;\n  }\n\n  var preventSourceOverwrite = isObject(metaObject);\n  var expandedType = {};\n  objectEach(validType, function (value, property) {\n    if (property !== 'CELL_TYPE' && (!preventSourceOverwrite || preventSourceOverwrite && !hasOwnProperty(metaObject, property))) {\n      expandedType[property] = value;\n    }\n  });\n  return expandedType;\n}\n/**\n * Creates new class which extends properties from TableMeta layer class.\n *\n * @param {TableMeta} TableMeta The TableMeta which the new ColumnMeta is created from.\n * @param {string[]} [conflictList] List of the properties which are conflicted with the column meta layer.\n *                                  Conflicted properties are overwritten by `undefined` value, to separate them\n *                                  from the TableMeta layer.\n * @returns {ColumnMeta} Returns constructor ready to initialize with `new` operator.\n */\n\nexport function columnFactory(TableMeta) {\n  var conflictList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  // Do not use ES6 \"class extends\" syntax here. It seems that the babel produces code\n  // which drastically decreases the performance of the ColumnMeta class creation.\n\n  /**\n   * Base \"class\" for column meta.\n   */\n  function ColumnMeta() {}\n\n  inherit(ColumnMeta, TableMeta); // Clear conflict settings\n\n  for (var i = 0; i < conflictList.length; i++) {\n    ColumnMeta.prototype[conflictList[i]] = void 0;\n  }\n\n  return ColumnMeta;\n}\n/**\n * Helper which checks if the provided argument is an unsigned number.\n *\n * @param {*} value Value to check.\n * @returns {boolean}\n */\n\nexport function isUnsignedNumber(value) {\n  return Number.isInteger(value) && value >= 0;\n}\n/**\n * Function which makes assertion by custom condition. Function throws an error when assertion doesn't meet the spec.\n *\n * @param {Function} condition Function with custom logic. The condition has to return boolean values.\n * @param {string} errorMessage String which describes assertion error.\n */\n\nexport function assert(condition, errorMessage) {\n  if (!condition()) {\n    throw new Error(\"Assertion failed: \".concat(errorMessage));\n  }\n}\n/**\n * Check if given variable is null or undefined.\n *\n * @param {*} variable Variable to check.\n * @returns {boolean}\n */\n\nexport function isNullish(variable) {\n  return variable === null || variable === void 0;\n}"],"mappings":"AAEA,SAASA,cAAc,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,OAAO,QAAQ,0BAA0B;AACxF,SAASC,WAAW,QAAQ,8BAA8B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,cAAcA,CAACC,IAAI,EAAEC,UAAU,EAAE;EAC/C,IAAIC,SAAS,GAAG,OAAOF,IAAI,KAAK,QAAQ,GAAGF,WAAW,CAACE,IAAI,CAAC,GAAGA,IAAI;EAEnE,IAAI,CAACL,QAAQ,CAACO,SAAS,CAAC,EAAE;IACxB;EACF;EAEA,IAAIC,sBAAsB,GAAGR,QAAQ,CAACM,UAAU,CAAC;EACjD,IAAIG,YAAY,GAAG,CAAC,CAAC;EACrBR,UAAU,CAACM,SAAS,EAAE,UAAUG,KAAK,EAAEC,QAAQ,EAAE;IAC/C,IAAIA,QAAQ,KAAK,WAAW,KAAK,CAACH,sBAAsB,IAAIA,sBAAsB,IAAI,CAACT,cAAc,CAACO,UAAU,EAAEK,QAAQ,CAAC,CAAC,EAAE;MAC5HF,YAAY,CAACE,QAAQ,CAAC,GAAGD,KAAK;IAChC;EACF,CAAC,CAAC;EACF,OAAOD,YAAY;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,aAAaA,CAACC,SAAS,EAAE;EACvC,IAAIC,YAAY,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE;;EAEzF;EACA;;EAEA;AACF;AACA;EACE,SAASG,UAAUA,CAAA,EAAG,CAAC;EAEvBhB,OAAO,CAACgB,UAAU,EAAEL,SAAS,CAAC,CAAC,CAAC;;EAEhC,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,YAAY,CAACE,MAAM,EAAEG,CAAC,EAAE,EAAE;IAC5CD,UAAU,CAACE,SAAS,CAACN,YAAY,CAACK,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;EAChD;EAEA,OAAOD,UAAU;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,gBAAgBA,CAACX,KAAK,EAAE;EACtC,OAAOY,MAAM,CAACC,SAAS,CAACb,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASc,MAAMA,CAACC,SAAS,EAAEC,YAAY,EAAE;EAC9C,IAAI,CAACD,SAAS,CAAC,CAAC,EAAE;IAChB,MAAM,IAAIE,KAAK,CAAC,oBAAoB,CAACC,MAAM,CAACF,YAAY,CAAC,CAAC;EAC5D;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,SAASA,CAACC,QAAQ,EAAE;EAClC,OAAOA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC;AACjD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
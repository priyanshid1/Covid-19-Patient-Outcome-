{"ast":null,"code":"import { CLONE_TYPES } from \"./constants.mjs\";\nvar registeredOverlays = {};\n/**\n * Register overlay class. If the Overlay under the same name is already registered\n * the class won't be registered.\n *\n * @param {Overlay} overlayClass Overlay class extended from base overlay class {@link Overlay}.\n */\n\nexport function registerOverlayOnce(overlayClass) {\n  var overlayName = overlayClass.OVERLAY_NAME;\n  if (CLONE_TYPES.indexOf(overlayName) === -1) {\n    throw new Error(\"Unsupported overlay (\".concat(overlayName, \").\"));\n  }\n  if (!hasOverlay(overlayName)) {\n    registeredOverlays[overlayName] = overlayClass;\n  }\n}\n/**\n * Create new instance of overlay type.\n *\n * @param {string} type Overlay type, one of the CLONE_TYPES value.\n * @param {Walkontable} wot The Walkontable instance.\n * @returns {Overlay}\n */\n\nexport function createOverlay(type, wot) {\n  return new registeredOverlays[type](wot);\n}\n/**\n * Check if specified overlay was registered.\n *\n * @param {string} type Overlay type, one of the CLONE_TYPES value.\n * @returns {boolean}\n */\n\nexport function hasOverlay(type) {\n  return registeredOverlays[type] !== void 0;\n}\n/**\n * Checks if overlay object (`overlay`) is instance of overlay type (`type`).\n *\n * @param {Overlay} overlay Overlay object.\n * @param {string} type Overlay type, one of the CLONE_TYPES value.\n * @returns {boolean}\n */\n\nexport function isOverlayTypeOf(overlay, type) {\n  if (!overlay || !registeredOverlays[type]) {\n    return false;\n  }\n  return overlay instanceof registeredOverlays[type];\n}","map":{"version":3,"names":["CLONE_TYPES","registeredOverlays","registerOverlayOnce","overlayClass","overlayName","OVERLAY_NAME","indexOf","Error","concat","hasOverlay","createOverlay","type","wot","isOverlayTypeOf","overlay"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/3rdparty/walkontable/src/overlay/registerer.mjs"],"sourcesContent":["import \"core-js/modules/es.array.index-of.js\";\nimport { CLONE_TYPES } from \"./constants.mjs\";\nvar registeredOverlays = {};\n/**\n * Register overlay class. If the Overlay under the same name is already registered\n * the class won't be registered.\n *\n * @param {Overlay} overlayClass Overlay class extended from base overlay class {@link Overlay}.\n */\n\nexport function registerOverlayOnce(overlayClass) {\n  var overlayName = overlayClass.OVERLAY_NAME;\n\n  if (CLONE_TYPES.indexOf(overlayName) === -1) {\n    throw new Error(\"Unsupported overlay (\".concat(overlayName, \").\"));\n  }\n\n  if (!hasOverlay(overlayName)) {\n    registeredOverlays[overlayName] = overlayClass;\n  }\n}\n/**\n * Create new instance of overlay type.\n *\n * @param {string} type Overlay type, one of the CLONE_TYPES value.\n * @param {Walkontable} wot The Walkontable instance.\n * @returns {Overlay}\n */\n\nexport function createOverlay(type, wot) {\n  return new registeredOverlays[type](wot);\n}\n/**\n * Check if specified overlay was registered.\n *\n * @param {string} type Overlay type, one of the CLONE_TYPES value.\n * @returns {boolean}\n */\n\nexport function hasOverlay(type) {\n  return registeredOverlays[type] !== void 0;\n}\n/**\n * Checks if overlay object (`overlay`) is instance of overlay type (`type`).\n *\n * @param {Overlay} overlay Overlay object.\n * @param {string} type Overlay type, one of the CLONE_TYPES value.\n * @returns {boolean}\n */\n\nexport function isOverlayTypeOf(overlay, type) {\n  if (!overlay || !registeredOverlays[type]) {\n    return false;\n  }\n\n  return overlay instanceof registeredOverlays[type];\n}"],"mappings":"AACA,SAASA,WAAW,QAAQ,iBAAiB;AAC7C,IAAIC,kBAAkB,GAAG,CAAC,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,mBAAmBA,CAACC,YAAY,EAAE;EAChD,IAAIC,WAAW,GAAGD,YAAY,CAACE,YAAY;EAE3C,IAAIL,WAAW,CAACM,OAAO,CAACF,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE;IAC3C,MAAM,IAAIG,KAAK,CAAC,uBAAuB,CAACC,MAAM,CAACJ,WAAW,EAAE,IAAI,CAAC,CAAC;EACpE;EAEA,IAAI,CAACK,UAAU,CAACL,WAAW,CAAC,EAAE;IAC5BH,kBAAkB,CAACG,WAAW,CAAC,GAAGD,YAAY;EAChD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASO,aAAaA,CAACC,IAAI,EAAEC,GAAG,EAAE;EACvC,OAAO,IAAIX,kBAAkB,CAACU,IAAI,CAAC,CAACC,GAAG,CAAC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASH,UAAUA,CAACE,IAAI,EAAE;EAC/B,OAAOV,kBAAkB,CAACU,IAAI,CAAC,KAAK,KAAK,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,eAAeA,CAACC,OAAO,EAAEH,IAAI,EAAE;EAC7C,IAAI,CAACG,OAAO,IAAI,CAACb,kBAAkB,CAACU,IAAI,CAAC,EAAE;IACzC,OAAO,KAAK;EACd;EAEA,OAAOG,OAAO,YAAYb,kBAAkB,CAACU,IAAI,CAAC;AACpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
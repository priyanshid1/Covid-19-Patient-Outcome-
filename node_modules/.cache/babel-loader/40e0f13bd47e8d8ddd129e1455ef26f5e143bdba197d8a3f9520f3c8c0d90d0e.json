{"ast":null,"code":"var _jsxFileName = \"/Users/priyadeliwala/Desktop/sales-dashboard/src/components/OutcomeChart.js\";\nimport React from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OutcomeChart = ({\n  data,\n  metrics\n}) => {\n  // Define colors for each metric\n  const metricColors = {\n    cases: '#1e90ff',\n    // Blue for Cases\n    deaths: '#ff6347',\n    // Red for Deaths\n    recovered: '#32cd32' // Green for Recovered\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100%',\n      padding: '20px 0'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: \"COVID-19 Outcomes Bar Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"95%\",\n      height: 500,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        data: data,\n        barGap: 5,\n        margin: {\n          top: 20,\n          right: 30,\n          left: 60,\n          bottom: 120\n        } // Increased left and bottom margins\n        ,\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"country\",\n          tick: {\n            angle: -30,\n            textAnchor: 'end',\n            fontSize: 12\n          } // Slightly increased font size\n          ,\n          interval: 8 // Show every 8th label (adjust as needed for readability)\n          ,\n          height: 100 // Add height to accommodate rotated labels\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          tickFormatter: value => value.toLocaleString() // Format numbers with commas\n          ,\n          label: {\n            value: 'Count',\n            angle: 0,\n            position: 'insideLeft',\n            dy: -150,\n            fontSize: 14\n          } // Y-axis label with adjusted font size\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          formatter: value => value.toLocaleString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }, this), \" \", /*#__PURE__*/_jsxDEV(Legend, {\n          verticalAlign: \"top\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this), metrics.map(metric => /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: metric,\n          fill: metricColors[metric],\n          name: metric.charAt(0).toUpperCase() + metric.slice(1) // Capitalize the metric name for legend and tooltip\n        }, metric, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 9\n  }, this);\n};\n_c = OutcomeChart;\nexport default OutcomeChart;\nvar _c;\n$RefreshReg$(_c, \"OutcomeChart\");","map":{"version":3,"names":["React","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","ResponsiveContainer","Legend","jsxDEV","_jsxDEV","OutcomeChart","data","metrics","metricColors","cases","deaths","recovered","style","width","padding","children","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","height","barGap","margin","top","right","left","bottom","strokeDasharray","dataKey","tick","angle","textAnchor","fontSize","interval","tickFormatter","value","toLocaleString","label","position","dy","formatter","verticalAlign","map","metric","fill","name","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/src/components/OutcomeChart.js"],"sourcesContent":["import React from 'react';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from 'recharts';\n\nconst OutcomeChart = ({ data, metrics }) => {\n    // Define colors for each metric\n    const metricColors = {\n        cases: '#1e90ff',      // Blue for Cases\n        deaths: '#ff6347',     // Red for Deaths\n        recovered: '#32cd32'   // Green for Recovered\n    };\n\n    return (\n        <div style={{ width: '100%', padding: '20px 0' }}>\n            <h3 style={{ textAlign: 'center' }}>COVID-19 Outcomes Bar Chart</h3>\n            <ResponsiveContainer width=\"95%\" height={500}>\n                <BarChart\n                    data={data}\n                    barGap={5}\n                    margin={{ top: 20, right: 30, left: 60, bottom: 120 }} // Increased left and bottom margins\n                >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n\n                    {/* X-Axis with Country Names, showing every nth label */}\n                    <XAxis \n                        dataKey=\"country\" \n                        tick={{ angle: -30, textAnchor: 'end', fontSize: 12 }} // Slightly increased font size\n                        interval={8}  // Show every 8th label (adjust as needed for readability)\n                        height={100}  // Add height to accommodate rotated labels\n                    />\n\n                    {/* Y-Axis with Formatting for Large Numbers */}\n                    <YAxis \n                        tickFormatter={(value) => value.toLocaleString()} // Format numbers with commas\n                        label={{ value: 'Count', angle: 0, position: 'insideLeft', dy: -150, fontSize: 14 }} // Y-axis label with adjusted font size\n                    />\n\n                    <Tooltip formatter={(value) => value.toLocaleString()} /> {/* Tooltip with formatted numbers */}\n                    <Legend verticalAlign=\"top\" />\n\n                    {/* Render a bar for each selected metric */}\n                    {metrics.map((metric) => (\n                        <Bar\n                            key={metric}\n                            dataKey={metric}\n                            fill={metricColors[metric]}\n                            name={metric.charAt(0).toUpperCase() + metric.slice(1)} // Capitalize the metric name for legend and tooltip\n                        />\n                    ))}\n                </BarChart>\n            </ResponsiveContainer>\n        </div>\n    );\n};\n\nexport default OutcomeChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
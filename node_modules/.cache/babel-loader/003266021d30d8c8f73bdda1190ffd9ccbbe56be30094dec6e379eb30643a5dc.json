{"ast":null,"code":"import { HidingMap } from \"./hidingMap.mjs\";\nimport { IndexMap } from \"./indexMap.mjs\";\nimport { LinkedPhysicalIndexToValueMap } from \"./linkedPhysicalIndexToValueMap.mjs\";\nimport { PhysicalIndexToValueMap } from \"./physicalIndexToValueMap.mjs\";\nimport { TrimmingMap } from \"./trimmingMap.mjs\";\nexport * from \"./indexesSequence.mjs\";\nexport * from \"./utils/indexesSequence.mjs\";\nexport { HidingMap, IndexMap, LinkedPhysicalIndexToValueMap, PhysicalIndexToValueMap, TrimmingMap };\nvar availableIndexMapTypes = new Map([['hiding', HidingMap], ['index', IndexMap], ['linkedPhysicalIndexToValue', LinkedPhysicalIndexToValueMap], ['physicalIndexToValue', PhysicalIndexToValueMap], ['trimming', TrimmingMap]]);\n/**\n * Creates and returns new IndexMap instance.\n *\n * @param {string} mapType The type of the map.\n * @param {*} [initValueOrFn=null] Initial value or function for index map.\n * @returns {IndexMap}\n */\n\nexport function createIndexMap(mapType) {\n  var initValueOrFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (!availableIndexMapTypes.has(mapType)) {\n    throw new Error(\"The provided map type (\\\"\".concat(mapType, \"\\\") does not exist.\"));\n  }\n  return new (availableIndexMapTypes.get(mapType))(initValueOrFn);\n}","map":{"version":3,"names":["HidingMap","IndexMap","LinkedPhysicalIndexToValueMap","PhysicalIndexToValueMap","TrimmingMap","availableIndexMapTypes","Map","createIndexMap","mapType","initValueOrFn","arguments","length","undefined","has","Error","concat","get"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/translations/maps/index.mjs"],"sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { HidingMap } from \"./hidingMap.mjs\";\nimport { IndexMap } from \"./indexMap.mjs\";\nimport { LinkedPhysicalIndexToValueMap } from \"./linkedPhysicalIndexToValueMap.mjs\";\nimport { PhysicalIndexToValueMap } from \"./physicalIndexToValueMap.mjs\";\nimport { TrimmingMap } from \"./trimmingMap.mjs\";\nexport * from \"./indexesSequence.mjs\";\nexport * from \"./utils/indexesSequence.mjs\";\nexport { HidingMap, IndexMap, LinkedPhysicalIndexToValueMap, PhysicalIndexToValueMap, TrimmingMap };\nvar availableIndexMapTypes = new Map([['hiding', HidingMap], ['index', IndexMap], ['linkedPhysicalIndexToValue', LinkedPhysicalIndexToValueMap], ['physicalIndexToValue', PhysicalIndexToValueMap], ['trimming', TrimmingMap]]);\n/**\n * Creates and returns new IndexMap instance.\n *\n * @param {string} mapType The type of the map.\n * @param {*} [initValueOrFn=null] Initial value or function for index map.\n * @returns {IndexMap}\n */\n\nexport function createIndexMap(mapType) {\n  var initValueOrFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (!availableIndexMapTypes.has(mapType)) {\n    throw new Error(\"The provided map type (\\\"\".concat(mapType, \"\\\") does not exist.\"));\n  }\n\n  return new (availableIndexMapTypes.get(mapType))(initValueOrFn);\n}"],"mappings":"AAKA,SAASA,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,6BAA6B,QAAQ,qCAAqC;AACnF,SAASC,uBAAuB,QAAQ,+BAA+B;AACvE,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,cAAc,uBAAuB;AACrC,cAAc,6BAA6B;AAC3C,SAASJ,SAAS,EAAEC,QAAQ,EAAEC,6BAA6B,EAAEC,uBAAuB,EAAEC,WAAW;AACjG,IAAIC,sBAAsB,GAAG,IAAIC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAEN,SAAS,CAAC,EAAE,CAAC,OAAO,EAAEC,QAAQ,CAAC,EAAE,CAAC,4BAA4B,EAAEC,6BAA6B,CAAC,EAAE,CAAC,sBAAsB,EAAEC,uBAAuB,CAAC,EAAE,CAAC,UAAU,EAAEC,WAAW,CAAC,CAAC,CAAC;AAC/N;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASG,cAAcA,CAACC,OAAO,EAAE;EACtC,IAAIC,aAAa,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;EAE5F,IAAI,CAACL,sBAAsB,CAACQ,GAAG,CAACL,OAAO,CAAC,EAAE;IACxC,MAAM,IAAIM,KAAK,CAAC,2BAA2B,CAACC,MAAM,CAACP,OAAO,EAAE,qBAAqB,CAAC,CAAC;EACrF;EAEA,OAAO,KAAKH,sBAAsB,CAACW,GAAG,CAACR,OAAO,CAAC,EAAEC,aAAa,CAAC;AACjE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
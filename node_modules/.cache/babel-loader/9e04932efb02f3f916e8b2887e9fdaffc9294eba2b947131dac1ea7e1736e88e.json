{"ast":null,"code":"import { defineGetter } from \"../../../../../helpers/object.mjs\";\nvar MIXIN_NAME = 'calculatedColumns';\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use virtual rendering in the horizontal axis.\n *\n * @type {object}\n */\n\nvar calculatedColumns = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getFirstRenderedColumn: function getFirstRenderedColumn() {\n    var startColumn = this.wot.wtViewport.columnsRenderCalculator.startColumn;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getFirstVisibleColumn: function getFirstVisibleColumn() {\n    var startColumn = this.wot.wtViewport.columnsVisibleCalculator.startColumn;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getLastRenderedColumn: function getLastRenderedColumn() {\n    var endColumn = this.wot.wtViewport.columnsRenderCalculator.endColumn;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getLastVisibleColumn: function getLastVisibleColumn() {\n    var endColumn = this.wot.wtViewport.columnsVisibleCalculator.endColumn;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {number}\n   */\n  getRenderedColumnsCount: function getRenderedColumnsCount() {\n    return this.wot.wtViewport.columnsRenderCalculator.count;\n  },\n  /**\n   * Get the number of fully visible columns in the viewport.\n   *\n   * @returns {number}\n   */\n  getVisibleColumnsCount: function getVisibleColumnsCount() {\n    return this.wot.wtViewport.columnsVisibleCalculator.count;\n  }\n};\ndefineGetter(calculatedColumns, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedColumns;","map":{"version":3,"names":["defineGetter","MIXIN_NAME","calculatedColumns","getFirstRenderedColumn","startColumn","wot","wtViewport","columnsRenderCalculator","getFirstVisibleColumn","columnsVisibleCalculator","getLastRenderedColumn","endColumn","getLastVisibleColumn","getRenderedColumnsCount","count","getVisibleColumnsCount","writable","enumerable"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/3rdparty/walkontable/src/table/mixin/calculatedColumns.mjs"],"sourcesContent":["import { defineGetter } from \"../../../../../helpers/object.mjs\";\nvar MIXIN_NAME = 'calculatedColumns';\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use virtual rendering in the horizontal axis.\n *\n * @type {object}\n */\n\nvar calculatedColumns = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getFirstRenderedColumn: function getFirstRenderedColumn() {\n    var startColumn = this.wot.wtViewport.columnsRenderCalculator.startColumn;\n\n    if (startColumn === null) {\n      return -1;\n    }\n\n    return startColumn;\n  },\n\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getFirstVisibleColumn: function getFirstVisibleColumn() {\n    var startColumn = this.wot.wtViewport.columnsVisibleCalculator.startColumn;\n\n    if (startColumn === null) {\n      return -1;\n    }\n\n    return startColumn;\n  },\n\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getLastRenderedColumn: function getLastRenderedColumn() {\n    var endColumn = this.wot.wtViewport.columnsRenderCalculator.endColumn;\n\n    if (endColumn === null) {\n      return -1;\n    }\n\n    return endColumn;\n  },\n\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   */\n  getLastVisibleColumn: function getLastVisibleColumn() {\n    var endColumn = this.wot.wtViewport.columnsVisibleCalculator.endColumn;\n\n    if (endColumn === null) {\n      return -1;\n    }\n\n    return endColumn;\n  },\n\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {number}\n   */\n  getRenderedColumnsCount: function getRenderedColumnsCount() {\n    return this.wot.wtViewport.columnsRenderCalculator.count;\n  },\n\n  /**\n   * Get the number of fully visible columns in the viewport.\n   *\n   * @returns {number}\n   */\n  getVisibleColumnsCount: function getVisibleColumnsCount() {\n    return this.wot.wtViewport.columnsVisibleCalculator.count;\n  }\n};\ndefineGetter(calculatedColumns, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedColumns;"],"mappings":"AAAA,SAASA,YAAY,QAAQ,mCAAmC;AAChE,IAAIC,UAAU,GAAG,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,iBAAiB,GAAG;EACtB;AACF;AACA;AACA;AACA;EACEC,sBAAsB,EAAE,SAASA,sBAAsBA,CAAA,EAAG;IACxD,IAAIC,WAAW,GAAG,IAAI,CAACC,GAAG,CAACC,UAAU,CAACC,uBAAuB,CAACH,WAAW;IAEzE,IAAIA,WAAW,KAAK,IAAI,EAAE;MACxB,OAAO,CAAC,CAAC;IACX;IAEA,OAAOA,WAAW;EACpB,CAAC;EAED;AACF;AACA;AACA;AACA;EACEI,qBAAqB,EAAE,SAASA,qBAAqBA,CAAA,EAAG;IACtD,IAAIJ,WAAW,GAAG,IAAI,CAACC,GAAG,CAACC,UAAU,CAACG,wBAAwB,CAACL,WAAW;IAE1E,IAAIA,WAAW,KAAK,IAAI,EAAE;MACxB,OAAO,CAAC,CAAC;IACX;IAEA,OAAOA,WAAW;EACpB,CAAC;EAED;AACF;AACA;AACA;AACA;EACEM,qBAAqB,EAAE,SAASA,qBAAqBA,CAAA,EAAG;IACtD,IAAIC,SAAS,GAAG,IAAI,CAACN,GAAG,CAACC,UAAU,CAACC,uBAAuB,CAACI,SAAS;IAErE,IAAIA,SAAS,KAAK,IAAI,EAAE;MACtB,OAAO,CAAC,CAAC;IACX;IAEA,OAAOA,SAAS;EAClB,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,oBAAoB,EAAE,SAASA,oBAAoBA,CAAA,EAAG;IACpD,IAAID,SAAS,GAAG,IAAI,CAACN,GAAG,CAACC,UAAU,CAACG,wBAAwB,CAACE,SAAS;IAEtE,IAAIA,SAAS,KAAK,IAAI,EAAE;MACtB,OAAO,CAAC,CAAC;IACX;IAEA,OAAOA,SAAS;EAClB,CAAC;EAED;AACF;AACA;AACA;AACA;EACEE,uBAAuB,EAAE,SAASA,uBAAuBA,CAAA,EAAG;IAC1D,OAAO,IAAI,CAACR,GAAG,CAACC,UAAU,CAACC,uBAAuB,CAACO,KAAK;EAC1D,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,sBAAsB,EAAE,SAASA,sBAAsBA,CAAA,EAAG;IACxD,OAAO,IAAI,CAACV,GAAG,CAACC,UAAU,CAACG,wBAAwB,CAACK,KAAK;EAC3D;AACF,CAAC;AACDd,YAAY,CAACE,iBAAiB,EAAE,YAAY,EAAED,UAAU,EAAE;EACxDe,QAAQ,EAAE,KAAK;EACfC,UAAU,EAAE;AACd,CAAC,CAAC;AACF,eAAef,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
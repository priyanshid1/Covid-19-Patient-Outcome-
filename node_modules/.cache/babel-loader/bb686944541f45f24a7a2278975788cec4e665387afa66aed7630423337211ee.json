{"ast":null,"code":"var _templateObject;\nfunction _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}\nimport { toSingleLine } from \"../../../../helpers/templateLiteralTag.mjs\";\n/**\n * @param {TreeNode} nodeToProcess A tree node to process.\n * @param {number} gridColumnIndex The visual column index that triggers the node modification.\n *                                 The index can be between the root node column index and\n *                                 column index plus node colspan length.\n */\n\nexport function showColumn(nodeToProcess, gridColumnIndex) {\n  if (!Number.isInteger(gridColumnIndex)) {\n    throw new Error('The passed gridColumnIndex argument has invalid type.');\n  }\n  if (nodeToProcess.childs.length > 0) {\n    throw new Error(toSingleLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"The passed node is not the last node on the tree. Only for \\nthe last node, the show column modification can be applied.\"], [\"The passed node is not the last node on the tree. Only for\\\\x20\\nthe last node, the show column modification can be applied.\"]))));\n  }\n  var crossHiddenColumns = nodeToProcess.data.crossHiddenColumns;\n  if (!crossHiddenColumns.includes(gridColumnIndex)) {\n    return;\n  }\n  var isCollapsibleNode = false;\n  nodeToProcess.walkUp(function (node) {\n    var collapsible = node.data.collapsible;\n    if (collapsible) {\n      isCollapsibleNode = true;\n      return false; // Cancel tree traversing\n    }\n  }); // TODO: When the node is collapsible do not show the column. Currently collapsible headers\n  // does not work with hidden columns (hidden index map types).\n\n  if (isCollapsibleNode) {\n    return;\n  }\n  nodeToProcess.walkUp(function (node) {\n    var data = node.data;\n    data.crossHiddenColumns.splice(data.crossHiddenColumns.indexOf(gridColumnIndex), 1);\n    if (!data.isHidden && data.colspan < data.origColspan) {\n      data.colspan += 1;\n    }\n    data.isHidden = false;\n  });\n}","map":{"version":3,"names":["_templateObject","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value","toSingleLine","showColumn","nodeToProcess","gridColumnIndex","Number","isInteger","Error","childs","length","crossHiddenColumns","data","includes","isCollapsibleNode","walkUp","node","collapsible","splice","indexOf","isHidden","colspan","origColspan"],"sources":["/Users/priyadeliwala/Desktop/sales-dashboard/node_modules/handsontable/plugins/nestedHeaders/stateManager/nodeModifiers/showColumn.mjs"],"sourcesContent":["import \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.freeze.js\";\n\nvar _templateObject;\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nimport \"core-js/modules/es.number.is-integer.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport { toSingleLine } from \"../../../../helpers/templateLiteralTag.mjs\";\n/**\n * @param {TreeNode} nodeToProcess A tree node to process.\n * @param {number} gridColumnIndex The visual column index that triggers the node modification.\n *                                 The index can be between the root node column index and\n *                                 column index plus node colspan length.\n */\n\nexport function showColumn(nodeToProcess, gridColumnIndex) {\n  if (!Number.isInteger(gridColumnIndex)) {\n    throw new Error('The passed gridColumnIndex argument has invalid type.');\n  }\n\n  if (nodeToProcess.childs.length > 0) {\n    throw new Error(toSingleLine(_templateObject || (_templateObject = _taggedTemplateLiteral([\"The passed node is not the last node on the tree. Only for \\nthe last node, the show column modification can be applied.\"], [\"The passed node is not the last node on the tree. Only for\\\\x20\\nthe last node, the show column modification can be applied.\"]))));\n  }\n\n  var crossHiddenColumns = nodeToProcess.data.crossHiddenColumns;\n\n  if (!crossHiddenColumns.includes(gridColumnIndex)) {\n    return;\n  }\n\n  var isCollapsibleNode = false;\n  nodeToProcess.walkUp(function (node) {\n    var collapsible = node.data.collapsible;\n\n    if (collapsible) {\n      isCollapsibleNode = true;\n      return false; // Cancel tree traversing\n    }\n  }); // TODO: When the node is collapsible do not show the column. Currently collapsible headers\n  // does not work with hidden columns (hidden index map types).\n\n  if (isCollapsibleNode) {\n    return;\n  }\n\n  nodeToProcess.walkUp(function (node) {\n    var data = node.data;\n    data.crossHiddenColumns.splice(data.crossHiddenColumns.indexOf(gridColumnIndex), 1);\n\n    if (!data.isHidden && data.colspan < data.origColspan) {\n      data.colspan += 1;\n    }\n\n    data.isHidden = false;\n  });\n}"],"mappings":"AAGA,IAAIA,eAAe;AAEnB,SAASC,sBAAsBA,CAACC,OAAO,EAAEC,GAAG,EAAE;EAAE,IAAI,CAACA,GAAG,EAAE;IAAEA,GAAG,GAAGD,OAAO,CAACE,KAAK,CAAC,CAAC,CAAC;EAAE;EAAE,OAAOC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACE,gBAAgB,CAACL,OAAO,EAAE;IAAEC,GAAG,EAAE;MAAEK,KAAK,EAAEH,MAAM,CAACC,MAAM,CAACH,GAAG;IAAE;EAAE,CAAC,CAAC,CAAC;AAAE;AAQtL,SAASM,YAAY,QAAQ,4CAA4C;AACzE;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,UAAUA,CAACC,aAAa,EAAEC,eAAe,EAAE;EACzD,IAAI,CAACC,MAAM,CAACC,SAAS,CAACF,eAAe,CAAC,EAAE;IACtC,MAAM,IAAIG,KAAK,CAAC,uDAAuD,CAAC;EAC1E;EAEA,IAAIJ,aAAa,CAACK,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;IACnC,MAAM,IAAIF,KAAK,CAACN,YAAY,CAACT,eAAe,KAAKA,eAAe,GAAGC,sBAAsB,CAAC,CAAC,0HAA0H,CAAC,EAAE,CAAC,8HAA8H,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9V;EAEA,IAAIiB,kBAAkB,GAAGP,aAAa,CAACQ,IAAI,CAACD,kBAAkB;EAE9D,IAAI,CAACA,kBAAkB,CAACE,QAAQ,CAACR,eAAe,CAAC,EAAE;IACjD;EACF;EAEA,IAAIS,iBAAiB,GAAG,KAAK;EAC7BV,aAAa,CAACW,MAAM,CAAC,UAAUC,IAAI,EAAE;IACnC,IAAIC,WAAW,GAAGD,IAAI,CAACJ,IAAI,CAACK,WAAW;IAEvC,IAAIA,WAAW,EAAE;MACfH,iBAAiB,GAAG,IAAI;MACxB,OAAO,KAAK,CAAC,CAAC;IAChB;EACF,CAAC,CAAC,CAAC,CAAC;EACJ;;EAEA,IAAIA,iBAAiB,EAAE;IACrB;EACF;EAEAV,aAAa,CAACW,MAAM,CAAC,UAAUC,IAAI,EAAE;IACnC,IAAIJ,IAAI,GAAGI,IAAI,CAACJ,IAAI;IACpBA,IAAI,CAACD,kBAAkB,CAACO,MAAM,CAACN,IAAI,CAACD,kBAAkB,CAACQ,OAAO,CAACd,eAAe,CAAC,EAAE,CAAC,CAAC;IAEnF,IAAI,CAACO,IAAI,CAACQ,QAAQ,IAAIR,IAAI,CAACS,OAAO,GAAGT,IAAI,CAACU,WAAW,EAAE;MACrDV,IAAI,CAACS,OAAO,IAAI,CAAC;IACnB;IAEAT,IAAI,CAACQ,QAAQ,GAAG,KAAK;EACvB,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}